<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="982" onload="init(evt)" viewBox="0 0 1200 982" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" xmlns:fg="http://github.com/jonhoo/inferno"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:monospace; font-size:12px }
#title { text-anchor:middle; font-size:17px; }
#matched { text-anchor:end; }
#search { text-anchor:end; opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[
        var nametype = 'Function:';
        var fontsize = 12;
        var fontwidth = 0.59;
        var xpad = 10;
        var inverted = false;
        var searchcolor = 'rgb(230,0,230)';
        var fluiddrawing = true;
        var truncate_text_right = false;
    ]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames, known_font_width;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    known_font_width = get_monospace_width(frames);
    total_samples = parseInt(frames.attributes.total_samples.value);
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[*|x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
            svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            update_text_for_elements(frames.children);

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad;
            matchedtxt.attributes.x.value = svgWidth - xpad;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes["fg:x"]) {
            var params = get_params()
            params.x = el.attributes["fg:x"].value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["fg:orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("fg:orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["fg:orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["fg:orig_" + attr].value;
    e.removeAttribute("fg:orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function get_monospace_width(frames) {
    // Given the id="frames" element, return the width of text characters if
    // this is a monospace font, otherwise return 0.
    text = find_child(frames.children[0], "text");
    originalContent = text.textContent;
    text.textContent = "!";
    bangWidth = text.getComputedTextLength();
    text.textContent = "W";
    wWidth = text.getComputedTextLength();
    text.textContent = originalContent;
    if (bangWidth === wWidth) {
        return bangWidth;
    } else {
        return 0;
    }
}
function update_text_for_elements(elements) {
    // In order to render quickly in the browser, you want to do one pass of
    // reading attributes, and one pass of mutating attributes. See
    // https://web.dev/avoid-large-complex-layouts-and-layout-thrashing/ for details.

    // Fall back to inefficient calculation, if we're variable-width font.
    // TODO This should be optimized somehow too.
    if (known_font_width === 0) {
        for (var i = 0; i < elements.length; i++) {
            update_text(elements[i]);
        }
        return;
    }

    var textElemNewAttributes = [];
    for (var i = 0; i < elements.length; i++) {
        var e = elements[i];
        var r = find_child(e, "rect");
        var t = find_child(e, "text");
        var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
        var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
        var newX = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));

        // Smaller than this size won't fit anything
        if (w < 2 * known_font_width) {
            textElemNewAttributes.push([newX, ""]);
            continue;
        }

        // Fit in full text width
        if (txt.length * known_font_width < w) {
            textElemNewAttributes.push([newX, txt]);
            continue;
        }

        var substringLength = Math.floor(w / known_font_width) - 2;
        if (truncate_text_right) {
            // Truncate the right side of the text.
            textElemNewAttributes.push([newX, txt.substring(0, substringLength) + ".."]);
            continue;
        } else {
            // Truncate the left side of the text.
            textElemNewAttributes.push([newX, ".." + txt.substring(txt.length - substringLength, txt.length)]);
            continue;
        }
    }

    console.assert(textElemNewAttributes.length === elements.length, "Resize failed, please file a bug at https://github.com/jonhoo/inferno/");

    // Now that we know new textContent, set it all in one go so we don't refresh a bazillion times.
    for (var i = 0; i < elements.length; i++) {
        var e = elements[i];
        var values = textElemNewAttributes[i];
        var t = find_child(e, "text");
        t.attributes.x.value = values[0];
        t.textContent = values[1];
    }
}

function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));

    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * parseInt(e.attributes["fg:x"].value) / total_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / total_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, zoomed_width_samples) {
    if (e.tagName == "text") {
        var parent_x = parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value);
        e.attributes.x.value = format_percent(parent_x + (100 * 3 / frames.attributes.width.value));
    } else if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * (parseInt(e.attributes["fg:x"].value) - x) / zoomed_width_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / zoomed_width_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, zoomed_width_samples);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseInt(attr["fg:w"].value);
    var xmin = parseInt(attr["fg:x"].value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    var to_update_text = [];
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseInt(a["fg:x"].value);
        var ew = parseInt(a["fg:w"].value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                to_update_text.push(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, width);
                to_update_text.push(e);
            }
        }
    }
    update_text_for_elements(to_update_text);
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
    }
    update_text_for_elements(el);
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        // Skip over frames which are either not visible, or below the zoomed-to frame
        if (e.classList.contains("hide") || e.classList.contains("parent")) {
            continue;
        }
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseInt(rect.attributes["fg:w"].value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseInt(rect.attributes["fg:x"].value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    for (var k in keys) {
        var x = parseInt(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="982" fill="url(#background)"/><text id="title" fill="rgb(0,0,0)" x="50.0000%" y="24.00">Flame Graph</text><text id="details" fill="rgb(0,0,0)" x="10" y="965.00"> </text><text id="unzoom" class="hide" fill="rgb(0,0,0)" x="10" y="24.00">Reset Zoom</text><text id="search" fill="rgb(0,0,0)" x="1190" y="24.00">Search</text><text id="matched" fill="rgb(0,0,0)" x="1190" y="965.00"> </text><svg id="frames" x="10" width="1180" total_samples="17393"><g><title>qos_class_main (2 samples, 0.01%)</title><rect x="0.0057%" y="917" width="0.0115%" height="15" fill="rgb(227,0,7)" fg:x="1" fg:w="2"/><text x="0.2557%" y="927.50"></text></g><g><title>start_wqthread (2 samples, 0.01%)</title><rect x="0.0057%" y="901" width="0.0115%" height="15" fill="rgb(217,0,24)" fg:x="1" fg:w="2"/><text x="0.2557%" y="911.50"></text></g><g><title>dyld4::LibSystemHelpersWrapper::exit(int) const (2 samples, 0.01%)</title><rect x="0.0172%" y="901" width="0.0115%" height="15" fill="rgb(221,193,54)" fg:x="3" fg:w="2"/><text x="0.2672%" y="911.50"></text></g><g><title>dyld4::LibSystemHelpers::exit(int) const (2 samples, 0.01%)</title><rect x="0.0172%" y="885" width="0.0115%" height="15" fill="rgb(248,212,6)" fg:x="3" fg:w="2"/><text x="0.2672%" y="895.50"></text></g><g><title>exit (2 samples, 0.01%)</title><rect x="0.0172%" y="869" width="0.0115%" height="15" fill="rgb(208,68,35)" fg:x="3" fg:w="2"/><text x="0.2672%" y="879.50"></text></g><g><title>__cxa_finalize_ranges (2 samples, 0.01%)</title><rect x="0.0172%" y="853" width="0.0115%" height="15" fill="rgb(232,128,0)" fg:x="3" fg:w="2"/><text x="0.2672%" y="863.50"></text></g><g><title>PropertyList::encode(ByteStream&amp;) (3 samples, 0.02%)</title><rect x="0.0345%" y="805" width="0.0172%" height="15" fill="rgb(207,160,47)" fg:x="6" fg:w="3"/><text x="0.2845%" y="815.50"></text></g><g><title>dyld4::ExternallyViewableState::setLibSystemInitialized() (5 samples, 0.03%)</title><rect x="0.0345%" y="853" width="0.0287%" height="15" fill="rgb(228,23,34)" fg:x="6" fg:w="5"/><text x="0.2845%" y="863.50"></text></g><g><title>dyld4::ExternallyViewableState::setDyldState(unsigned char) (5 samples, 0.03%)</title><rect x="0.0345%" y="837" width="0.0287%" height="15" fill="rgb(218,30,26)" fg:x="6" fg:w="5"/><text x="0.2845%" y="847.50"></text></g><g><title>dyld4::ExternallyViewableState::generateAtlas(lsl::Allocator&amp;) (5 samples, 0.03%)</title><rect x="0.0345%" y="821" width="0.0287%" height="15" fill="rgb(220,122,19)" fg:x="6" fg:w="5"/><text x="0.2845%" y="831.50"></text></g><g><title>google::protobuf::DescriptorPool::InternalAddGeneratedFile(void const*, int) (2 samples, 0.01%)</title><rect x="0.1495%" y="597" width="0.0115%" height="15" fill="rgb(250,228,42)" fg:x="26" fg:w="2"/><text x="0.3995%" y="607.50"></text></g><g><title>google::protobuf::EncodedDescriptorDatabase::Add(void const*, int) (2 samples, 0.01%)</title><rect x="0.1495%" y="581" width="0.0115%" height="15" fill="rgb(240,193,28)" fg:x="26" fg:w="2"/><text x="0.3995%" y="591.50"></text></g><g><title>google::protobuf::MessageLite::ParseFromArray(void const*, int) (2 samples, 0.01%)</title><rect x="0.1495%" y="565" width="0.0115%" height="15" fill="rgb(216,20,37)" fg:x="26" fg:w="2"/><text x="0.3995%" y="575.50"></text></g><g><title>dyld4::JustInTimeLoader::runInitializers(dyld4::RuntimeState&amp;) const (15 samples, 0.09%)</title><rect x="0.0805%" y="741" width="0.0862%" height="15" fill="rgb(206,188,39)" fg:x="14" fg:w="15"/><text x="0.3305%" y="751.50"></text></g><g><title>dyld4::Loader::findAndRunAllInitializers(dyld4::RuntimeState&amp;) const (15 samples, 0.09%)</title><rect x="0.0805%" y="725" width="0.0862%" height="15" fill="rgb(217,207,13)" fg:x="14" fg:w="15"/><text x="0.3305%" y="735.50"></text></g><g><title>dyld3::MachOAnalyzer::forEachInitializer(Diagnostics&amp;, dyld3::MachOAnalyzer::VMAddrConverter const&amp;, void (unsigned int) block_pointer, void const*) const (15 samples, 0.09%)</title><rect x="0.0805%" y="709" width="0.0862%" height="15" fill="rgb(231,73,38)" fg:x="14" fg:w="15"/><text x="0.3305%" y="719.50"></text></g><g><title>mach_o::Header::forEachSection(void (mach_o::Header::SectionInfo const&amp;, bool&amp;) block_pointer) const (15 samples, 0.09%)</title><rect x="0.0805%" y="693" width="0.0862%" height="15" fill="rgb(225,20,46)" fg:x="14" fg:w="15"/><text x="0.3305%" y="703.50"></text></g><g><title>mach_o::Header::forEachLoadCommand(void (load_command const*, bool&amp;) block_pointer) const (15 samples, 0.09%)</title><rect x="0.0805%" y="677" width="0.0862%" height="15" fill="rgb(210,31,41)" fg:x="14" fg:w="15"/><text x="0.3305%" y="687.50"></text></g><g><title>invocation function for block in mach_o::Header::forEachSection(void (mach_o::Header::SectionInfo const&amp;, bool&amp;) block_pointer) const (15 samples, 0.09%)</title><rect x="0.0805%" y="661" width="0.0862%" height="15" fill="rgb(221,200,47)" fg:x="14" fg:w="15"/><text x="0.3305%" y="671.50"></text></g><g><title>invocation function for block in dyld3::MachOAnalyzer::forEachInitializer(Diagnostics&amp;, dyld3::MachOAnalyzer::VMAddrConverter const&amp;, void (unsigned int) block_pointer, void const*) const (15 samples, 0.09%)</title><rect x="0.0805%" y="645" width="0.0862%" height="15" fill="rgb(226,26,5)" fg:x="14" fg:w="15"/><text x="0.3305%" y="655.50"></text></g><g><title>invocation function for block in dyld4::Loader::findAndRunAllInitializers(dyld4::RuntimeState&amp;) const (8 samples, 0.05%)</title><rect x="0.1207%" y="629" width="0.0460%" height="15" fill="rgb(249,33,26)" fg:x="21" fg:w="8"/><text x="0.3707%" y="639.50"></text></g><g><title>google::protobuf::internal::AddDescriptors(google::protobuf::internal::DescriptorTable const*) (3 samples, 0.02%)</title><rect x="0.1495%" y="613" width="0.0172%" height="15" fill="rgb(235,183,28)" fg:x="26" fg:w="3"/><text x="0.3995%" y="623.50"></text></g><g><title>dyld4::JustInTimeLoader::runInitializers(dyld4::RuntimeState&amp;) const (5 samples, 0.03%)</title><rect x="0.1667%" y="725" width="0.0287%" height="15" fill="rgb(221,5,38)" fg:x="29" fg:w="5"/><text x="0.4167%" y="735.50"></text></g><g><title>dyld4::Loader::findAndRunAllInitializers(dyld4::RuntimeState&amp;) const (5 samples, 0.03%)</title><rect x="0.1667%" y="709" width="0.0287%" height="15" fill="rgb(247,18,42)" fg:x="29" fg:w="5"/><text x="0.4167%" y="719.50"></text></g><g><title>dyld3::MachOAnalyzer::forEachInitializer(Diagnostics&amp;, dyld3::MachOAnalyzer::VMAddrConverter const&amp;, void (unsigned int) block_pointer, void const*) const (5 samples, 0.03%)</title><rect x="0.1667%" y="693" width="0.0287%" height="15" fill="rgb(241,131,45)" fg:x="29" fg:w="5"/><text x="0.4167%" y="703.50"></text></g><g><title>mach_o::Header::forEachSection(void (mach_o::Header::SectionInfo const&amp;, bool&amp;) block_pointer) const (5 samples, 0.03%)</title><rect x="0.1667%" y="677" width="0.0287%" height="15" fill="rgb(249,31,29)" fg:x="29" fg:w="5"/><text x="0.4167%" y="687.50"></text></g><g><title>mach_o::Header::forEachLoadCommand(void (load_command const*, bool&amp;) block_pointer) const (5 samples, 0.03%)</title><rect x="0.1667%" y="661" width="0.0287%" height="15" fill="rgb(225,111,53)" fg:x="29" fg:w="5"/><text x="0.4167%" y="671.50"></text></g><g><title>invocation function for block in mach_o::Header::forEachSection(void (mach_o::Header::SectionInfo const&amp;, bool&amp;) block_pointer) const (5 samples, 0.03%)</title><rect x="0.1667%" y="645" width="0.0287%" height="15" fill="rgb(238,160,17)" fg:x="29" fg:w="5"/><text x="0.4167%" y="655.50"></text></g><g><title>invocation function for block in dyld3::MachOAnalyzer::forEachInitializer(Diagnostics&amp;, dyld3::MachOAnalyzer::VMAddrConverter const&amp;, void (unsigned int) block_pointer, void const*) const (5 samples, 0.03%)</title><rect x="0.1667%" y="629" width="0.0287%" height="15" fill="rgb(214,148,48)" fg:x="29" fg:w="5"/><text x="0.4167%" y="639.50"></text></g><g><title>invocation function for block in dyld4::Loader::findAndRunAllInitializers(dyld4::RuntimeState&amp;) const (3 samples, 0.02%)</title><rect x="0.1782%" y="613" width="0.0172%" height="15" fill="rgb(232,36,49)" fg:x="31" fg:w="3"/><text x="0.4282%" y="623.50"></text></g><g><title>PropertyList::encode(ByteStream&amp;) (3 samples, 0.02%)</title><rect x="0.2070%" y="309" width="0.0172%" height="15" fill="rgb(209,103,24)" fg:x="36" fg:w="3"/><text x="0.4570%" y="319.50"></text></g><g><title>_GLOBAL__sub_I_main.cpp (6 samples, 0.03%)</title><rect x="0.2012%" y="581" width="0.0345%" height="15" fill="rgb(229,88,8)" fg:x="35" fg:w="6"/><text x="0.4512%" y="591.50"></text></g><g><title>tbb::detail::r1::governor::acquire_resources() (6 samples, 0.03%)</title><rect x="0.2012%" y="565" width="0.0345%" height="15" fill="rgb(213,181,19)" fg:x="35" fg:w="6"/><text x="0.4512%" y="575.50"></text></g><g><title>tbb::detail::r1::global_control_acquire() (6 samples, 0.03%)</title><rect x="0.2012%" y="549" width="0.0345%" height="15" fill="rgb(254,191,54)" fg:x="35" fg:w="6"/><text x="0.4512%" y="559.50"></text></g><g><title>tbb::detail::r1::initialize_cache_aligned_allocate_handler(unsigned long, unsigned long) (6 samples, 0.03%)</title><rect x="0.2012%" y="533" width="0.0345%" height="15" fill="rgb(241,83,37)" fg:x="35" fg:w="6"/><text x="0.4512%" y="543.50"></text></g><g><title>tbb::detail::r1::initialize_cache_aligned_allocator() (6 samples, 0.03%)</title><rect x="0.2012%" y="517" width="0.0345%" height="15" fill="rgb(233,36,39)" fg:x="35" fg:w="6"/><text x="0.4512%" y="527.50"></text></g><g><title>std::__1::__call_once(unsigned long volatile&amp;, void*, void (*)(void*)) (6 samples, 0.03%)</title><rect x="0.2012%" y="501" width="0.0345%" height="15" fill="rgb(226,3,54)" fg:x="35" fg:w="6"/><text x="0.4512%" y="511.50"></text></g><g><title>tbb::detail::r1::initialize_handler_pointers() (6 samples, 0.03%)</title><rect x="0.2012%" y="485" width="0.0345%" height="15" fill="rgb(245,192,40)" fg:x="35" fg:w="6"/><text x="0.4512%" y="495.50"></text></g><g><title>tbb::detail::r1::dynamic_link(char const*, tbb::detail::r1::dynamic_link_descriptor const*, unsigned long, void**, int) (6 samples, 0.03%)</title><rect x="0.2012%" y="469" width="0.0345%" height="15" fill="rgb(238,167,29)" fg:x="35" fg:w="6"/><text x="0.4512%" y="479.50"></text></g><g><title>tbb::detail::r1::dynamic_load(char const*, tbb::detail::r1::dynamic_link_descriptor const*, unsigned long, bool) (6 samples, 0.03%)</title><rect x="0.2012%" y="453" width="0.0345%" height="15" fill="rgb(232,182,51)" fg:x="35" fg:w="6"/><text x="0.4512%" y="463.50"></text></g><g><title>dyld4::APIs::dlopen(char const*, int) (6 samples, 0.03%)</title><rect x="0.2012%" y="437" width="0.0345%" height="15" fill="rgb(231,60,39)" fg:x="35" fg:w="6"/><text x="0.4512%" y="447.50"></text></g><g><title>dyld4::APIs::dlopen_from(char const*, int, void*) (6 samples, 0.03%)</title><rect x="0.2012%" y="421" width="0.0345%" height="15" fill="rgb(208,69,12)" fg:x="35" fg:w="6"/><text x="0.4512%" y="431.50"></text></g><g><title>dyld4::APIs::dlopen_from(char const*, int, void*)::$_0::operator()() const (6 samples, 0.03%)</title><rect x="0.2012%" y="405" width="0.0345%" height="15" fill="rgb(235,93,37)" fg:x="35" fg:w="6"/><text x="0.4512%" y="415.50"></text></g><g><title>void dyld4::RuntimeLocks::withLoadersWriteLockAndProtectedStack&lt;dyld4::APIs::dlopen_from(char const*, int, void*)::$_0::operator()() const::&apos;lambda&apos;()&gt;(dyld4::APIs::dlopen_from(char const*, int, void*)::$_0::operator()() const::&apos;lambda&apos;())::&apos;lambda&apos;()::operator()() const (5 samples, 0.03%)</title><rect x="0.2070%" y="389" width="0.0287%" height="15" fill="rgb(213,116,39)" fg:x="36" fg:w="5"/><text x="0.4570%" y="399.50"></text></g><g><title>dyld4::APIs::dlopen_from(char const*, int, void*)::$_0::operator()() const::&apos;lambda&apos;()::operator()() const (5 samples, 0.03%)</title><rect x="0.2070%" y="373" width="0.0287%" height="15" fill="rgb(222,207,29)" fg:x="36" fg:w="5"/><text x="0.4570%" y="383.50"></text></g><g><title>dyld4::RuntimeState::notifyDebuggerLoad(std::__1::span&lt;dyld4::Loader const*, 18446744073709551615ul&gt; const&amp;) (5 samples, 0.03%)</title><rect x="0.2070%" y="357" width="0.0287%" height="15" fill="rgb(206,96,30)" fg:x="36" fg:w="5"/><text x="0.4570%" y="367.50"></text></g><g><title>dyld4::ExternallyViewableState::addImages(lsl::Allocator&amp;, lsl::Allocator&amp;, std::__1::span&lt;dyld4::ExternallyViewableState::ImageInfo, 18446744073709551615ul&gt; const&amp;) (5 samples, 0.03%)</title><rect x="0.2070%" y="341" width="0.0287%" height="15" fill="rgb(218,138,4)" fg:x="36" fg:w="5"/><text x="0.4570%" y="351.50"></text></g><g><title>dyld4::ExternallyViewableState::generateAtlas(lsl::Allocator&amp;) (5 samples, 0.03%)</title><rect x="0.2070%" y="325" width="0.0287%" height="15" fill="rgb(250,191,14)" fg:x="36" fg:w="5"/><text x="0.4570%" y="335.50"></text></g><g><title>dyld4::JustInTimeLoader::runInitializers(dyld4::RuntimeState&amp;) const (9 samples, 0.05%)</title><rect x="0.1955%" y="709" width="0.0517%" height="15" fill="rgb(239,60,40)" fg:x="34" fg:w="9"/><text x="0.4455%" y="719.50"></text></g><g><title>dyld4::Loader::findAndRunAllInitializers(dyld4::RuntimeState&amp;) const (9 samples, 0.05%)</title><rect x="0.1955%" y="693" width="0.0517%" height="15" fill="rgb(206,27,48)" fg:x="34" fg:w="9"/><text x="0.4455%" y="703.50"></text></g><g><title>dyld3::MachOAnalyzer::forEachInitializer(Diagnostics&amp;, dyld3::MachOAnalyzer::VMAddrConverter const&amp;, void (unsigned int) block_pointer, void const*) const (9 samples, 0.05%)</title><rect x="0.1955%" y="677" width="0.0517%" height="15" fill="rgb(225,35,8)" fg:x="34" fg:w="9"/><text x="0.4455%" y="687.50"></text></g><g><title>mach_o::Header::forEachSection(void (mach_o::Header::SectionInfo const&amp;, bool&amp;) block_pointer) const (9 samples, 0.05%)</title><rect x="0.1955%" y="661" width="0.0517%" height="15" fill="rgb(250,213,24)" fg:x="34" fg:w="9"/><text x="0.4455%" y="671.50"></text></g><g><title>mach_o::Header::forEachLoadCommand(void (load_command const*, bool&amp;) block_pointer) const (9 samples, 0.05%)</title><rect x="0.1955%" y="645" width="0.0517%" height="15" fill="rgb(247,123,22)" fg:x="34" fg:w="9"/><text x="0.4455%" y="655.50"></text></g><g><title>invocation function for block in mach_o::Header::forEachSection(void (mach_o::Header::SectionInfo const&amp;, bool&amp;) block_pointer) const (9 samples, 0.05%)</title><rect x="0.1955%" y="629" width="0.0517%" height="15" fill="rgb(231,138,38)" fg:x="34" fg:w="9"/><text x="0.4455%" y="639.50"></text></g><g><title>invocation function for block in dyld3::MachOAnalyzer::forEachInitializer(Diagnostics&amp;, dyld3::MachOAnalyzer::VMAddrConverter const&amp;, void (unsigned int) block_pointer, void const*) const (9 samples, 0.05%)</title><rect x="0.1955%" y="613" width="0.0517%" height="15" fill="rgb(231,145,46)" fg:x="34" fg:w="9"/><text x="0.4455%" y="623.50"></text></g><g><title>invocation function for block in dyld4::Loader::findAndRunAllInitializers(dyld4::RuntimeState&amp;) const (8 samples, 0.05%)</title><rect x="0.2012%" y="597" width="0.0460%" height="15" fill="rgb(251,118,11)" fg:x="35" fg:w="8"/><text x="0.4512%" y="607.50"></text></g><g><title>mach_o::Header::forEachSection(void (mach_o::Header::SectionInfo const&amp;, bool&amp;) block_pointer) const (8 samples, 0.05%)</title><rect x="0.2472%" y="645" width="0.0460%" height="15" fill="rgb(217,147,25)" fg:x="43" fg:w="8"/><text x="0.4972%" y="655.50"></text></g><g><title>mach_o::Header::forEachLoadCommand(void (load_command const*, bool&amp;) block_pointer) const (8 samples, 0.05%)</title><rect x="0.2472%" y="629" width="0.0460%" height="15" fill="rgb(247,81,37)" fg:x="43" fg:w="8"/><text x="0.4972%" y="639.50"></text></g><g><title>invocation function for block in mach_o::Header::forEachSection(void (mach_o::Header::SectionInfo const&amp;, bool&amp;) block_pointer) const (8 samples, 0.05%)</title><rect x="0.2472%" y="613" width="0.0460%" height="15" fill="rgb(209,12,38)" fg:x="43" fg:w="8"/><text x="0.4972%" y="623.50"></text></g><g><title>invocation function for block in dyld3::MachOAnalyzer::forEachInitializer(Diagnostics&amp;, dyld3::MachOAnalyzer::VMAddrConverter const&amp;, void (unsigned int) block_pointer, void const*) const (8 samples, 0.05%)</title><rect x="0.2472%" y="597" width="0.0460%" height="15" fill="rgb(227,1,9)" fg:x="43" fg:w="8"/><text x="0.4972%" y="607.50"></text></g><g><title>dyld4::JustInTimeLoader::runInitializers(dyld4::RuntimeState&amp;) const (9 samples, 0.05%)</title><rect x="0.2472%" y="693" width="0.0517%" height="15" fill="rgb(248,47,43)" fg:x="43" fg:w="9"/><text x="0.4972%" y="703.50"></text></g><g><title>dyld4::Loader::findAndRunAllInitializers(dyld4::RuntimeState&amp;) const (9 samples, 0.05%)</title><rect x="0.2472%" y="677" width="0.0517%" height="15" fill="rgb(221,10,30)" fg:x="43" fg:w="9"/><text x="0.4972%" y="687.50"></text></g><g><title>dyld3::MachOAnalyzer::forEachInitializer(Diagnostics&amp;, dyld3::MachOAnalyzer::VMAddrConverter const&amp;, void (unsigned int) block_pointer, void const*) const (9 samples, 0.05%)</title><rect x="0.2472%" y="661" width="0.0517%" height="15" fill="rgb(210,229,1)" fg:x="43" fg:w="9"/><text x="0.4972%" y="671.50"></text></g><g><title>dyld4::Loader::runInitializersBottomUp(dyld4::RuntimeState&amp;, dyld3::Array&lt;dyld4::Loader const*&gt;&amp;, dyld3::Array&lt;dyld4::Loader const*&gt;&amp;) const (6 samples, 0.03%)</title><rect x="0.2990%" y="677" width="0.0345%" height="15" fill="rgb(222,148,37)" fg:x="52" fg:w="6"/><text x="0.5490%" y="687.50"></text></g><g><title>dyld4::JustInTimeLoader::runInitializers(dyld4::RuntimeState&amp;) const (6 samples, 0.03%)</title><rect x="0.2990%" y="661" width="0.0345%" height="15" fill="rgb(234,67,33)" fg:x="52" fg:w="6"/><text x="0.5490%" y="671.50"></text></g><g><title>dyld4::Loader::findAndRunAllInitializers(dyld4::RuntimeState&amp;) const (6 samples, 0.03%)</title><rect x="0.2990%" y="645" width="0.0345%" height="15" fill="rgb(247,98,35)" fg:x="52" fg:w="6"/><text x="0.5490%" y="655.50"></text></g><g><title>dyld3::MachOAnalyzer::forEachInitializer(Diagnostics&amp;, dyld3::MachOAnalyzer::VMAddrConverter const&amp;, void (unsigned int) block_pointer, void const*) const (6 samples, 0.03%)</title><rect x="0.2990%" y="629" width="0.0345%" height="15" fill="rgb(247,138,52)" fg:x="52" fg:w="6"/><text x="0.5490%" y="639.50"></text></g><g><title>mach_o::Header::forEachSection(void (mach_o::Header::SectionInfo const&amp;, bool&amp;) block_pointer) const (6 samples, 0.03%)</title><rect x="0.2990%" y="613" width="0.0345%" height="15" fill="rgb(213,79,30)" fg:x="52" fg:w="6"/><text x="0.5490%" y="623.50"></text></g><g><title>mach_o::Header::forEachLoadCommand(void (load_command const*, bool&amp;) block_pointer) const (6 samples, 0.03%)</title><rect x="0.2990%" y="597" width="0.0345%" height="15" fill="rgb(246,177,23)" fg:x="52" fg:w="6"/><text x="0.5490%" y="607.50"></text></g><g><title>invocation function for block in mach_o::Header::forEachSection(void (mach_o::Header::SectionInfo const&amp;, bool&amp;) block_pointer) const (6 samples, 0.03%)</title><rect x="0.2990%" y="581" width="0.0345%" height="15" fill="rgb(230,62,27)" fg:x="52" fg:w="6"/><text x="0.5490%" y="591.50"></text></g><g><title>invocation function for block in dyld3::MachOAnalyzer::forEachInitializer(Diagnostics&amp;, dyld3::MachOAnalyzer::VMAddrConverter const&amp;, void (unsigned int) block_pointer, void const*) const (6 samples, 0.03%)</title><rect x="0.2990%" y="565" width="0.0345%" height="15" fill="rgb(216,154,8)" fg:x="52" fg:w="6"/><text x="0.5490%" y="575.50"></text></g><g><title>dyld4::Loader::runInitializersBottomUpPlusUpwardLinks(dyld4::RuntimeState&amp;) const (48 samples, 0.28%)</title><rect x="0.0632%" y="853" width="0.2760%" height="15" fill="rgb(244,35,45)" fg:x="11" fg:w="48"/><text x="0.3132%" y="863.50"></text></g><g><title>dyld4::Loader::runInitializersBottomUpPlusUpwardLinks(dyld4::RuntimeState&amp;) const::$_0::operator()() const (48 samples, 0.28%)</title><rect x="0.0632%" y="837" width="0.2760%" height="15" fill="rgb(251,115,12)" fg:x="11" fg:w="48"/><text x="0.3132%" y="847.50"></text></g><g><title>dyld4::Loader::runInitializersBottomUp(dyld4::RuntimeState&amp;, dyld3::Array&lt;dyld4::Loader const*&gt;&amp;, dyld3::Array&lt;dyld4::Loader const*&gt;&amp;) const (48 samples, 0.28%)</title><rect x="0.0632%" y="821" width="0.2760%" height="15" fill="rgb(240,54,50)" fg:x="11" fg:w="48"/><text x="0.3132%" y="831.50"></text></g><g><title>dyld4::Loader::runInitializersBottomUp(dyld4::RuntimeState&amp;, dyld3::Array&lt;dyld4::Loader const*&gt;&amp;, dyld3::Array&lt;dyld4::Loader const*&gt;&amp;) const (48 samples, 0.28%)</title><rect x="0.0632%" y="805" width="0.2760%" height="15" fill="rgb(233,84,52)" fg:x="11" fg:w="48"/><text x="0.3132%" y="815.50"></text></g><g><title>dyld4::Loader::runInitializersBottomUp(dyld4::RuntimeState&amp;, dyld3::Array&lt;dyld4::Loader const*&gt;&amp;, dyld3::Array&lt;dyld4::Loader const*&gt;&amp;) const (47 samples, 0.27%)</title><rect x="0.0690%" y="789" width="0.2702%" height="15" fill="rgb(207,117,47)" fg:x="12" fg:w="47"/><text x="0.3190%" y="799.50"></text></g><g><title>dyld4::Loader::runInitializersBottomUp(dyld4::RuntimeState&amp;, dyld3::Array&lt;dyld4::Loader const*&gt;&amp;, dyld3::Array&lt;dyld4::Loader const*&gt;&amp;) const (46 samples, 0.26%)</title><rect x="0.0747%" y="773" width="0.2645%" height="15" fill="rgb(249,43,39)" fg:x="13" fg:w="46"/><text x="0.3247%" y="783.50"></text></g><g><title>dyld4::Loader::runInitializersBottomUp(dyld4::RuntimeState&amp;, dyld3::Array&lt;dyld4::Loader const*&gt;&amp;, dyld3::Array&lt;dyld4::Loader const*&gt;&amp;) const (45 samples, 0.26%)</title><rect x="0.0805%" y="757" width="0.2587%" height="15" fill="rgb(209,38,44)" fg:x="14" fg:w="45"/><text x="0.3305%" y="767.50"></text></g><g><title>dyld4::Loader::runInitializersBottomUp(dyld4::RuntimeState&amp;, dyld3::Array&lt;dyld4::Loader const*&gt;&amp;, dyld3::Array&lt;dyld4::Loader const*&gt;&amp;) const (30 samples, 0.17%)</title><rect x="0.1667%" y="741" width="0.1725%" height="15" fill="rgb(236,212,23)" fg:x="29" fg:w="30"/><text x="0.4167%" y="751.50"></text></g><g><title>dyld4::Loader::runInitializersBottomUp(dyld4::RuntimeState&amp;, dyld3::Array&lt;dyld4::Loader const*&gt;&amp;, dyld3::Array&lt;dyld4::Loader const*&gt;&amp;) const (25 samples, 0.14%)</title><rect x="0.1955%" y="725" width="0.1437%" height="15" fill="rgb(242,79,21)" fg:x="34" fg:w="25"/><text x="0.4455%" y="735.50"></text></g><g><title>dyld4::Loader::runInitializersBottomUp(dyld4::RuntimeState&amp;, dyld3::Array&lt;dyld4::Loader const*&gt;&amp;, dyld3::Array&lt;dyld4::Loader const*&gt;&amp;) const (16 samples, 0.09%)</title><rect x="0.2472%" y="709" width="0.0920%" height="15" fill="rgb(211,96,35)" fg:x="43" fg:w="16"/><text x="0.4972%" y="719.50"></text></g><g><title>dyld4::Loader::runInitializersBottomUp(dyld4::RuntimeState&amp;, dyld3::Array&lt;dyld4::Loader const*&gt;&amp;, dyld3::Array&lt;dyld4::Loader const*&gt;&amp;) const (7 samples, 0.04%)</title><rect x="0.2990%" y="693" width="0.0402%" height="15" fill="rgb(253,215,40)" fg:x="52" fg:w="7"/><text x="0.5490%" y="703.50"></text></g><g><title>dyld4::PrebuiltLoader::runInitializers(dyld4::RuntimeState&amp;) const (4 samples, 0.02%)</title><rect x="0.3392%" y="853" width="0.0230%" height="15" fill="rgb(211,81,21)" fg:x="59" fg:w="4"/><text x="0.5892%" y="863.50"></text></g><g><title>dyld4::Loader::findAndRunAllInitializers(dyld4::RuntimeState&amp;) const (4 samples, 0.02%)</title><rect x="0.3392%" y="837" width="0.0230%" height="15" fill="rgb(208,190,38)" fg:x="59" fg:w="4"/><text x="0.5892%" y="847.50"></text></g><g><title>dyld3::MachOAnalyzer::forEachInitializer(Diagnostics&amp;, dyld3::MachOAnalyzer::VMAddrConverter const&amp;, void (unsigned int) block_pointer, void const*) const (4 samples, 0.02%)</title><rect x="0.3392%" y="821" width="0.0230%" height="15" fill="rgb(235,213,38)" fg:x="59" fg:w="4"/><text x="0.5892%" y="831.50"></text></g><g><title>mach_o::Header::forEachSection(void (mach_o::Header::SectionInfo const&amp;, bool&amp;) block_pointer) const (4 samples, 0.02%)</title><rect x="0.3392%" y="805" width="0.0230%" height="15" fill="rgb(237,122,38)" fg:x="59" fg:w="4"/><text x="0.5892%" y="815.50"></text></g><g><title>mach_o::Header::forEachLoadCommand(void (load_command const*, bool&amp;) block_pointer) const (4 samples, 0.02%)</title><rect x="0.3392%" y="789" width="0.0230%" height="15" fill="rgb(244,218,35)" fg:x="59" fg:w="4"/><text x="0.5892%" y="799.50"></text></g><g><title>invocation function for block in mach_o::Header::forEachSection(void (mach_o::Header::SectionInfo const&amp;, bool&amp;) block_pointer) const (4 samples, 0.02%)</title><rect x="0.3392%" y="773" width="0.0230%" height="15" fill="rgb(240,68,47)" fg:x="59" fg:w="4"/><text x="0.5892%" y="783.50"></text></g><g><title>invocation function for block in dyld3::MachOAnalyzer::forEachInitializer(Diagnostics&amp;, dyld3::MachOAnalyzer::VMAddrConverter const&amp;, void (unsigned int) block_pointer, void const*) const (4 samples, 0.02%)</title><rect x="0.3392%" y="757" width="0.0230%" height="15" fill="rgb(210,16,53)" fg:x="59" fg:w="4"/><text x="0.5892%" y="767.50"></text></g><g><title>invocation function for block in dyld4::Loader::findAndRunAllInitializers(dyld4::RuntimeState&amp;) const (4 samples, 0.02%)</title><rect x="0.3392%" y="741" width="0.0230%" height="15" fill="rgb(235,124,12)" fg:x="59" fg:w="4"/><text x="0.5892%" y="751.50"></text></g><g><title>libSystem_initializer (4 samples, 0.02%)</title><rect x="0.3392%" y="725" width="0.0230%" height="15" fill="rgb(224,169,11)" fg:x="59" fg:w="4"/><text x="0.5892%" y="735.50"></text></g><g><title>libdispatch_init (4 samples, 0.02%)</title><rect x="0.3392%" y="709" width="0.0230%" height="15" fill="rgb(250,166,2)" fg:x="59" fg:w="4"/><text x="0.5892%" y="719.50"></text></g><g><title>_os_object_init (4 samples, 0.02%)</title><rect x="0.3392%" y="693" width="0.0230%" height="15" fill="rgb(242,216,29)" fg:x="59" fg:w="4"/><text x="0.5892%" y="703.50"></text></g><g><title>_objc_init (4 samples, 0.02%)</title><rect x="0.3392%" y="677" width="0.0230%" height="15" fill="rgb(230,116,27)" fg:x="59" fg:w="4"/><text x="0.5892%" y="687.50"></text></g><g><title>_dyld_objc_register_callbacks (4 samples, 0.02%)</title><rect x="0.3392%" y="661" width="0.0230%" height="15" fill="rgb(228,99,48)" fg:x="59" fg:w="4"/><text x="0.5892%" y="671.50"></text></g><g><title>dyld4::APIs::_dyld_objc_register_callbacks(dyld4::ObjCCallbacks const*) (4 samples, 0.02%)</title><rect x="0.3392%" y="645" width="0.0230%" height="15" fill="rgb(253,11,6)" fg:x="59" fg:w="4"/><text x="0.5892%" y="655.50"></text></g><g><title>dyld4::RuntimeState::setObjCNotifiers(dyld4::ReadOnlyCallback&lt;void (*)(char const*, mach_header const*)&gt;, dyld4::ReadOnlyCallback&lt;void (*)(mach_header const*, void*, mach_header const*, void const*)&gt;, dyld4::ReadOnlyCallback&lt;void (*)(_dyld_objc_notify_mapped_info const*)&gt;, dyld4::ReadOnlyCallback&lt;void (*)(unsigned int, _dyld_objc_notify_mapped_info const*, void (unsigned int) block_pointer)&gt;) (4 samples, 0.02%)</title><rect x="0.3392%" y="629" width="0.0230%" height="15" fill="rgb(247,143,39)" fg:x="59" fg:w="4"/><text x="0.5892%" y="639.50"></text></g><g><title>dyld4::RuntimeLocks::withLoadersReadLock(void () block_pointer) (4 samples, 0.02%)</title><rect x="0.3392%" y="613" width="0.0230%" height="15" fill="rgb(236,97,10)" fg:x="59" fg:w="4"/><text x="0.5892%" y="623.50"></text></g><g><title>invocation function for block in dyld4::RuntimeState::setObjCNotifiers(dyld4::ReadOnlyCallback&lt;void (*)(char const*, mach_header const*)&gt;, dyld4::ReadOnlyCallback&lt;void (*)(mach_header const*, void*, mach_header const*, void const*)&gt;, dyld4::ReadOnlyCallback&lt;void (*)(_dyld_objc_notify_mapped_info const*)&gt;, dyld4::ReadOnlyCallback&lt;void (*)(unsigned int, _dyld_objc_notify_mapped_info const*, void (unsigned int) block_pointer)&gt;)::$_0::operator()() const (4 samples, 0.02%)</title><rect x="0.3392%" y="597" width="0.0230%" height="15" fill="rgb(233,208,19)" fg:x="59" fg:w="4"/><text x="0.5892%" y="607.50"></text></g><g><title>map_images (4 samples, 0.02%)</title><rect x="0.3392%" y="581" width="0.0230%" height="15" fill="rgb(216,164,2)" fg:x="59" fg:w="4"/><text x="0.5892%" y="591.50"></text></g><g><title>map_images_nolock (4 samples, 0.02%)</title><rect x="0.3392%" y="565" width="0.0230%" height="15" fill="rgb(220,129,5)" fg:x="59" fg:w="4"/><text x="0.5892%" y="575.50"></text></g><g><title>__sel_registerName(char const*, bool, bool) (4 samples, 0.02%)</title><rect x="0.3392%" y="549" width="0.0230%" height="15" fill="rgb(242,17,10)" fg:x="59" fg:w="4"/><text x="0.5892%" y="559.50"></text></g><g><title>dyld4::APIs::_dyld_get_objc_selector(char const*) (4 samples, 0.02%)</title><rect x="0.3392%" y="533" width="0.0230%" height="15" fill="rgb(242,107,0)" fg:x="59" fg:w="4"/><text x="0.5892%" y="543.50"></text></g><g><title>objc::StringHashTable::tryGetIndex(char const*) const (4 samples, 0.02%)</title><rect x="0.3392%" y="517" width="0.0230%" height="15" fill="rgb(251,28,31)" fg:x="59" fg:w="4"/><text x="0.5892%" y="527.50"></text></g><g><title>&lt;deduplicated_symbol&gt; (4 samples, 0.02%)</title><rect x="0.3392%" y="501" width="0.0230%" height="15" fill="rgb(233,223,10)" fg:x="59" fg:w="4"/><text x="0.5892%" y="511.50"></text></g><g><title>dyld4::APIs::runAllInitializersForMain() (58 samples, 0.33%)</title><rect x="0.0345%" y="869" width="0.3335%" height="15" fill="rgb(215,21,27)" fg:x="6" fg:w="58"/><text x="0.2845%" y="879.50"></text></g><g><title>PropertyList::encode(ByteStream&amp;) (3 samples, 0.02%)</title><rect x="0.3737%" y="837" width="0.0172%" height="15" fill="rgb(232,23,21)" fg:x="65" fg:w="3"/><text x="0.6237%" y="847.50"></text></g><g><title>dyld4::ExternallyViewableState::setDyldState(unsigned char) (6 samples, 0.03%)</title><rect x="0.3680%" y="869" width="0.0345%" height="15" fill="rgb(244,5,23)" fg:x="64" fg:w="6"/><text x="0.6180%" y="879.50"></text></g><g><title>dyld4::ExternallyViewableState::generateAtlas(lsl::Allocator&amp;) (6 samples, 0.03%)</title><rect x="0.3680%" y="853" width="0.0345%" height="15" fill="rgb(226,81,46)" fg:x="64" fg:w="6"/><text x="0.6180%" y="863.50"></text></g><g><title>dyld3::open(char const*, int, int) (12 samples, 0.07%)</title><rect x="0.4082%" y="821" width="0.0690%" height="15" fill="rgb(247,70,30)" fg:x="71" fg:w="12"/><text x="0.6582%" y="831.50"></text></g><g><title>open_with_subsystem (12 samples, 0.07%)</title><rect x="0.4082%" y="805" width="0.0690%" height="15" fill="rgb(212,68,19)" fg:x="71" fg:w="12"/><text x="0.6582%" y="815.50"></text></g><g><title>open (12 samples, 0.07%)</title><rect x="0.4082%" y="789" width="0.0690%" height="15" fill="rgb(240,187,13)" fg:x="71" fg:w="12"/><text x="0.6582%" y="799.50"></text></g><g><title>__open (12 samples, 0.07%)</title><rect x="0.4082%" y="773" width="0.0690%" height="15" fill="rgb(223,113,26)" fg:x="71" fg:w="12"/><text x="0.6582%" y="783.50"></text></g><g><title>dyld4::SyscallDelegate::sandboxBlockedPageInLinking() const (2 samples, 0.01%)</title><rect x="0.4772%" y="821" width="0.0115%" height="15" fill="rgb(206,192,2)" fg:x="83" fg:w="2"/><text x="0.7272%" y="831.50"></text></g><g><title>sandbox_check (2 samples, 0.01%)</title><rect x="0.4772%" y="805" width="0.0115%" height="15" fill="rgb(241,108,4)" fg:x="83" fg:w="2"/><text x="0.7272%" y="815.50"></text></g><g><title>sandbox_check_common (2 samples, 0.01%)</title><rect x="0.4772%" y="789" width="0.0115%" height="15" fill="rgb(247,173,49)" fg:x="83" fg:w="2"/><text x="0.7272%" y="799.50"></text></g><g><title>&lt;deduplicated_symbol&gt; (2 samples, 0.01%)</title><rect x="0.4772%" y="773" width="0.0115%" height="15" fill="rgb(224,114,35)" fg:x="83" fg:w="2"/><text x="0.7272%" y="783.50"></text></g><g><title>dyld4::Loader::applyFixupsGeneric(Diagnostics&amp;, dyld4::RuntimeState&amp;, unsigned long long, dyld3::Array&lt;void const*&gt; const&amp;, dyld3::Array&lt;void const*&gt; const&amp;, bool, dyld3::Array&lt;dyld4::Loader::MissingFlatLazySymbol&gt; const&amp;) const (19 samples, 0.11%)</title><rect x="0.4025%" y="853" width="0.1092%" height="15" fill="rgb(245,159,27)" fg:x="70" fg:w="19"/><text x="0.6525%" y="863.50"></text></g><g><title>dyld4::Loader::setUpPageInLinking(Diagnostics&amp;, dyld4::RuntimeState&amp;, unsigned long, unsigned long long, dyld3::Array&lt;void const*&gt; const&amp;) const (19 samples, 0.11%)</title><rect x="0.4025%" y="837" width="0.1092%" height="15" fill="rgb(245,172,44)" fg:x="70" fg:w="19"/><text x="0.6525%" y="847.50"></text></g><g><title>invocation function for block in dyld4::Loader::setUpPageInLinking(Diagnostics&amp;, dyld4::RuntimeState&amp;, unsigned long, unsigned long long, dyld3::Array&lt;void const*&gt; const&amp;) const (4 samples, 0.02%)</title><rect x="0.4887%" y="821" width="0.0230%" height="15" fill="rgb(236,23,11)" fg:x="85" fg:w="4"/><text x="0.7387%" y="831.50"></text></g><g><title>dyld4::setUpPageInLinkingRegions(dyld4::RuntimeState&amp;, dyld4::Loader const*, unsigned long, unsigned short, unsigned short, bool, dyld3::Array&lt;dyld4::PageInLinkingRange&gt; const&amp;, dyld3::Array&lt;void const*&gt; const&amp;) (4 samples, 0.02%)</title><rect x="0.4887%" y="805" width="0.0230%" height="15" fill="rgb(205,117,38)" fg:x="85" fg:w="4"/><text x="0.7387%" y="815.50"></text></g><g><title>dyld4::dyld_map_with_linking_np(mwl_region const*, unsigned int, mwl_info_hdr const*, unsigned int) (3 samples, 0.02%)</title><rect x="0.4945%" y="789" width="0.0172%" height="15" fill="rgb(237,72,25)" fg:x="86" fg:w="3"/><text x="0.7445%" y="799.50"></text></g><g><title>dyld4::fixupPage64(void*, mwl_info_hdr const*, dyld_chained_starts_in_segment const*, unsigned int, bool) (3 samples, 0.02%)</title><rect x="0.4945%" y="773" width="0.0172%" height="15" fill="rgb(244,70,9)" fg:x="86" fg:w="3"/><text x="0.7445%" y="783.50"></text></g><g><title>dyld3::MachOFile::read_uleb128(Diagnostics&amp;, unsigned char const*&amp;, unsigned char const*) (2 samples, 0.01%)</title><rect x="0.6324%" y="693" width="0.0115%" height="15" fill="rgb(217,125,39)" fg:x="110" fg:w="2"/><text x="0.8824%" y="703.50"></text></g><g><title>dyld3::MachOFile::trieWalk(Diagnostics&amp;, unsigned char const*, unsigned char const*, char const*) (21 samples, 0.12%)</title><rect x="0.5347%" y="709" width="0.1207%" height="15" fill="rgb(235,36,10)" fg:x="93" fg:w="21"/><text x="0.7847%" y="719.50"></text></g><g><title>dyld3::OverflowSafeArray&lt;unsigned int, 4294967295ull&gt;::verifySpace(unsigned long long) (2 samples, 0.01%)</title><rect x="0.6439%" y="693" width="0.0115%" height="15" fill="rgb(251,123,47)" fg:x="112" fg:w="2"/><text x="0.8939%" y="703.50"></text></g><g><title>dyld3::MachOFile::trieWalk(Diagnostics&amp;, unsigned char const*, unsigned char const*, char const*) (7 samples, 0.04%)</title><rect x="0.7014%" y="693" width="0.0402%" height="15" fill="rgb(221,13,13)" fg:x="122" fg:w="7"/><text x="0.9514%" y="703.50"></text></g><g><title>dyld4::Loader::dependent(dyld4::RuntimeState const&amp;, unsigned int, mach_o::LinkedDylibAttributes*) const (3 samples, 0.02%)</title><rect x="0.7474%" y="693" width="0.0172%" height="15" fill="rgb(238,131,9)" fg:x="130" fg:w="3"/><text x="0.9974%" y="703.50"></text></g><g><title>dyld4::PrebuiltLoader::dependent(dyld4::RuntimeState const&amp;, unsigned int, mach_o::LinkedDylibAttributes*) const (8 samples, 0.05%)</title><rect x="0.7704%" y="693" width="0.0460%" height="15" fill="rgb(211,50,8)" fg:x="134" fg:w="8"/><text x="1.0204%" y="703.50"></text></g><g><title>dyld4::Loader::LoaderRef::loader(dyld4::RuntimeState const&amp;) const (3 samples, 0.02%)</title><rect x="0.7992%" y="677" width="0.0172%" height="15" fill="rgb(245,182,24)" fg:x="139" fg:w="3"/><text x="1.0492%" y="687.50"></text></g><g><title>dyld4::Loader::hasExportedSymbol(Diagnostics&amp;, dyld4::RuntimeState&amp;, char const*, dyld4::Loader::ExportedSymbolMode, dyld4::Loader::ResolverMode, dyld4::Loader::ResolvedSymbol*, dyld3::Array&lt;dyld4::Loader const*&gt;*) const (29 samples, 0.17%)</title><rect x="0.6554%" y="709" width="0.1667%" height="15" fill="rgb(242,14,37)" fg:x="114" fg:w="29"/><text x="0.9054%" y="719.50"></text></g><g><title>dyld4::Loader::hasExportedSymbol(Diagnostics&amp;, dyld4::RuntimeState&amp;, char const*, dyld4::Loader::ExportedSymbolMode, dyld4::Loader::ResolverMode, dyld4::Loader::ResolvedSymbol*, dyld3::Array&lt;dyld4::Loader const*&gt;*) const (55 samples, 0.32%)</title><rect x="0.5232%" y="725" width="0.3162%" height="15" fill="rgb(246,228,12)" fg:x="91" fg:w="55"/><text x="0.7732%" y="735.50"></text></g><g><title>dyld3::MachOFile::hasLoadCommand(unsigned int) const (2 samples, 0.01%)</title><rect x="0.9717%" y="709" width="0.0115%" height="15" fill="rgb(213,55,15)" fg:x="169" fg:w="2"/><text x="1.2217%" y="719.50"></text></g><g><title>dyld3::MachOFile::forEachLoadCommand(Diagnostics&amp;, void (load_command const*, bool&amp;) block_pointer) const (2 samples, 0.01%)</title><rect x="0.9717%" y="693" width="0.0115%" height="15" fill="rgb(209,9,3)" fg:x="169" fg:w="2"/><text x="1.2217%" y="703.50"></text></g><g><title>dyld3::MachOFile::trieWalk(Diagnostics&amp;, unsigned char const*, unsigned char const*, char const*) (76 samples, 0.44%)</title><rect x="1.0234%" y="693" width="0.4370%" height="15" fill="rgb(230,59,30)" fg:x="178" fg:w="76"/><text x="1.2734%" y="703.50"></text></g><g><title>dyld3::MachOFile::read_uleb128(Diagnostics&amp;, unsigned char const*&amp;, unsigned char const*) (6 samples, 0.03%)</title><rect x="1.4259%" y="677" width="0.0345%" height="15" fill="rgb(209,121,21)" fg:x="248" fg:w="6"/><text x="1.6759%" y="687.50"></text></g><g><title>dyld4::JustInTimeLoader::getExportsTrie(unsigned long long&amp;, unsigned int&amp;) const (2 samples, 0.01%)</title><rect x="1.4661%" y="693" width="0.0115%" height="15" fill="rgb(220,109,13)" fg:x="255" fg:w="2"/><text x="1.7161%" y="703.50"></text></g><g><title>dyld4::Loader::hasExportedSymbol(Diagnostics&amp;, dyld4::RuntimeState&amp;, char const*, dyld4::Loader::ExportedSymbolMode, dyld4::Loader::ResolverMode, dyld4::Loader::ResolvedSymbol*, dyld3::Array&lt;dyld4::Loader const*&gt;*) const (89 samples, 0.51%)</title><rect x="0.9889%" y="709" width="0.5117%" height="15" fill="rgb(232,18,1)" fg:x="172" fg:w="89"/><text x="1.2389%" y="719.50"></text></g><g><title>dyld4::RuntimeState::cachedDylibLoadAddress(unsigned short) const (2 samples, 0.01%)</title><rect x="1.4891%" y="693" width="0.0115%" height="15" fill="rgb(215,41,42)" fg:x="259" fg:w="2"/><text x="1.7391%" y="703.50"></text></g><g><title>mach_o::Fixups::forEachBindTarget_ChainedFixups(Diagnostics&amp;, void (mach_o::Fixups::BindTargetInfo const&amp;, bool&amp;) block_pointer) const (176 samples, 1.01%)</title><rect x="0.5117%" y="805" width="1.0119%" height="15" fill="rgb(224,123,36)" fg:x="89" fg:w="176"/><text x="0.7617%" y="815.50"></text></g><g><title>dyld3::MachOFile::forEachChainedFixupTarget(Diagnostics&amp;, dyld_chained_fixups_header const*, linkedit_data_command const*, void (int, char const*, unsigned long long, bool, bool&amp;) block_pointer) (176 samples, 1.01%)</title><rect x="0.5117%" y="789" width="1.0119%" height="15" fill="rgb(240,125,3)" fg:x="89" fg:w="176"/><text x="0.7617%" y="799.50"></text></g><g><title>invocation function for block in mach_o::Fixups::forEachBindTarget_ChainedFixups(Diagnostics&amp;, void (mach_o::Fixups::BindTargetInfo const&amp;, bool&amp;) block_pointer) const (176 samples, 1.01%)</title><rect x="0.5117%" y="773" width="1.0119%" height="15" fill="rgb(205,98,50)" fg:x="89" fg:w="176"/><text x="0.7617%" y="783.50"></text></g><g><title>invocation function for block in dyld4::Loader::forEachBindTarget(Diagnostics&amp;, dyld4::RuntimeState&amp;, void (unsigned int, unsigned int, dyld4::Loader::ResolvedSymbol const&amp;) block_pointer, bool, void (dyld4::Loader::ResolvedSymbol const&amp;, bool&amp;) block_pointer, void (dyld4::Loader::ResolvedSymbol const&amp;, bool&amp;) block_pointer) const (176 samples, 1.01%)</title><rect x="0.5117%" y="757" width="1.0119%" height="15" fill="rgb(205,185,37)" fg:x="89" fg:w="176"/><text x="0.7617%" y="767.50"></text></g><g><title>dyld4::Loader::resolveSymbol(Diagnostics&amp;, dyld4::RuntimeState&amp;, int, char const*, bool, bool, void (unsigned int, unsigned int, dyld4::Loader::ResolvedSymbol const&amp;) block_pointer, bool) const (176 samples, 1.01%)</title><rect x="0.5117%" y="741" width="1.0119%" height="15" fill="rgb(238,207,15)" fg:x="89" fg:w="176"/><text x="0.7617%" y="751.50"></text></g><g><title>invocation function for block in dyld4::Loader::resolveSymbol(Diagnostics&amp;, dyld4::RuntimeState&amp;, int, char const*, bool, bool, void (unsigned int, unsigned int, dyld4::Loader::ResolvedSymbol const&amp;) block_pointer, bool) const (119 samples, 0.68%)</title><rect x="0.8394%" y="725" width="0.6842%" height="15" fill="rgb(213,199,42)" fg:x="146" fg:w="119"/><text x="1.0894%" y="735.50"></text></g><g><title>dyld4::Loader::hiddenFromFlat(bool) const (4 samples, 0.02%)</title><rect x="1.5006%" y="709" width="0.0230%" height="15" fill="rgb(235,201,11)" fg:x="261" fg:w="4"/><text x="1.7506%" y="719.50"></text></g><g><title>mach_o::Fixups::forEachBind_OpcodesLazy(Diagnostics&amp;, void (char const*, bool, bool, unsigned int, int, unsigned int, unsigned int, unsigned long long, unsigned char, char const*, bool, bool, unsigned long long, bool, bool&amp;) block_pointer) const (3 samples, 0.02%)</title><rect x="1.5236%" y="773" width="0.0172%" height="15" fill="rgb(207,46,11)" fg:x="265" fg:w="3"/><text x="1.7736%" y="783.50"></text></g><g><title>invocation function for block in mach_o::Fixups::forEachBindTarget_Opcodes(Diagnostics&amp;, bool, void (mach_o::Fixups::BindTargetInfo const&amp;, bool&amp;) block_pointer, void (mach_o::Fixups::BindTargetInfo const&amp;, bool&amp;) block_pointer) const (3 samples, 0.02%)</title><rect x="1.5236%" y="757" width="0.0172%" height="15" fill="rgb(241,35,35)" fg:x="265" fg:w="3"/><text x="1.7736%" y="767.50"></text></g><g><title>invocation function for block in dyld4::Loader::forEachBindTarget(Diagnostics&amp;, dyld4::RuntimeState&amp;, void (unsigned int, unsigned int, dyld4::Loader::ResolvedSymbol const&amp;) block_pointer, bool, void (dyld4::Loader::ResolvedSymbol const&amp;, bool&amp;) block_pointer, void (dyld4::Loader::ResolvedSymbol const&amp;, bool&amp;) block_pointer) const (3 samples, 0.02%)</title><rect x="1.5236%" y="741" width="0.0172%" height="15" fill="rgb(243,32,47)" fg:x="265" fg:w="3"/><text x="1.7736%" y="751.50"></text></g><g><title>dyld4::Loader::resolveSymbol(Diagnostics&amp;, dyld4::RuntimeState&amp;, int, char const*, bool, bool, void (unsigned int, unsigned int, dyld4::Loader::ResolvedSymbol const&amp;) block_pointer, bool) const (3 samples, 0.02%)</title><rect x="1.5236%" y="725" width="0.0172%" height="15" fill="rgb(247,202,23)" fg:x="265" fg:w="3"/><text x="1.7736%" y="735.50"></text></g><g><title>dyld4::Loader::hasExportedSymbol(Diagnostics&amp;, dyld4::RuntimeState&amp;, char const*, dyld4::Loader::ExportedSymbolMode, dyld4::Loader::ResolverMode, dyld4::Loader::ResolvedSymbol*, dyld3::Array&lt;dyld4::Loader const*&gt;*) const (3 samples, 0.02%)</title><rect x="1.5236%" y="709" width="0.0172%" height="15" fill="rgb(219,102,11)" fg:x="265" fg:w="3"/><text x="1.7736%" y="719.50"></text></g><g><title>dyld4::Loader::hasExportedSymbol(Diagnostics&amp;, dyld4::RuntimeState&amp;, char const*, dyld4::Loader::ExportedSymbolMode, dyld4::Loader::ResolverMode, dyld4::Loader::ResolvedSymbol*, dyld3::Array&lt;dyld4::Loader const*&gt;*) const (2 samples, 0.01%)</title><rect x="1.5294%" y="693" width="0.0115%" height="15" fill="rgb(243,110,44)" fg:x="266" fg:w="2"/><text x="1.7794%" y="703.50"></text></g><g><title>dyld4::JustInTimeLoader::applyFixups(Diagnostics&amp;, dyld4::RuntimeState&amp;, dyld4::DyldCacheDataConstLazyScopedWriter&amp;, bool, lsl::Vector&lt;std::__1::pair&lt;dyld4::Loader const*, char const*&gt;&gt;*) const (199 samples, 1.14%)</title><rect x="0.4025%" y="869" width="1.1441%" height="15" fill="rgb(222,74,54)" fg:x="70" fg:w="199"/><text x="0.6525%" y="879.50"></text></g><g><title>dyld4::Loader::forEachBindTarget(Diagnostics&amp;, dyld4::RuntimeState&amp;, void (unsigned int, unsigned int, dyld4::Loader::ResolvedSymbol const&amp;) block_pointer, bool, void (dyld4::Loader::ResolvedSymbol const&amp;, bool&amp;) block_pointer, void (dyld4::Loader::ResolvedSymbol const&amp;, bool&amp;) block_pointer) const (180 samples, 1.03%)</title><rect x="0.5117%" y="853" width="1.0349%" height="15" fill="rgb(216,99,12)" fg:x="89" fg:w="180"/><text x="0.7617%" y="863.50"></text></g><g><title>dyld3::MachOAnalyzer::withVMLayout(Diagnostics&amp;, void (mach_o::Layout const&amp;) block_pointer) const (180 samples, 1.03%)</title><rect x="0.5117%" y="837" width="1.0349%" height="15" fill="rgb(226,22,26)" fg:x="89" fg:w="180"/><text x="0.7617%" y="847.50"></text></g><g><title>invocation function for block in dyld4::Loader::forEachBindTarget(Diagnostics&amp;, dyld4::RuntimeState&amp;, void (unsigned int, unsigned int, dyld4::Loader::ResolvedSymbol const&amp;) block_pointer, bool, void (dyld4::Loader::ResolvedSymbol const&amp;, bool&amp;) block_pointer, void (dyld4::Loader::ResolvedSymbol const&amp;, bool&amp;) block_pointer) const (180 samples, 1.03%)</title><rect x="0.5117%" y="821" width="1.0349%" height="15" fill="rgb(217,163,10)" fg:x="89" fg:w="180"/><text x="0.7617%" y="831.50"></text></g><g><title>mach_o::Fixups::forEachBindTarget_Opcodes(Diagnostics&amp;, bool, void (mach_o::Fixups::BindTargetInfo const&amp;, bool&amp;) block_pointer, void (mach_o::Fixups::BindTargetInfo const&amp;, bool&amp;) block_pointer) const (4 samples, 0.02%)</title><rect x="1.5236%" y="805" width="0.0230%" height="15" fill="rgb(213,25,53)" fg:x="265" fg:w="4"/><text x="1.7736%" y="815.50"></text></g><g><title>mach_o::Fixups::forEachBindUnified_Opcodes(Diagnostics&amp;, bool, void (unsigned long long, unsigned int, mach_o::Fixups::BindTargetInfo const&amp;, bool&amp;) block_pointer, void (unsigned long long, unsigned int, mach_o::Fixups::BindTargetInfo const&amp;, bool&amp;) block_pointer) const (4 samples, 0.02%)</title><rect x="1.5236%" y="789" width="0.0230%" height="15" fill="rgb(252,105,26)" fg:x="265" fg:w="4"/><text x="1.7736%" y="799.50"></text></g><g><title>dyld4::JustInTimeLoader::loadDependents(Diagnostics&amp;, dyld4::RuntimeState&amp;, dyld4::Loader::LoadOptions const&amp;) (2 samples, 0.01%)</title><rect x="1.5523%" y="693" width="0.0115%" height="15" fill="rgb(220,39,43)" fg:x="270" fg:w="2"/><text x="1.8023%" y="703.50"></text></g><g><title>mach_o::Header::forEachLinkedDylib(void (char const*, mach_o::LinkedDylibAttributes, mach_o::Version32, mach_o::Version32, bool, bool&amp;) block_pointer) const (2 samples, 0.01%)</title><rect x="1.5523%" y="677" width="0.0115%" height="15" fill="rgb(229,68,48)" fg:x="270" fg:w="2"/><text x="1.8023%" y="687.50"></text></g><g><title>mach_o::Header::forEachLoadCommand(void (load_command const*, bool&amp;) block_pointer) const (2 samples, 0.01%)</title><rect x="1.5523%" y="661" width="0.0115%" height="15" fill="rgb(252,8,32)" fg:x="270" fg:w="2"/><text x="1.8023%" y="671.50"></text></g><g><title>invocation function for block in mach_o::Header::forEachLinkedDylib(void (char const*, mach_o::LinkedDylibAttributes, mach_o::Version32, mach_o::Version32, bool, bool&amp;) block_pointer) const (2 samples, 0.01%)</title><rect x="1.5523%" y="645" width="0.0115%" height="15" fill="rgb(223,20,43)" fg:x="270" fg:w="2"/><text x="1.8023%" y="655.50"></text></g><g><title>invocation function for block in dyld4::JustInTimeLoader::loadDependents(Diagnostics&amp;, dyld4::RuntimeState&amp;, dyld4::Loader::LoadOptions const&amp;) (2 samples, 0.01%)</title><rect x="1.5523%" y="629" width="0.0115%" height="15" fill="rgb(229,81,49)" fg:x="270" fg:w="2"/><text x="1.8023%" y="639.50"></text></g><g><title>dyld4::Loader::getLoader(Diagnostics&amp;, dyld4::RuntimeState&amp;, char const*, dyld4::Loader::LoadOptions const&amp;) (2 samples, 0.01%)</title><rect x="1.5523%" y="613" width="0.0115%" height="15" fill="rgb(236,28,36)" fg:x="270" fg:w="2"/><text x="1.8023%" y="623.50"></text></g><g><title>dyld4::JustInTimeLoader::loadDependents(Diagnostics&amp;, dyld4::RuntimeState&amp;, dyld4::Loader::LoadOptions const&amp;) (3 samples, 0.02%)</title><rect x="1.5523%" y="709" width="0.0172%" height="15" fill="rgb(249,185,26)" fg:x="270" fg:w="3"/><text x="1.8023%" y="719.50"></text></g><g><title>dyld4::Loader::forEachPath(Diagnostics&amp;, dyld4::RuntimeState&amp;, char const*, dyld4::Loader::LoadOptions const&amp;, void (char const*, dyld4::ProcessConfig::PathOverrides::Type, bool&amp;) block_pointer) (2 samples, 0.01%)</title><rect x="1.5811%" y="629" width="0.0115%" height="15" fill="rgb(249,174,33)" fg:x="275" fg:w="2"/><text x="1.8311%" y="639.50"></text></g><g><title>dyld4::ProcessConfig::PathOverrides::forEachPathVariant(char const*, mach_o::Platform, bool, bool, bool&amp;, void (char const*, dyld4::ProcessConfig::PathOverrides::Type, bool&amp;) block_pointer) const (2 samples, 0.01%)</title><rect x="1.5811%" y="613" width="0.0115%" height="15" fill="rgb(233,201,37)" fg:x="275" fg:w="2"/><text x="1.8311%" y="623.50"></text></g><g><title>dyld4::Loader::forEachResolvedAtPathVar(dyld4::RuntimeState&amp;, char const*, dyld4::Loader::LoadOptions const&amp;, dyld4::ProcessConfig::PathOverrides::Type, bool&amp;, void (char const*, dyld4::ProcessConfig::PathOverrides::Type, bool&amp;) block_pointer) (2 samples, 0.01%)</title><rect x="1.5811%" y="597" width="0.0115%" height="15" fill="rgb(221,78,26)" fg:x="275" fg:w="2"/><text x="1.8311%" y="607.50"></text></g><g><title>dyld4::JustInTimeLoader::loadDependents(Diagnostics&amp;, dyld4::RuntimeState&amp;, dyld4::Loader::LoadOptions const&amp;) (8 samples, 0.05%)</title><rect x="1.5523%" y="725" width="0.0460%" height="15" fill="rgb(250,127,30)" fg:x="270" fg:w="8"/><text x="1.8023%" y="735.50"></text></g><g><title>mach_o::Header::forEachLinkedDylib(void (char const*, mach_o::LinkedDylibAttributes, mach_o::Version32, mach_o::Version32, bool, bool&amp;) block_pointer) const (5 samples, 0.03%)</title><rect x="1.5696%" y="709" width="0.0287%" height="15" fill="rgb(230,49,44)" fg:x="273" fg:w="5"/><text x="1.8196%" y="719.50"></text></g><g><title>mach_o::Header::forEachLoadCommand(void (load_command const*, bool&amp;) block_pointer) const (5 samples, 0.03%)</title><rect x="1.5696%" y="693" width="0.0287%" height="15" fill="rgb(229,67,23)" fg:x="273" fg:w="5"/><text x="1.8196%" y="703.50"></text></g><g><title>invocation function for block in mach_o::Header::forEachLinkedDylib(void (char const*, mach_o::LinkedDylibAttributes, mach_o::Version32, mach_o::Version32, bool, bool&amp;) block_pointer) const (5 samples, 0.03%)</title><rect x="1.5696%" y="677" width="0.0287%" height="15" fill="rgb(249,83,47)" fg:x="273" fg:w="5"/><text x="1.8196%" y="687.50"></text></g><g><title>invocation function for block in dyld4::JustInTimeLoader::loadDependents(Diagnostics&amp;, dyld4::RuntimeState&amp;, dyld4::Loader::LoadOptions const&amp;) (5 samples, 0.03%)</title><rect x="1.5696%" y="661" width="0.0287%" height="15" fill="rgb(215,43,3)" fg:x="273" fg:w="5"/><text x="1.8196%" y="671.50"></text></g><g><title>dyld4::Loader::getLoader(Diagnostics&amp;, dyld4::RuntimeState&amp;, char const*, dyld4::Loader::LoadOptions const&amp;) (5 samples, 0.03%)</title><rect x="1.5696%" y="645" width="0.0287%" height="15" fill="rgb(238,154,13)" fg:x="273" fg:w="5"/><text x="1.8196%" y="655.50"></text></g><g><title>dyld4::JustInTimeLoader::matchesPath(dyld4::RuntimeState const&amp;, char const*) const (2 samples, 0.01%)</title><rect x="1.6041%" y="533" width="0.0115%" height="15" fill="rgb(219,56,2)" fg:x="279" fg:w="2"/><text x="1.8541%" y="543.50"></text></g><g><title>dyld4::Loader::forEachPath(Diagnostics&amp;, dyld4::RuntimeState&amp;, char const*, dyld4::Loader::LoadOptions const&amp;, void (char const*, dyld4::ProcessConfig::PathOverrides::Type, bool&amp;) block_pointer) (3 samples, 0.02%)</title><rect x="1.6041%" y="645" width="0.0172%" height="15" fill="rgb(233,0,4)" fg:x="279" fg:w="3"/><text x="1.8541%" y="655.50"></text></g><g><title>dyld4::ProcessConfig::PathOverrides::forEachPathVariant(char const*, mach_o::Platform, bool, bool, bool&amp;, void (char const*, dyld4::ProcessConfig::PathOverrides::Type, bool&amp;) block_pointer) const (3 samples, 0.02%)</title><rect x="1.6041%" y="629" width="0.0172%" height="15" fill="rgb(235,30,7)" fg:x="279" fg:w="3"/><text x="1.8541%" y="639.50"></text></g><g><title>dyld4::Loader::forEachResolvedAtPathVar(dyld4::RuntimeState&amp;, char const*, dyld4::Loader::LoadOptions const&amp;, dyld4::ProcessConfig::PathOverrides::Type, bool&amp;, void (char const*, dyld4::ProcessConfig::PathOverrides::Type, bool&amp;) block_pointer) (3 samples, 0.02%)</title><rect x="1.6041%" y="613" width="0.0172%" height="15" fill="rgb(250,79,13)" fg:x="279" fg:w="3"/><text x="1.8541%" y="623.50"></text></g><g><title>mach_o::Header::forEachRPath(void (char const*, bool&amp;) block_pointer) const (3 samples, 0.02%)</title><rect x="1.6041%" y="597" width="0.0172%" height="15" fill="rgb(211,146,34)" fg:x="279" fg:w="3"/><text x="1.8541%" y="607.50"></text></g><g><title>mach_o::Header::forEachLoadCommand(void (load_command const*, bool&amp;) block_pointer) const (3 samples, 0.02%)</title><rect x="1.6041%" y="581" width="0.0172%" height="15" fill="rgb(228,22,38)" fg:x="279" fg:w="3"/><text x="1.8541%" y="591.50"></text></g><g><title>invocation function for block in dyld4::Loader::forEachResolvedAtPathVar(dyld4::RuntimeState&amp;, char const*, dyld4::Loader::LoadOptions const&amp;, dyld4::ProcessConfig::PathOverrides::Type, bool&amp;, void (char const*, dyld4::ProcessConfig::PathOverrides::Type, bool&amp;) block_pointer) (3 samples, 0.02%)</title><rect x="1.6041%" y="565" width="0.0172%" height="15" fill="rgb(235,168,5)" fg:x="279" fg:w="3"/><text x="1.8541%" y="575.50"></text></g><g><title>invocation function for block in dyld4::Loader::getLoader(Diagnostics&amp;, dyld4::RuntimeState&amp;, char const*, dyld4::Loader::LoadOptions const&amp;) (3 samples, 0.02%)</title><rect x="1.6041%" y="549" width="0.0172%" height="15" fill="rgb(221,155,16)" fg:x="279" fg:w="3"/><text x="1.8541%" y="559.50"></text></g><g><title>dyld4::JustInTimeLoader::loadDependents(Diagnostics&amp;, dyld4::RuntimeState&amp;, dyld4::Loader::LoadOptions const&amp;) (13 samples, 0.07%)</title><rect x="1.5523%" y="741" width="0.0747%" height="15" fill="rgb(215,215,53)" fg:x="270" fg:w="13"/><text x="1.8023%" y="751.50"></text></g><g><title>mach_o::Header::forEachLinkedDylib(void (char const*, mach_o::LinkedDylibAttributes, mach_o::Version32, mach_o::Version32, bool, bool&amp;) block_pointer) const (5 samples, 0.03%)</title><rect x="1.5983%" y="725" width="0.0287%" height="15" fill="rgb(223,4,10)" fg:x="278" fg:w="5"/><text x="1.8483%" y="735.50"></text></g><g><title>mach_o::Header::forEachLoadCommand(void (load_command const*, bool&amp;) block_pointer) const (5 samples, 0.03%)</title><rect x="1.5983%" y="709" width="0.0287%" height="15" fill="rgb(234,103,6)" fg:x="278" fg:w="5"/><text x="1.8483%" y="719.50"></text></g><g><title>invocation function for block in mach_o::Header::forEachLinkedDylib(void (char const*, mach_o::LinkedDylibAttributes, mach_o::Version32, mach_o::Version32, bool, bool&amp;) block_pointer) const (5 samples, 0.03%)</title><rect x="1.5983%" y="693" width="0.0287%" height="15" fill="rgb(227,97,0)" fg:x="278" fg:w="5"/><text x="1.8483%" y="703.50"></text></g><g><title>invocation function for block in dyld4::JustInTimeLoader::loadDependents(Diagnostics&amp;, dyld4::RuntimeState&amp;, dyld4::Loader::LoadOptions const&amp;) (5 samples, 0.03%)</title><rect x="1.5983%" y="677" width="0.0287%" height="15" fill="rgb(234,150,53)" fg:x="278" fg:w="5"/><text x="1.8483%" y="687.50"></text></g><g><title>dyld4::Loader::getLoader(Diagnostics&amp;, dyld4::RuntimeState&amp;, char const*, dyld4::Loader::LoadOptions const&amp;) (5 samples, 0.03%)</title><rect x="1.5983%" y="661" width="0.0287%" height="15" fill="rgb(228,201,54)" fg:x="278" fg:w="5"/><text x="1.8483%" y="671.50"></text></g><g><title>dyld4::PrebuiltLoader::matchesPath(dyld4::RuntimeState const&amp;, char const*) const (2 samples, 0.01%)</title><rect x="1.6386%" y="549" width="0.0115%" height="15" fill="rgb(222,22,37)" fg:x="285" fg:w="2"/><text x="1.8886%" y="559.50"></text></g><g><title>&lt;deduplicated_symbol&gt; (2 samples, 0.01%)</title><rect x="1.6386%" y="533" width="0.0115%" height="15" fill="rgb(237,53,32)" fg:x="285" fg:w="2"/><text x="1.8886%" y="543.50"></text></g><g><title>dyld4::Loader::forEachPath(Diagnostics&amp;, dyld4::RuntimeState&amp;, char const*, dyld4::Loader::LoadOptions const&amp;, void (char const*, dyld4::ProcessConfig::PathOverrides::Type, bool&amp;) block_pointer) (5 samples, 0.03%)</title><rect x="1.6271%" y="661" width="0.0287%" height="15" fill="rgb(233,25,53)" fg:x="283" fg:w="5"/><text x="1.8771%" y="671.50"></text></g><g><title>dyld4::ProcessConfig::PathOverrides::forEachPathVariant(char const*, mach_o::Platform, bool, bool, bool&amp;, void (char const*, dyld4::ProcessConfig::PathOverrides::Type, bool&amp;) block_pointer) const (5 samples, 0.03%)</title><rect x="1.6271%" y="645" width="0.0287%" height="15" fill="rgb(210,40,34)" fg:x="283" fg:w="5"/><text x="1.8771%" y="655.50"></text></g><g><title>dyld4::Loader::forEachResolvedAtPathVar(dyld4::RuntimeState&amp;, char const*, dyld4::Loader::LoadOptions const&amp;, dyld4::ProcessConfig::PathOverrides::Type, bool&amp;, void (char const*, dyld4::ProcessConfig::PathOverrides::Type, bool&amp;) block_pointer) (5 samples, 0.03%)</title><rect x="1.6271%" y="629" width="0.0287%" height="15" fill="rgb(241,220,44)" fg:x="283" fg:w="5"/><text x="1.8771%" y="639.50"></text></g><g><title>mach_o::Header::forEachRPath(void (char const*, bool&amp;) block_pointer) const (5 samples, 0.03%)</title><rect x="1.6271%" y="613" width="0.0287%" height="15" fill="rgb(235,28,35)" fg:x="283" fg:w="5"/><text x="1.8771%" y="623.50"></text></g><g><title>mach_o::Header::forEachLoadCommand(void (load_command const*, bool&amp;) block_pointer) const (5 samples, 0.03%)</title><rect x="1.6271%" y="597" width="0.0287%" height="15" fill="rgb(210,56,17)" fg:x="283" fg:w="5"/><text x="1.8771%" y="607.50"></text></g><g><title>invocation function for block in dyld4::Loader::forEachResolvedAtPathVar(dyld4::RuntimeState&amp;, char const*, dyld4::Loader::LoadOptions const&amp;, dyld4::ProcessConfig::PathOverrides::Type, bool&amp;, void (char const*, dyld4::ProcessConfig::PathOverrides::Type, bool&amp;) block_pointer) (5 samples, 0.03%)</title><rect x="1.6271%" y="581" width="0.0287%" height="15" fill="rgb(224,130,29)" fg:x="283" fg:w="5"/><text x="1.8771%" y="591.50"></text></g><g><title>invocation function for block in dyld4::Loader::getLoader(Diagnostics&amp;, dyld4::RuntimeState&amp;, char const*, dyld4::Loader::LoadOptions const&amp;) (5 samples, 0.03%)</title><rect x="1.6271%" y="565" width="0.0287%" height="15" fill="rgb(235,212,8)" fg:x="283" fg:w="5"/><text x="1.8771%" y="575.50"></text></g><g><title>dyld4::JustInTimeLoader::loadDependents(Diagnostics&amp;, dyld4::RuntimeState&amp;, dyld4::Loader::LoadOptions const&amp;) (21 samples, 0.12%)</title><rect x="1.5523%" y="757" width="0.1207%" height="15" fill="rgb(223,33,50)" fg:x="270" fg:w="21"/><text x="1.8023%" y="767.50"></text></g><g><title>mach_o::Header::forEachLinkedDylib(void (char const*, mach_o::LinkedDylibAttributes, mach_o::Version32, mach_o::Version32, bool, bool&amp;) block_pointer) const (8 samples, 0.05%)</title><rect x="1.6271%" y="741" width="0.0460%" height="15" fill="rgb(219,149,13)" fg:x="283" fg:w="8"/><text x="1.8771%" y="751.50"></text></g><g><title>mach_o::Header::forEachLoadCommand(void (load_command const*, bool&amp;) block_pointer) const (8 samples, 0.05%)</title><rect x="1.6271%" y="725" width="0.0460%" height="15" fill="rgb(250,156,29)" fg:x="283" fg:w="8"/><text x="1.8771%" y="735.50"></text></g><g><title>invocation function for block in mach_o::Header::forEachLinkedDylib(void (char const*, mach_o::LinkedDylibAttributes, mach_o::Version32, mach_o::Version32, bool, bool&amp;) block_pointer) const (8 samples, 0.05%)</title><rect x="1.6271%" y="709" width="0.0460%" height="15" fill="rgb(216,193,19)" fg:x="283" fg:w="8"/><text x="1.8771%" y="719.50"></text></g><g><title>invocation function for block in dyld4::JustInTimeLoader::loadDependents(Diagnostics&amp;, dyld4::RuntimeState&amp;, dyld4::Loader::LoadOptions const&amp;) (8 samples, 0.05%)</title><rect x="1.6271%" y="693" width="0.0460%" height="15" fill="rgb(216,135,14)" fg:x="283" fg:w="8"/><text x="1.8771%" y="703.50"></text></g><g><title>dyld4::Loader::getLoader(Diagnostics&amp;, dyld4::RuntimeState&amp;, char const*, dyld4::Loader::LoadOptions const&amp;) (8 samples, 0.05%)</title><rect x="1.6271%" y="677" width="0.0460%" height="15" fill="rgb(241,47,5)" fg:x="283" fg:w="8"/><text x="1.8771%" y="687.50"></text></g><g><title>dyld4::ProcessConfig::canonicalDylibPathInCache(char const*) const (2 samples, 0.01%)</title><rect x="1.6616%" y="661" width="0.0115%" height="15" fill="rgb(233,42,35)" fg:x="289" fg:w="2"/><text x="1.9116%" y="671.50"></text></g><g><title>dyld4::SyscallDelegate::realpath(char const*, char*) const (2 samples, 0.01%)</title><rect x="1.6616%" y="645" width="0.0115%" height="15" fill="rgb(231,13,6)" fg:x="289" fg:w="2"/><text x="1.9116%" y="655.50"></text></g><g><title>dyld3::open(char const*, int, int) (2 samples, 0.01%)</title><rect x="1.6616%" y="629" width="0.0115%" height="15" fill="rgb(207,181,40)" fg:x="289" fg:w="2"/><text x="1.9116%" y="639.50"></text></g><g><title>open_with_subsystem (2 samples, 0.01%)</title><rect x="1.6616%" y="613" width="0.0115%" height="15" fill="rgb(254,173,49)" fg:x="289" fg:w="2"/><text x="1.9116%" y="623.50"></text></g><g><title>open (2 samples, 0.01%)</title><rect x="1.6616%" y="597" width="0.0115%" height="15" fill="rgb(221,1,38)" fg:x="289" fg:w="2"/><text x="1.9116%" y="607.50"></text></g><g><title>__open (2 samples, 0.01%)</title><rect x="1.6616%" y="581" width="0.0115%" height="15" fill="rgb(206,124,46)" fg:x="289" fg:w="2"/><text x="1.9116%" y="591.50"></text></g><g><title>&lt;deduplicated_symbol&gt; (2 samples, 0.01%)</title><rect x="1.6731%" y="661" width="0.0115%" height="15" fill="rgb(249,21,11)" fg:x="291" fg:w="2"/><text x="1.9231%" y="671.50"></text></g><g><title>dyld4::JustInTimeLoader::matchesPath(dyld4::RuntimeState const&amp;, char const*) const (3 samples, 0.02%)</title><rect x="1.6731%" y="677" width="0.0172%" height="15" fill="rgb(222,201,40)" fg:x="291" fg:w="3"/><text x="1.9231%" y="687.50"></text></g><g><title>dyld4::JustInTimeLoader::matchesPath(dyld4::RuntimeState const&amp;, char const*) const (3 samples, 0.02%)</title><rect x="1.6961%" y="565" width="0.0172%" height="15" fill="rgb(235,61,29)" fg:x="295" fg:w="3"/><text x="1.9461%" y="575.50"></text></g><g><title>mach_o::Header::installName() const (2 samples, 0.01%)</title><rect x="1.7018%" y="549" width="0.0115%" height="15" fill="rgb(219,207,3)" fg:x="296" fg:w="2"/><text x="1.9518%" y="559.50"></text></g><g><title>dyld4::Loader::forEachPath(Diagnostics&amp;, dyld4::RuntimeState&amp;, char const*, dyld4::Loader::LoadOptions const&amp;, void (char const*, dyld4::ProcessConfig::PathOverrides::Type, bool&amp;) block_pointer) (6 samples, 0.03%)</title><rect x="1.6903%" y="677" width="0.0345%" height="15" fill="rgb(222,56,46)" fg:x="294" fg:w="6"/><text x="1.9403%" y="687.50"></text></g><g><title>dyld4::ProcessConfig::PathOverrides::forEachPathVariant(char const*, mach_o::Platform, bool, bool, bool&amp;, void (char const*, dyld4::ProcessConfig::PathOverrides::Type, bool&amp;) block_pointer) const (6 samples, 0.03%)</title><rect x="1.6903%" y="661" width="0.0345%" height="15" fill="rgb(239,76,54)" fg:x="294" fg:w="6"/><text x="1.9403%" y="671.50"></text></g><g><title>dyld4::Loader::forEachResolvedAtPathVar(dyld4::RuntimeState&amp;, char const*, dyld4::Loader::LoadOptions const&amp;, dyld4::ProcessConfig::PathOverrides::Type, bool&amp;, void (char const*, dyld4::ProcessConfig::PathOverrides::Type, bool&amp;) block_pointer) (6 samples, 0.03%)</title><rect x="1.6903%" y="645" width="0.0345%" height="15" fill="rgb(231,124,27)" fg:x="294" fg:w="6"/><text x="1.9403%" y="655.50"></text></g><g><title>mach_o::Header::forEachRPath(void (char const*, bool&amp;) block_pointer) const (6 samples, 0.03%)</title><rect x="1.6903%" y="629" width="0.0345%" height="15" fill="rgb(249,195,6)" fg:x="294" fg:w="6"/><text x="1.9403%" y="639.50"></text></g><g><title>mach_o::Header::forEachLoadCommand(void (load_command const*, bool&amp;) block_pointer) const (6 samples, 0.03%)</title><rect x="1.6903%" y="613" width="0.0345%" height="15" fill="rgb(237,174,47)" fg:x="294" fg:w="6"/><text x="1.9403%" y="623.50"></text></g><g><title>invocation function for block in dyld4::Loader::forEachResolvedAtPathVar(dyld4::RuntimeState&amp;, char const*, dyld4::Loader::LoadOptions const&amp;, dyld4::ProcessConfig::PathOverrides::Type, bool&amp;, void (char const*, dyld4::ProcessConfig::PathOverrides::Type, bool&amp;) block_pointer) (6 samples, 0.03%)</title><rect x="1.6903%" y="597" width="0.0345%" height="15" fill="rgb(206,201,31)" fg:x="294" fg:w="6"/><text x="1.9403%" y="607.50"></text></g><g><title>invocation function for block in dyld4::Loader::getLoader(Diagnostics&amp;, dyld4::RuntimeState&amp;, char const*, dyld4::Loader::LoadOptions const&amp;) (6 samples, 0.03%)</title><rect x="1.6903%" y="581" width="0.0345%" height="15" fill="rgb(231,57,52)" fg:x="294" fg:w="6"/><text x="1.9403%" y="591.50"></text></g><g><title>dyld4::JustInTimeLoader::loadDependents(Diagnostics&amp;, dyld4::RuntimeState&amp;, dyld4::Loader::LoadOptions const&amp;) (31 samples, 0.18%)</title><rect x="1.5523%" y="773" width="0.1782%" height="15" fill="rgb(248,177,22)" fg:x="270" fg:w="31"/><text x="1.8023%" y="783.50"></text></g><g><title>mach_o::Header::forEachLinkedDylib(void (char const*, mach_o::LinkedDylibAttributes, mach_o::Version32, mach_o::Version32, bool, bool&amp;) block_pointer) const (10 samples, 0.06%)</title><rect x="1.6731%" y="757" width="0.0575%" height="15" fill="rgb(215,211,37)" fg:x="291" fg:w="10"/><text x="1.9231%" y="767.50"></text></g><g><title>mach_o::Header::forEachLoadCommand(void (load_command const*, bool&amp;) block_pointer) const (10 samples, 0.06%)</title><rect x="1.6731%" y="741" width="0.0575%" height="15" fill="rgb(241,128,51)" fg:x="291" fg:w="10"/><text x="1.9231%" y="751.50"></text></g><g><title>invocation function for block in mach_o::Header::forEachLinkedDylib(void (char const*, mach_o::LinkedDylibAttributes, mach_o::Version32, mach_o::Version32, bool, bool&amp;) block_pointer) const (10 samples, 0.06%)</title><rect x="1.6731%" y="725" width="0.0575%" height="15" fill="rgb(227,165,31)" fg:x="291" fg:w="10"/><text x="1.9231%" y="735.50"></text></g><g><title>invocation function for block in dyld4::JustInTimeLoader::loadDependents(Diagnostics&amp;, dyld4::RuntimeState&amp;, dyld4::Loader::LoadOptions const&amp;) (10 samples, 0.06%)</title><rect x="1.6731%" y="709" width="0.0575%" height="15" fill="rgb(228,167,24)" fg:x="291" fg:w="10"/><text x="1.9231%" y="719.50"></text></g><g><title>dyld4::Loader::getLoader(Diagnostics&amp;, dyld4::RuntimeState&amp;, char const*, dyld4::Loader::LoadOptions const&amp;) (10 samples, 0.06%)</title><rect x="1.6731%" y="693" width="0.0575%" height="15" fill="rgb(228,143,12)" fg:x="291" fg:w="10"/><text x="1.9231%" y="703.50"></text></g><g><title>dyld4::JustInTimeLoader::matchesPath(dyld4::RuntimeState const&amp;, char const*) const (3 samples, 0.02%)</title><rect x="1.7363%" y="693" width="0.0172%" height="15" fill="rgb(249,149,8)" fg:x="302" fg:w="3"/><text x="1.9863%" y="703.50"></text></g><g><title>mach_o::Header::installName() const (2 samples, 0.01%)</title><rect x="1.7421%" y="677" width="0.0115%" height="15" fill="rgb(243,35,44)" fg:x="303" fg:w="2"/><text x="1.9921%" y="687.50"></text></g><g><title>mach_o::Header::getDylibInstallName(char const**, mach_o::Version32*, mach_o::Version32*) const (2 samples, 0.01%)</title><rect x="1.7421%" y="661" width="0.0115%" height="15" fill="rgb(246,89,9)" fg:x="303" fg:w="2"/><text x="1.9921%" y="671.50"></text></g><g><title>mach_o::Header::forEachLoadCommand(void (load_command const*, bool&amp;) block_pointer) const (2 samples, 0.01%)</title><rect x="1.7421%" y="645" width="0.0115%" height="15" fill="rgb(233,213,13)" fg:x="303" fg:w="2"/><text x="1.9921%" y="655.50"></text></g><g><title>invocation function for block in mach_o::Header::getDylibInstallName(char const**, mach_o::Version32*, mach_o::Version32*) const (2 samples, 0.01%)</title><rect x="1.7421%" y="629" width="0.0115%" height="15" fill="rgb(233,141,41)" fg:x="303" fg:w="2"/><text x="1.9921%" y="639.50"></text></g><g><title>invocation function for block in dyld4::Loader::getLoader(Diagnostics&amp;, dyld4::RuntimeState&amp;, char const*, dyld4::Loader::LoadOptions const&amp;) (2 samples, 0.01%)</title><rect x="1.7536%" y="645" width="0.0115%" height="15" fill="rgb(239,167,4)" fg:x="305" fg:w="2"/><text x="2.0036%" y="655.50"></text></g><g><title>dyld4::Loader::makeDiskLoader(Diagnostics&amp;, dyld4::RuntimeState&amp;, char const*, dyld4::Loader::LoadOptions const&amp;, bool, unsigned int, mach_o::Layout const*) (2 samples, 0.01%)</title><rect x="1.7536%" y="629" width="0.0115%" height="15" fill="rgb(209,217,16)" fg:x="305" fg:w="2"/><text x="2.0036%" y="639.50"></text></g><g><title>dyld4::JustInTimeLoader::makeJustInTimeLoaderDisk(Diagnostics&amp;, dyld4::RuntimeState&amp;, char const*, dyld4::Loader::LoadOptions const&amp;, bool, unsigned int, mach_o::Layout const*) (2 samples, 0.01%)</title><rect x="1.7536%" y="613" width="0.0115%" height="15" fill="rgb(219,88,35)" fg:x="305" fg:w="2"/><text x="2.0036%" y="623.50"></text></g><g><title>dyld4::JustInTimeLoader::matchesPath(dyld4::RuntimeState const&amp;, char const*) const (4 samples, 0.02%)</title><rect x="1.7651%" y="581" width="0.0230%" height="15" fill="rgb(220,193,23)" fg:x="307" fg:w="4"/><text x="2.0151%" y="591.50"></text></g><g><title>mach_o::Header::installName() const (3 samples, 0.02%)</title><rect x="1.7708%" y="565" width="0.0172%" height="15" fill="rgb(230,90,52)" fg:x="308" fg:w="3"/><text x="2.0208%" y="575.50"></text></g><g><title>mach_o::Header::getDylibInstallName(char const**, mach_o::Version32*, mach_o::Version32*) const (2 samples, 0.01%)</title><rect x="1.7766%" y="549" width="0.0115%" height="15" fill="rgb(252,106,19)" fg:x="309" fg:w="2"/><text x="2.0266%" y="559.50"></text></g><g><title>mach_o::Header::forEachLoadCommand(void (load_command const*, bool&amp;) block_pointer) const (2 samples, 0.01%)</title><rect x="1.7766%" y="533" width="0.0115%" height="15" fill="rgb(206,74,20)" fg:x="309" fg:w="2"/><text x="2.0266%" y="543.50"></text></g><g><title>dyld4::Loader::matchesPath(dyld4::RuntimeState const&amp;, char const*) const (2 samples, 0.01%)</title><rect x="1.7938%" y="581" width="0.0115%" height="15" fill="rgb(230,138,44)" fg:x="312" fg:w="2"/><text x="2.0438%" y="591.50"></text></g><g><title>dyld4::Loader::forEachPath(Diagnostics&amp;, dyld4::RuntimeState&amp;, char const*, dyld4::Loader::LoadOptions const&amp;, void (char const*, dyld4::ProcessConfig::PathOverrides::Type, bool&amp;) block_pointer) (10 samples, 0.06%)</title><rect x="1.7536%" y="693" width="0.0575%" height="15" fill="rgb(235,182,43)" fg:x="305" fg:w="10"/><text x="2.0036%" y="703.50"></text></g><g><title>dyld4::ProcessConfig::PathOverrides::forEachPathVariant(char const*, mach_o::Platform, bool, bool, bool&amp;, void (char const*, dyld4::ProcessConfig::PathOverrides::Type, bool&amp;) block_pointer) const (10 samples, 0.06%)</title><rect x="1.7536%" y="677" width="0.0575%" height="15" fill="rgb(242,16,51)" fg:x="305" fg:w="10"/><text x="2.0036%" y="687.50"></text></g><g><title>dyld4::Loader::forEachResolvedAtPathVar(dyld4::RuntimeState&amp;, char const*, dyld4::Loader::LoadOptions const&amp;, dyld4::ProcessConfig::PathOverrides::Type, bool&amp;, void (char const*, dyld4::ProcessConfig::PathOverrides::Type, bool&amp;) block_pointer) (10 samples, 0.06%)</title><rect x="1.7536%" y="661" width="0.0575%" height="15" fill="rgb(248,9,4)" fg:x="305" fg:w="10"/><text x="2.0036%" y="671.50"></text></g><g><title>mach_o::Header::forEachRPath(void (char const*, bool&amp;) block_pointer) const (8 samples, 0.05%)</title><rect x="1.7651%" y="645" width="0.0460%" height="15" fill="rgb(210,31,22)" fg:x="307" fg:w="8"/><text x="2.0151%" y="655.50"></text></g><g><title>mach_o::Header::forEachLoadCommand(void (load_command const*, bool&amp;) block_pointer) const (8 samples, 0.05%)</title><rect x="1.7651%" y="629" width="0.0460%" height="15" fill="rgb(239,54,39)" fg:x="307" fg:w="8"/><text x="2.0151%" y="639.50"></text></g><g><title>invocation function for block in dyld4::Loader::forEachResolvedAtPathVar(dyld4::RuntimeState&amp;, char const*, dyld4::Loader::LoadOptions const&amp;, dyld4::ProcessConfig::PathOverrides::Type, bool&amp;, void (char const*, dyld4::ProcessConfig::PathOverrides::Type, bool&amp;) block_pointer) (8 samples, 0.05%)</title><rect x="1.7651%" y="613" width="0.0460%" height="15" fill="rgb(230,99,41)" fg:x="307" fg:w="8"/><text x="2.0151%" y="623.50"></text></g><g><title>invocation function for block in dyld4::Loader::getLoader(Diagnostics&amp;, dyld4::RuntimeState&amp;, char const*, dyld4::Loader::LoadOptions const&amp;) (8 samples, 0.05%)</title><rect x="1.7651%" y="597" width="0.0460%" height="15" fill="rgb(253,106,12)" fg:x="307" fg:w="8"/><text x="2.0151%" y="607.50"></text></g><g><title>dyld4::JustInTimeLoader::loadDependents(Diagnostics&amp;, dyld4::RuntimeState&amp;, dyld4::Loader::LoadOptions const&amp;) (48 samples, 0.28%)</title><rect x="1.5523%" y="789" width="0.2760%" height="15" fill="rgb(213,46,41)" fg:x="270" fg:w="48"/><text x="1.8023%" y="799.50"></text></g><g><title>mach_o::Header::forEachLinkedDylib(void (char const*, mach_o::LinkedDylibAttributes, mach_o::Version32, mach_o::Version32, bool, bool&amp;) block_pointer) const (17 samples, 0.10%)</title><rect x="1.7306%" y="773" width="0.0977%" height="15" fill="rgb(215,133,35)" fg:x="301" fg:w="17"/><text x="1.9806%" y="783.50"></text></g><g><title>mach_o::Header::forEachLoadCommand(void (load_command const*, bool&amp;) block_pointer) const (17 samples, 0.10%)</title><rect x="1.7306%" y="757" width="0.0977%" height="15" fill="rgb(213,28,5)" fg:x="301" fg:w="17"/><text x="1.9806%" y="767.50"></text></g><g><title>invocation function for block in mach_o::Header::forEachLinkedDylib(void (char const*, mach_o::LinkedDylibAttributes, mach_o::Version32, mach_o::Version32, bool, bool&amp;) block_pointer) const (17 samples, 0.10%)</title><rect x="1.7306%" y="741" width="0.0977%" height="15" fill="rgb(215,77,49)" fg:x="301" fg:w="17"/><text x="1.9806%" y="751.50"></text></g><g><title>invocation function for block in dyld4::JustInTimeLoader::loadDependents(Diagnostics&amp;, dyld4::RuntimeState&amp;, dyld4::Loader::LoadOptions const&amp;) (17 samples, 0.10%)</title><rect x="1.7306%" y="725" width="0.0977%" height="15" fill="rgb(248,100,22)" fg:x="301" fg:w="17"/><text x="1.9806%" y="735.50"></text></g><g><title>dyld4::Loader::getLoader(Diagnostics&amp;, dyld4::RuntimeState&amp;, char const*, dyld4::Loader::LoadOptions const&amp;) (17 samples, 0.10%)</title><rect x="1.7306%" y="709" width="0.0977%" height="15" fill="rgb(208,67,9)" fg:x="301" fg:w="17"/><text x="1.9806%" y="719.50"></text></g><g><title>dyld4::PrebuiltLoader::matchesPath(dyld4::RuntimeState const&amp;, char const*) const (3 samples, 0.02%)</title><rect x="1.8111%" y="693" width="0.0172%" height="15" fill="rgb(219,133,21)" fg:x="315" fg:w="3"/><text x="2.0611%" y="703.50"></text></g><g><title>&lt;deduplicated_symbol&gt; (3 samples, 0.02%)</title><rect x="1.8111%" y="677" width="0.0172%" height="15" fill="rgb(246,46,29)" fg:x="315" fg:w="3"/><text x="2.0611%" y="687.50"></text></g><g><title>dyld4::JustInTimeLoader::matchesPath(dyld4::RuntimeState const&amp;, char const*) const (2 samples, 0.01%)</title><rect x="1.8341%" y="709" width="0.0115%" height="15" fill="rgb(246,185,52)" fg:x="319" fg:w="2"/><text x="2.0841%" y="719.50"></text></g><g><title>dyld4::JustInTimeLoader::withRegions(dyld3::MachOFile const*, void (dyld3::Array&lt;dyld4::Loader::Region&gt; const&amp;) block_pointer) (3 samples, 0.02%)</title><rect x="1.8571%" y="613" width="0.0172%" height="15" fill="rgb(252,136,11)" fg:x="323" fg:w="3"/><text x="2.1071%" y="623.50"></text></g><g><title>invocation function for block in dyld4::JustInTimeLoader::makeJustInTimeLoaderDisk(Diagnostics&amp;, dyld4::RuntimeState&amp;, char const*, dyld4::Loader::LoadOptions const&amp;, bool, unsigned int, mach_o::Layout const*) (3 samples, 0.02%)</title><rect x="1.8571%" y="597" width="0.0172%" height="15" fill="rgb(219,138,53)" fg:x="323" fg:w="3"/><text x="2.1071%" y="607.50"></text></g><g><title>dyld4::Loader::mapSegments(Diagnostics&amp;, dyld4::RuntimeState&amp;, char const*, int, unsigned long long, dyld4::Loader::CodeSignatureInFile const&amp;, bool, dyld3::Array&lt;dyld4::Loader::Region&gt; const&amp;, bool, bool, dyld4::Loader::FileValidationInfo const&amp;) (3 samples, 0.02%)</title><rect x="1.8571%" y="581" width="0.0172%" height="15" fill="rgb(211,51,23)" fg:x="323" fg:w="3"/><text x="2.1071%" y="591.50"></text></g><g><title>invocation function for block in dyld4::Loader::getLoader(Diagnostics&amp;, dyld4::RuntimeState&amp;, char const*, dyld4::Loader::LoadOptions const&amp;) (6 samples, 0.03%)</title><rect x="1.8456%" y="661" width="0.0345%" height="15" fill="rgb(247,221,28)" fg:x="321" fg:w="6"/><text x="2.0956%" y="671.50"></text></g><g><title>dyld4::Loader::makeDiskLoader(Diagnostics&amp;, dyld4::RuntimeState&amp;, char const*, dyld4::Loader::LoadOptions const&amp;, bool, unsigned int, mach_o::Layout const*) (5 samples, 0.03%)</title><rect x="1.8513%" y="645" width="0.0287%" height="15" fill="rgb(251,222,45)" fg:x="322" fg:w="5"/><text x="2.1013%" y="655.50"></text></g><g><title>dyld4::JustInTimeLoader::makeJustInTimeLoaderDisk(Diagnostics&amp;, dyld4::RuntimeState&amp;, char const*, dyld4::Loader::LoadOptions const&amp;, bool, unsigned int, mach_o::Layout const*) (5 samples, 0.03%)</title><rect x="1.8513%" y="629" width="0.0287%" height="15" fill="rgb(217,162,53)" fg:x="322" fg:w="5"/><text x="2.1013%" y="639.50"></text></g><g><title>dyld4::JustInTimeLoader::matchesPath(dyld4::RuntimeState const&amp;, char const*) const (2 samples, 0.01%)</title><rect x="1.9031%" y="597" width="0.0115%" height="15" fill="rgb(229,93,14)" fg:x="331" fg:w="2"/><text x="2.1531%" y="607.50"></text></g><g><title>mach_o::Header::installName() const (2 samples, 0.01%)</title><rect x="1.9031%" y="581" width="0.0115%" height="15" fill="rgb(209,67,49)" fg:x="331" fg:w="2"/><text x="2.1531%" y="591.50"></text></g><g><title>mach_o::Header::getDylibInstallName(char const**, mach_o::Version32*, mach_o::Version32*) const (2 samples, 0.01%)</title><rect x="1.9031%" y="565" width="0.0115%" height="15" fill="rgb(213,87,29)" fg:x="331" fg:w="2"/><text x="2.1531%" y="575.50"></text></g><g><title>mach_o::Header::forEachLoadCommand(void (load_command const*, bool&amp;) block_pointer) const (2 samples, 0.01%)</title><rect x="1.9031%" y="549" width="0.0115%" height="15" fill="rgb(205,151,52)" fg:x="331" fg:w="2"/><text x="2.1531%" y="559.50"></text></g><g><title>dyld4::Loader::forEachPath(Diagnostics&amp;, dyld4::RuntimeState&amp;, char const*, dyld4::Loader::LoadOptions const&amp;, void (char const*, dyld4::ProcessConfig::PathOverrides::Type, bool&amp;) block_pointer) (16 samples, 0.09%)</title><rect x="1.8456%" y="709" width="0.0920%" height="15" fill="rgb(253,215,39)" fg:x="321" fg:w="16"/><text x="2.0956%" y="719.50"></text></g><g><title>dyld4::ProcessConfig::PathOverrides::forEachPathVariant(char const*, mach_o::Platform, bool, bool, bool&amp;, void (char const*, dyld4::ProcessConfig::PathOverrides::Type, bool&amp;) block_pointer) const (16 samples, 0.09%)</title><rect x="1.8456%" y="693" width="0.0920%" height="15" fill="rgb(221,220,41)" fg:x="321" fg:w="16"/><text x="2.0956%" y="703.50"></text></g><g><title>dyld4::Loader::forEachResolvedAtPathVar(dyld4::RuntimeState&amp;, char const*, dyld4::Loader::LoadOptions const&amp;, dyld4::ProcessConfig::PathOverrides::Type, bool&amp;, void (char const*, dyld4::ProcessConfig::PathOverrides::Type, bool&amp;) block_pointer) (16 samples, 0.09%)</title><rect x="1.8456%" y="677" width="0.0920%" height="15" fill="rgb(218,133,21)" fg:x="321" fg:w="16"/><text x="2.0956%" y="687.50"></text></g><g><title>mach_o::Header::forEachRPath(void (char const*, bool&amp;) block_pointer) const (10 samples, 0.06%)</title><rect x="1.8801%" y="661" width="0.0575%" height="15" fill="rgb(221,193,43)" fg:x="327" fg:w="10"/><text x="2.1301%" y="671.50"></text></g><g><title>mach_o::Header::forEachLoadCommand(void (load_command const*, bool&amp;) block_pointer) const (10 samples, 0.06%)</title><rect x="1.8801%" y="645" width="0.0575%" height="15" fill="rgb(240,128,52)" fg:x="327" fg:w="10"/><text x="2.1301%" y="655.50"></text></g><g><title>invocation function for block in dyld4::Loader::forEachResolvedAtPathVar(dyld4::RuntimeState&amp;, char const*, dyld4::Loader::LoadOptions const&amp;, dyld4::ProcessConfig::PathOverrides::Type, bool&amp;, void (char const*, dyld4::ProcessConfig::PathOverrides::Type, bool&amp;) block_pointer) (10 samples, 0.06%)</title><rect x="1.8801%" y="629" width="0.0575%" height="15" fill="rgb(253,114,12)" fg:x="327" fg:w="10"/><text x="2.1301%" y="639.50"></text></g><g><title>invocation function for block in dyld4::Loader::getLoader(Diagnostics&amp;, dyld4::RuntimeState&amp;, char const*, dyld4::Loader::LoadOptions const&amp;) (10 samples, 0.06%)</title><rect x="1.8801%" y="613" width="0.0575%" height="15" fill="rgb(215,223,47)" fg:x="327" fg:w="10"/><text x="2.1301%" y="623.50"></text></g><g><title>close (3 samples, 0.02%)</title><rect x="1.9376%" y="677" width="0.0172%" height="15" fill="rgb(248,225,23)" fg:x="337" fg:w="3"/><text x="2.1876%" y="687.50"></text></g><g><title>dyld4::Loader::getLoader(Diagnostics&amp;, dyld4::RuntimeState&amp;, char const*, dyld4::Loader::LoadOptions const&amp;) (27 samples, 0.16%)</title><rect x="1.8341%" y="725" width="0.1552%" height="15" fill="rgb(250,108,0)" fg:x="319" fg:w="27"/><text x="2.0841%" y="735.50"></text></g><g><title>dyld4::ProcessConfig::canonicalDylibPathInCache(char const*) const (9 samples, 0.05%)</title><rect x="1.9376%" y="709" width="0.0517%" height="15" fill="rgb(228,208,7)" fg:x="337" fg:w="9"/><text x="2.1876%" y="719.50"></text></g><g><title>dyld4::SyscallDelegate::realpath(char const*, char*) const (9 samples, 0.05%)</title><rect x="1.9376%" y="693" width="0.0517%" height="15" fill="rgb(244,45,10)" fg:x="337" fg:w="9"/><text x="2.1876%" y="703.50"></text></g><g><title>dyld3::open(char const*, int, int) (6 samples, 0.03%)</title><rect x="1.9548%" y="677" width="0.0345%" height="15" fill="rgb(207,125,25)" fg:x="340" fg:w="6"/><text x="2.2048%" y="687.50"></text></g><g><title>open_with_subsystem (6 samples, 0.03%)</title><rect x="1.9548%" y="661" width="0.0345%" height="15" fill="rgb(210,195,18)" fg:x="340" fg:w="6"/><text x="2.2048%" y="671.50"></text></g><g><title>open (6 samples, 0.03%)</title><rect x="1.9548%" y="645" width="0.0345%" height="15" fill="rgb(249,80,12)" fg:x="340" fg:w="6"/><text x="2.2048%" y="655.50"></text></g><g><title>__open (6 samples, 0.03%)</title><rect x="1.9548%" y="629" width="0.0345%" height="15" fill="rgb(221,65,9)" fg:x="340" fg:w="6"/><text x="2.2048%" y="639.50"></text></g><g><title>dyld4::Loader::matchesPath(dyld4::RuntimeState const&amp;, char const*) const (2 samples, 0.01%)</title><rect x="1.9893%" y="725" width="0.0115%" height="15" fill="rgb(235,49,36)" fg:x="346" fg:w="2"/><text x="2.2393%" y="735.50"></text></g><g><title>dyld4::JustInTimeLoader::loadDependents(Diagnostics&amp;, dyld4::RuntimeState&amp;, dyld4::Loader::LoadOptions const&amp;) (80 samples, 0.46%)</title><rect x="1.5523%" y="805" width="0.4600%" height="15" fill="rgb(225,32,20)" fg:x="270" fg:w="80"/><text x="1.8023%" y="815.50"></text></g><g><title>mach_o::Header::forEachLinkedDylib(void (char const*, mach_o::LinkedDylibAttributes, mach_o::Version32, mach_o::Version32, bool, bool&amp;) block_pointer) const (32 samples, 0.18%)</title><rect x="1.8283%" y="789" width="0.1840%" height="15" fill="rgb(215,141,46)" fg:x="318" fg:w="32"/><text x="2.0783%" y="799.50"></text></g><g><title>mach_o::Header::forEachLoadCommand(void (load_command const*, bool&amp;) block_pointer) const (32 samples, 0.18%)</title><rect x="1.8283%" y="773" width="0.1840%" height="15" fill="rgb(250,160,47)" fg:x="318" fg:w="32"/><text x="2.0783%" y="783.50"></text></g><g><title>invocation function for block in mach_o::Header::forEachLinkedDylib(void (char const*, mach_o::LinkedDylibAttributes, mach_o::Version32, mach_o::Version32, bool, bool&amp;) block_pointer) const (32 samples, 0.18%)</title><rect x="1.8283%" y="757" width="0.1840%" height="15" fill="rgb(216,222,40)" fg:x="318" fg:w="32"/><text x="2.0783%" y="767.50"></text></g><g><title>invocation function for block in dyld4::JustInTimeLoader::loadDependents(Diagnostics&amp;, dyld4::RuntimeState&amp;, dyld4::Loader::LoadOptions const&amp;) (32 samples, 0.18%)</title><rect x="1.8283%" y="741" width="0.1840%" height="15" fill="rgb(234,217,39)" fg:x="318" fg:w="32"/><text x="2.0783%" y="751.50"></text></g><g><title>dyld4::PrebuiltLoader::matchesPath(dyld4::RuntimeState const&amp;, char const*) const (2 samples, 0.01%)</title><rect x="2.0008%" y="725" width="0.0115%" height="15" fill="rgb(207,178,40)" fg:x="348" fg:w="2"/><text x="2.2508%" y="735.50"></text></g><g><title>dyld4::JustInTimeLoader::matchesPath(dyld4::RuntimeState const&amp;, char const*) const (3 samples, 0.02%)</title><rect x="2.0123%" y="725" width="0.0172%" height="15" fill="rgb(221,136,13)" fg:x="350" fg:w="3"/><text x="2.2623%" y="735.50"></text></g><g><title>mach_o::Header::installName() const (2 samples, 0.01%)</title><rect x="2.0181%" y="709" width="0.0115%" height="15" fill="rgb(249,199,10)" fg:x="351" fg:w="2"/><text x="2.2681%" y="719.50"></text></g><g><title>mach_o::Header::getDylibInstallName(char const**, mach_o::Version32*, mach_o::Version32*) const (2 samples, 0.01%)</title><rect x="2.0181%" y="693" width="0.0115%" height="15" fill="rgb(249,222,13)" fg:x="351" fg:w="2"/><text x="2.2681%" y="703.50"></text></g><g><title>mach_o::Header::forEachLoadCommand(void (load_command const*, bool&amp;) block_pointer) const (2 samples, 0.01%)</title><rect x="2.0181%" y="677" width="0.0115%" height="15" fill="rgb(244,185,38)" fg:x="351" fg:w="2"/><text x="2.2681%" y="687.50"></text></g><g><title>close (2 samples, 0.01%)</title><rect x="2.0411%" y="629" width="0.0115%" height="15" fill="rgb(236,202,9)" fg:x="355" fg:w="2"/><text x="2.2911%" y="639.50"></text></g><g><title>dyld4::JustInTimeLoader::withRegions(dyld3::MachOFile const*, void (dyld3::Array&lt;dyld4::Loader::Region&gt; const&amp;) block_pointer) (3 samples, 0.02%)</title><rect x="2.0525%" y="629" width="0.0172%" height="15" fill="rgb(250,229,37)" fg:x="357" fg:w="3"/><text x="2.3025%" y="639.50"></text></g><g><title>invocation function for block in dyld4::JustInTimeLoader::makeJustInTimeLoaderDisk(Diagnostics&amp;, dyld4::RuntimeState&amp;, char const*, dyld4::Loader::LoadOptions const&amp;, bool, unsigned int, mach_o::Layout const*) (3 samples, 0.02%)</title><rect x="2.0525%" y="613" width="0.0172%" height="15" fill="rgb(206,174,23)" fg:x="357" fg:w="3"/><text x="2.3025%" y="623.50"></text></g><g><title>dyld4::Loader::mapSegments(Diagnostics&amp;, dyld4::RuntimeState&amp;, char const*, int, unsigned long long, dyld4::Loader::CodeSignatureInFile const&amp;, bool, dyld3::Array&lt;dyld4::Loader::Region&gt; const&amp;, bool, bool, dyld4::Loader::FileValidationInfo const&amp;) (2 samples, 0.01%)</title><rect x="2.0583%" y="597" width="0.0115%" height="15" fill="rgb(211,33,43)" fg:x="358" fg:w="2"/><text x="2.3083%" y="607.50"></text></g><g><title>invocation function for block in dyld4::Loader::getLoader(Diagnostics&amp;, dyld4::RuntimeState&amp;, char const*, dyld4::Loader::LoadOptions const&amp;) (11 samples, 0.06%)</title><rect x="2.0296%" y="677" width="0.0632%" height="15" fill="rgb(245,58,50)" fg:x="353" fg:w="11"/><text x="2.2796%" y="687.50"></text></g><g><title>dyld4::Loader::makeDiskLoader(Diagnostics&amp;, dyld4::RuntimeState&amp;, char const*, dyld4::Loader::LoadOptions const&amp;, bool, unsigned int, mach_o::Layout const*) (9 samples, 0.05%)</title><rect x="2.0411%" y="661" width="0.0517%" height="15" fill="rgb(244,68,36)" fg:x="355" fg:w="9"/><text x="2.2911%" y="671.50"></text></g><g><title>dyld4::JustInTimeLoader::makeJustInTimeLoaderDisk(Diagnostics&amp;, dyld4::RuntimeState&amp;, char const*, dyld4::Loader::LoadOptions const&amp;, bool, unsigned int, mach_o::Layout const*) (9 samples, 0.05%)</title><rect x="2.0411%" y="645" width="0.0517%" height="15" fill="rgb(232,229,15)" fg:x="355" fg:w="9"/><text x="2.2911%" y="655.50"></text></g><g><title>dyld4::SyscallDelegate::mapFileReadOnly(Diagnostics&amp;, char const*, int*, unsigned long*, dyld4::FileID*, bool*, char*) const (4 samples, 0.02%)</title><rect x="2.0698%" y="629" width="0.0230%" height="15" fill="rgb(254,30,23)" fg:x="360" fg:w="4"/><text x="2.3198%" y="639.50"></text></g><g><title>dyld3::open(char const*, int, int) (4 samples, 0.02%)</title><rect x="2.0698%" y="613" width="0.0230%" height="15" fill="rgb(235,160,14)" fg:x="360" fg:w="4"/><text x="2.3198%" y="623.50"></text></g><g><title>open_with_subsystem (4 samples, 0.02%)</title><rect x="2.0698%" y="597" width="0.0230%" height="15" fill="rgb(212,155,44)" fg:x="360" fg:w="4"/><text x="2.3198%" y="607.50"></text></g><g><title>open (4 samples, 0.02%)</title><rect x="2.0698%" y="581" width="0.0230%" height="15" fill="rgb(226,2,50)" fg:x="360" fg:w="4"/><text x="2.3198%" y="591.50"></text></g><g><title>__open (4 samples, 0.02%)</title><rect x="2.0698%" y="565" width="0.0230%" height="15" fill="rgb(234,177,6)" fg:x="360" fg:w="4"/><text x="2.3198%" y="575.50"></text></g><g><title>dyld4::Loader::forEachPath(Diagnostics&amp;, dyld4::RuntimeState&amp;, char const*, dyld4::Loader::LoadOptions const&amp;, void (char const*, dyld4::ProcessConfig::PathOverrides::Type, bool&amp;) block_pointer) (15 samples, 0.09%)</title><rect x="2.0296%" y="725" width="0.0862%" height="15" fill="rgb(217,24,9)" fg:x="353" fg:w="15"/><text x="2.2796%" y="735.50"></text></g><g><title>dyld4::ProcessConfig::PathOverrides::forEachPathVariant(char const*, mach_o::Platform, bool, bool, bool&amp;, void (char const*, dyld4::ProcessConfig::PathOverrides::Type, bool&amp;) block_pointer) const (15 samples, 0.09%)</title><rect x="2.0296%" y="709" width="0.0862%" height="15" fill="rgb(220,13,46)" fg:x="353" fg:w="15"/><text x="2.2796%" y="719.50"></text></g><g><title>dyld4::Loader::forEachResolvedAtPathVar(dyld4::RuntimeState&amp;, char const*, dyld4::Loader::LoadOptions const&amp;, dyld4::ProcessConfig::PathOverrides::Type, bool&amp;, void (char const*, dyld4::ProcessConfig::PathOverrides::Type, bool&amp;) block_pointer) (15 samples, 0.09%)</title><rect x="2.0296%" y="693" width="0.0862%" height="15" fill="rgb(239,221,27)" fg:x="353" fg:w="15"/><text x="2.2796%" y="703.50"></text></g><g><title>mach_o::Header::forEachRPath(void (char const*, bool&amp;) block_pointer) const (4 samples, 0.02%)</title><rect x="2.0928%" y="677" width="0.0230%" height="15" fill="rgb(222,198,25)" fg:x="364" fg:w="4"/><text x="2.3428%" y="687.50"></text></g><g><title>mach_o::Header::forEachLoadCommand(void (load_command const*, bool&amp;) block_pointer) const (4 samples, 0.02%)</title><rect x="2.0928%" y="661" width="0.0230%" height="15" fill="rgb(211,99,13)" fg:x="364" fg:w="4"/><text x="2.3428%" y="671.50"></text></g><g><title>invocation function for block in dyld4::Loader::forEachResolvedAtPathVar(dyld4::RuntimeState&amp;, char const*, dyld4::Loader::LoadOptions const&amp;, dyld4::ProcessConfig::PathOverrides::Type, bool&amp;, void (char const*, dyld4::ProcessConfig::PathOverrides::Type, bool&amp;) block_pointer) (4 samples, 0.02%)</title><rect x="2.0928%" y="645" width="0.0230%" height="15" fill="rgb(232,111,31)" fg:x="364" fg:w="4"/><text x="2.3428%" y="655.50"></text></g><g><title>invocation function for block in dyld4::Loader::getLoader(Diagnostics&amp;, dyld4::RuntimeState&amp;, char const*, dyld4::Loader::LoadOptions const&amp;) (4 samples, 0.02%)</title><rect x="2.0928%" y="629" width="0.0230%" height="15" fill="rgb(245,82,37)" fg:x="364" fg:w="4"/><text x="2.3428%" y="639.50"></text></g><g><title>dyld4::Loader::matchesPath(dyld4::RuntimeState const&amp;, char const*) const (2 samples, 0.01%)</title><rect x="2.1043%" y="613" width="0.0115%" height="15" fill="rgb(227,149,46)" fg:x="366" fg:w="2"/><text x="2.3543%" y="623.50"></text></g><g><title>dyld4::JustInTimeLoader::loadDependents(Diagnostics&amp;, dyld4::RuntimeState&amp;, dyld4::Loader::LoadOptions const&amp;) (103 samples, 0.59%)</title><rect x="1.5523%" y="821" width="0.5922%" height="15" fill="rgb(218,36,50)" fg:x="270" fg:w="103"/><text x="1.8023%" y="831.50"></text></g><g><title>mach_o::Header::forEachLinkedDylib(void (char const*, mach_o::LinkedDylibAttributes, mach_o::Version32, mach_o::Version32, bool, bool&amp;) block_pointer) const (23 samples, 0.13%)</title><rect x="2.0123%" y="805" width="0.1322%" height="15" fill="rgb(226,80,48)" fg:x="350" fg:w="23"/><text x="2.2623%" y="815.50"></text></g><g><title>mach_o::Header::forEachLoadCommand(void (load_command const*, bool&amp;) block_pointer) const (23 samples, 0.13%)</title><rect x="2.0123%" y="789" width="0.1322%" height="15" fill="rgb(238,224,15)" fg:x="350" fg:w="23"/><text x="2.2623%" y="799.50"></text></g><g><title>invocation function for block in mach_o::Header::forEachLinkedDylib(void (char const*, mach_o::LinkedDylibAttributes, mach_o::Version32, mach_o::Version32, bool, bool&amp;) block_pointer) const (23 samples, 0.13%)</title><rect x="2.0123%" y="773" width="0.1322%" height="15" fill="rgb(241,136,10)" fg:x="350" fg:w="23"/><text x="2.2623%" y="783.50"></text></g><g><title>invocation function for block in dyld4::JustInTimeLoader::loadDependents(Diagnostics&amp;, dyld4::RuntimeState&amp;, dyld4::Loader::LoadOptions const&amp;) (23 samples, 0.13%)</title><rect x="2.0123%" y="757" width="0.1322%" height="15" fill="rgb(208,32,45)" fg:x="350" fg:w="23"/><text x="2.2623%" y="767.50"></text></g><g><title>dyld4::Loader::getLoader(Diagnostics&amp;, dyld4::RuntimeState&amp;, char const*, dyld4::Loader::LoadOptions const&amp;) (23 samples, 0.13%)</title><rect x="2.0123%" y="741" width="0.1322%" height="15" fill="rgb(207,135,9)" fg:x="350" fg:w="23"/><text x="2.2623%" y="751.50"></text></g><g><title>dyld4::ProcessConfig::canonicalDylibPathInCache(char const*) const (5 samples, 0.03%)</title><rect x="2.1158%" y="725" width="0.0287%" height="15" fill="rgb(206,86,44)" fg:x="368" fg:w="5"/><text x="2.3658%" y="735.50"></text></g><g><title>dyld4::SyscallDelegate::realpath(char const*, char*) const (5 samples, 0.03%)</title><rect x="2.1158%" y="709" width="0.0287%" height="15" fill="rgb(245,177,15)" fg:x="368" fg:w="5"/><text x="2.3658%" y="719.50"></text></g><g><title>dyld3::open(char const*, int, int) (5 samples, 0.03%)</title><rect x="2.1158%" y="693" width="0.0287%" height="15" fill="rgb(206,64,50)" fg:x="368" fg:w="5"/><text x="2.3658%" y="703.50"></text></g><g><title>open_with_subsystem (5 samples, 0.03%)</title><rect x="2.1158%" y="677" width="0.0287%" height="15" fill="rgb(234,36,40)" fg:x="368" fg:w="5"/><text x="2.3658%" y="687.50"></text></g><g><title>open (5 samples, 0.03%)</title><rect x="2.1158%" y="661" width="0.0287%" height="15" fill="rgb(213,64,8)" fg:x="368" fg:w="5"/><text x="2.3658%" y="671.50"></text></g><g><title>__open (5 samples, 0.03%)</title><rect x="2.1158%" y="645" width="0.0287%" height="15" fill="rgb(210,75,36)" fg:x="368" fg:w="5"/><text x="2.3658%" y="655.50"></text></g><g><title>dyld4::JustInTimeLoader::matchesPath(dyld4::RuntimeState const&amp;, char const*) const (2 samples, 0.01%)</title><rect x="2.1503%" y="741" width="0.0115%" height="15" fill="rgb(229,88,21)" fg:x="374" fg:w="2"/><text x="2.4003%" y="751.50"></text></g><g><title>mach_o::Header::installName() const (2 samples, 0.01%)</title><rect x="2.1503%" y="725" width="0.0115%" height="15" fill="rgb(252,204,47)" fg:x="374" fg:w="2"/><text x="2.4003%" y="735.50"></text></g><g><title>mach_o::Header::getDylibInstallName(char const**, mach_o::Version32*, mach_o::Version32*) const (2 samples, 0.01%)</title><rect x="2.1503%" y="709" width="0.0115%" height="15" fill="rgb(208,77,27)" fg:x="374" fg:w="2"/><text x="2.4003%" y="719.50"></text></g><g><title>mach_o::Header::forEachLoadCommand(void (load_command const*, bool&amp;) block_pointer) const (2 samples, 0.01%)</title><rect x="2.1503%" y="693" width="0.0115%" height="15" fill="rgb(221,76,26)" fg:x="374" fg:w="2"/><text x="2.4003%" y="703.50"></text></g><g><title>dyld3::open(char const*, int, int) (4 samples, 0.02%)</title><rect x="2.1675%" y="629" width="0.0230%" height="15" fill="rgb(225,139,18)" fg:x="377" fg:w="4"/><text x="2.4175%" y="639.50"></text></g><g><title>open_with_subsystem (4 samples, 0.02%)</title><rect x="2.1675%" y="613" width="0.0230%" height="15" fill="rgb(230,137,11)" fg:x="377" fg:w="4"/><text x="2.4175%" y="623.50"></text></g><g><title>open (4 samples, 0.02%)</title><rect x="2.1675%" y="597" width="0.0230%" height="15" fill="rgb(212,28,1)" fg:x="377" fg:w="4"/><text x="2.4175%" y="607.50"></text></g><g><title>__open (4 samples, 0.02%)</title><rect x="2.1675%" y="581" width="0.0230%" height="15" fill="rgb(248,164,17)" fg:x="377" fg:w="4"/><text x="2.4175%" y="591.50"></text></g><g><title>invocation function for block in dyld4::Loader::getLoader(Diagnostics&amp;, dyld4::RuntimeState&amp;, char const*, dyld4::Loader::LoadOptions const&amp;) (6 samples, 0.03%)</title><rect x="2.1618%" y="693" width="0.0345%" height="15" fill="rgb(222,171,42)" fg:x="376" fg:w="6"/><text x="2.4118%" y="703.50"></text></g><g><title>dyld4::Loader::makeDiskLoader(Diagnostics&amp;, dyld4::RuntimeState&amp;, char const*, dyld4::Loader::LoadOptions const&amp;, bool, unsigned int, mach_o::Layout const*) (6 samples, 0.03%)</title><rect x="2.1618%" y="677" width="0.0345%" height="15" fill="rgb(243,84,45)" fg:x="376" fg:w="6"/><text x="2.4118%" y="687.50"></text></g><g><title>dyld4::JustInTimeLoader::makeJustInTimeLoaderDisk(Diagnostics&amp;, dyld4::RuntimeState&amp;, char const*, dyld4::Loader::LoadOptions const&amp;, bool, unsigned int, mach_o::Layout const*) (6 samples, 0.03%)</title><rect x="2.1618%" y="661" width="0.0345%" height="15" fill="rgb(252,49,23)" fg:x="376" fg:w="6"/><text x="2.4118%" y="671.50"></text></g><g><title>dyld4::SyscallDelegate::mapFileReadOnly(Diagnostics&amp;, char const*, int*, unsigned long*, dyld4::FileID*, bool*, char*) const (5 samples, 0.03%)</title><rect x="2.1675%" y="645" width="0.0287%" height="15" fill="rgb(215,19,7)" fg:x="377" fg:w="5"/><text x="2.4175%" y="655.50"></text></g><g><title>dyld4::Loader::forEachPath(Diagnostics&amp;, dyld4::RuntimeState&amp;, char const*, dyld4::Loader::LoadOptions const&amp;, void (char const*, dyld4::ProcessConfig::PathOverrides::Type, bool&amp;) block_pointer) (7 samples, 0.04%)</title><rect x="2.1618%" y="741" width="0.0402%" height="15" fill="rgb(238,81,41)" fg:x="376" fg:w="7"/><text x="2.4118%" y="751.50"></text></g><g><title>dyld4::ProcessConfig::PathOverrides::forEachPathVariant(char const*, mach_o::Platform, bool, bool, bool&amp;, void (char const*, dyld4::ProcessConfig::PathOverrides::Type, bool&amp;) block_pointer) const (7 samples, 0.04%)</title><rect x="2.1618%" y="725" width="0.0402%" height="15" fill="rgb(210,199,37)" fg:x="376" fg:w="7"/><text x="2.4118%" y="735.50"></text></g><g><title>dyld4::Loader::forEachResolvedAtPathVar(dyld4::RuntimeState&amp;, char const*, dyld4::Loader::LoadOptions const&amp;, dyld4::ProcessConfig::PathOverrides::Type, bool&amp;, void (char const*, dyld4::ProcessConfig::PathOverrides::Type, bool&amp;) block_pointer) (7 samples, 0.04%)</title><rect x="2.1618%" y="709" width="0.0402%" height="15" fill="rgb(244,192,49)" fg:x="376" fg:w="7"/><text x="2.4118%" y="719.50"></text></g><g><title>dyld3::open(char const*, int, int) (3 samples, 0.02%)</title><rect x="2.2135%" y="709" width="0.0172%" height="15" fill="rgb(226,211,11)" fg:x="385" fg:w="3"/><text x="2.4635%" y="719.50"></text></g><g><title>open_with_subsystem (3 samples, 0.02%)</title><rect x="2.2135%" y="693" width="0.0172%" height="15" fill="rgb(236,162,54)" fg:x="385" fg:w="3"/><text x="2.4635%" y="703.50"></text></g><g><title>open (3 samples, 0.02%)</title><rect x="2.2135%" y="677" width="0.0172%" height="15" fill="rgb(220,229,9)" fg:x="385" fg:w="3"/><text x="2.4635%" y="687.50"></text></g><g><title>__open (3 samples, 0.02%)</title><rect x="2.2135%" y="661" width="0.0172%" height="15" fill="rgb(250,87,22)" fg:x="385" fg:w="3"/><text x="2.4635%" y="671.50"></text></g><g><title>dyld4::JustInTimeLoader::loadDependents(Diagnostics&amp;, dyld4::RuntimeState&amp;, dyld4::Loader::LoadOptions const&amp;) (119 samples, 0.68%)</title><rect x="1.5523%" y="837" width="0.6842%" height="15" fill="rgb(239,43,17)" fg:x="270" fg:w="119"/><text x="1.8023%" y="847.50"></text></g><g><title>mach_o::Header::forEachLinkedDylib(void (char const*, mach_o::LinkedDylibAttributes, mach_o::Version32, mach_o::Version32, bool, bool&amp;) block_pointer) const (16 samples, 0.09%)</title><rect x="2.1445%" y="821" width="0.0920%" height="15" fill="rgb(231,177,25)" fg:x="373" fg:w="16"/><text x="2.3945%" y="831.50"></text></g><g><title>mach_o::Header::forEachLoadCommand(void (load_command const*, bool&amp;) block_pointer) const (16 samples, 0.09%)</title><rect x="2.1445%" y="805" width="0.0920%" height="15" fill="rgb(219,179,1)" fg:x="373" fg:w="16"/><text x="2.3945%" y="815.50"></text></g><g><title>invocation function for block in mach_o::Header::forEachLinkedDylib(void (char const*, mach_o::LinkedDylibAttributes, mach_o::Version32, mach_o::Version32, bool, bool&amp;) block_pointer) const (16 samples, 0.09%)</title><rect x="2.1445%" y="789" width="0.0920%" height="15" fill="rgb(238,219,53)" fg:x="373" fg:w="16"/><text x="2.3945%" y="799.50"></text></g><g><title>invocation function for block in dyld4::JustInTimeLoader::loadDependents(Diagnostics&amp;, dyld4::RuntimeState&amp;, dyld4::Loader::LoadOptions const&amp;) (16 samples, 0.09%)</title><rect x="2.1445%" y="773" width="0.0920%" height="15" fill="rgb(232,167,36)" fg:x="373" fg:w="16"/><text x="2.3945%" y="783.50"></text></g><g><title>dyld4::Loader::getLoader(Diagnostics&amp;, dyld4::RuntimeState&amp;, char const*, dyld4::Loader::LoadOptions const&amp;) (15 samples, 0.09%)</title><rect x="2.1503%" y="757" width="0.0862%" height="15" fill="rgb(244,19,51)" fg:x="374" fg:w="15"/><text x="2.4003%" y="767.50"></text></g><g><title>dyld4::ProcessConfig::canonicalDylibPathInCache(char const*) const (5 samples, 0.03%)</title><rect x="2.2078%" y="741" width="0.0287%" height="15" fill="rgb(224,6,22)" fg:x="384" fg:w="5"/><text x="2.4578%" y="751.50"></text></g><g><title>dyld4::SyscallDelegate::realpath(char const*, char*) const (5 samples, 0.03%)</title><rect x="2.2078%" y="725" width="0.0287%" height="15" fill="rgb(224,145,5)" fg:x="384" fg:w="5"/><text x="2.4578%" y="735.50"></text></g><g><title>dyld4::JustInTimeLoader::matchesPath(dyld4::RuntimeState const&amp;, char const*) const (3 samples, 0.02%)</title><rect x="2.2423%" y="757" width="0.0172%" height="15" fill="rgb(234,130,49)" fg:x="390" fg:w="3"/><text x="2.4923%" y="767.50"></text></g><g><title>mach_o::Header::installName() const (3 samples, 0.02%)</title><rect x="2.2423%" y="741" width="0.0172%" height="15" fill="rgb(254,6,2)" fg:x="390" fg:w="3"/><text x="2.4923%" y="751.50"></text></g><g><title>mach_o::Header::getDylibInstallName(char const**, mach_o::Version32*, mach_o::Version32*) const (3 samples, 0.02%)</title><rect x="2.2423%" y="725" width="0.0172%" height="15" fill="rgb(208,96,46)" fg:x="390" fg:w="3"/><text x="2.4923%" y="735.50"></text></g><g><title>mach_o::Header::forEachLoadCommand(void (load_command const*, bool&amp;) block_pointer) const (2 samples, 0.01%)</title><rect x="2.2480%" y="709" width="0.0115%" height="15" fill="rgb(239,3,39)" fg:x="391" fg:w="2"/><text x="2.4980%" y="719.50"></text></g><g><title>&lt;deduplicated_symbol&gt; (2 samples, 0.01%)</title><rect x="2.2595%" y="629" width="0.0115%" height="15" fill="rgb(233,210,1)" fg:x="393" fg:w="2"/><text x="2.5095%" y="639.50"></text></g><g><title>dyld4::JustInTimeLoader::matchesPath(dyld4::RuntimeState const&amp;, char const*) const (4 samples, 0.02%)</title><rect x="2.2595%" y="645" width="0.0230%" height="15" fill="rgb(244,137,37)" fg:x="393" fg:w="4"/><text x="2.5095%" y="655.50"></text></g><g><title>mach_o::Header::installName() const (2 samples, 0.01%)</title><rect x="2.2710%" y="629" width="0.0115%" height="15" fill="rgb(240,136,2)" fg:x="395" fg:w="2"/><text x="2.5210%" y="639.50"></text></g><g><title>mach_o::Header::getDylibInstallName(char const**, mach_o::Version32*, mach_o::Version32*) const (2 samples, 0.01%)</title><rect x="2.2710%" y="613" width="0.0115%" height="15" fill="rgb(239,18,37)" fg:x="395" fg:w="2"/><text x="2.5210%" y="623.50"></text></g><g><title>mach_o::Header::forEachLoadCommand(void (load_command const*, bool&amp;) block_pointer) const (2 samples, 0.01%)</title><rect x="2.2710%" y="597" width="0.0115%" height="15" fill="rgb(218,185,22)" fg:x="395" fg:w="2"/><text x="2.5210%" y="607.50"></text></g><g><title>dyld4::Loader::forEachPath(Diagnostics&amp;, dyld4::RuntimeState&amp;, char const*, dyld4::Loader::LoadOptions const&amp;, void (char const*, dyld4::ProcessConfig::PathOverrides::Type, bool&amp;) block_pointer) (5 samples, 0.03%)</title><rect x="2.2595%" y="757" width="0.0287%" height="15" fill="rgb(225,218,4)" fg:x="393" fg:w="5"/><text x="2.5095%" y="767.50"></text></g><g><title>dyld4::ProcessConfig::PathOverrides::forEachPathVariant(char const*, mach_o::Platform, bool, bool, bool&amp;, void (char const*, dyld4::ProcessConfig::PathOverrides::Type, bool&amp;) block_pointer) const (5 samples, 0.03%)</title><rect x="2.2595%" y="741" width="0.0287%" height="15" fill="rgb(230,182,32)" fg:x="393" fg:w="5"/><text x="2.5095%" y="751.50"></text></g><g><title>dyld4::Loader::forEachResolvedAtPathVar(dyld4::RuntimeState&amp;, char const*, dyld4::Loader::LoadOptions const&amp;, dyld4::ProcessConfig::PathOverrides::Type, bool&amp;, void (char const*, dyld4::ProcessConfig::PathOverrides::Type, bool&amp;) block_pointer) (5 samples, 0.03%)</title><rect x="2.2595%" y="725" width="0.0287%" height="15" fill="rgb(242,56,43)" fg:x="393" fg:w="5"/><text x="2.5095%" y="735.50"></text></g><g><title>mach_o::Header::forEachRPath(void (char const*, bool&amp;) block_pointer) const (5 samples, 0.03%)</title><rect x="2.2595%" y="709" width="0.0287%" height="15" fill="rgb(233,99,24)" fg:x="393" fg:w="5"/><text x="2.5095%" y="719.50"></text></g><g><title>mach_o::Header::forEachLoadCommand(void (load_command const*, bool&amp;) block_pointer) const (5 samples, 0.03%)</title><rect x="2.2595%" y="693" width="0.0287%" height="15" fill="rgb(234,209,42)" fg:x="393" fg:w="5"/><text x="2.5095%" y="703.50"></text></g><g><title>invocation function for block in dyld4::Loader::forEachResolvedAtPathVar(dyld4::RuntimeState&amp;, char const*, dyld4::Loader::LoadOptions const&amp;, dyld4::ProcessConfig::PathOverrides::Type, bool&amp;, void (char const*, dyld4::ProcessConfig::PathOverrides::Type, bool&amp;) block_pointer) (5 samples, 0.03%)</title><rect x="2.2595%" y="677" width="0.0287%" height="15" fill="rgb(227,7,12)" fg:x="393" fg:w="5"/><text x="2.5095%" y="687.50"></text></g><g><title>invocation function for block in dyld4::Loader::getLoader(Diagnostics&amp;, dyld4::RuntimeState&amp;, char const*, dyld4::Loader::LoadOptions const&amp;) (5 samples, 0.03%)</title><rect x="2.2595%" y="661" width="0.0287%" height="15" fill="rgb(245,203,43)" fg:x="393" fg:w="5"/><text x="2.5095%" y="671.50"></text></g><g><title>dyld4::JustInTimeLoader::loadDependents(Diagnostics&amp;, dyld4::RuntimeState&amp;, dyld4::Loader::LoadOptions const&amp;) (129 samples, 0.74%)</title><rect x="1.5523%" y="853" width="0.7417%" height="15" fill="rgb(238,205,33)" fg:x="270" fg:w="129"/><text x="1.8023%" y="863.50"></text></g><g><title>mach_o::Header::forEachLinkedDylib(void (char const*, mach_o::LinkedDylibAttributes, mach_o::Version32, mach_o::Version32, bool, bool&amp;) block_pointer) const (10 samples, 0.06%)</title><rect x="2.2365%" y="837" width="0.0575%" height="15" fill="rgb(231,56,7)" fg:x="389" fg:w="10"/><text x="2.4865%" y="847.50"></text></g><g><title>mach_o::Header::forEachLoadCommand(void (load_command const*, bool&amp;) block_pointer) const (10 samples, 0.06%)</title><rect x="2.2365%" y="821" width="0.0575%" height="15" fill="rgb(244,186,29)" fg:x="389" fg:w="10"/><text x="2.4865%" y="831.50"></text></g><g><title>invocation function for block in mach_o::Header::forEachLinkedDylib(void (char const*, mach_o::LinkedDylibAttributes, mach_o::Version32, mach_o::Version32, bool, bool&amp;) block_pointer) const (10 samples, 0.06%)</title><rect x="2.2365%" y="805" width="0.0575%" height="15" fill="rgb(234,111,31)" fg:x="389" fg:w="10"/><text x="2.4865%" y="815.50"></text></g><g><title>invocation function for block in dyld4::JustInTimeLoader::loadDependents(Diagnostics&amp;, dyld4::RuntimeState&amp;, dyld4::Loader::LoadOptions const&amp;) (10 samples, 0.06%)</title><rect x="2.2365%" y="789" width="0.0575%" height="15" fill="rgb(241,149,10)" fg:x="389" fg:w="10"/><text x="2.4865%" y="799.50"></text></g><g><title>dyld4::Loader::getLoader(Diagnostics&amp;, dyld4::RuntimeState&amp;, char const*, dyld4::Loader::LoadOptions const&amp;) (9 samples, 0.05%)</title><rect x="2.2423%" y="773" width="0.0517%" height="15" fill="rgb(249,206,44)" fg:x="390" fg:w="9"/><text x="2.4923%" y="783.50"></text></g><g><title>invocation function for block in dyld4::JustInTimeLoader::makeJustInTimeLoaderDisk(Diagnostics&amp;, dyld4::RuntimeState&amp;, char const*, dyld4::Loader::LoadOptions const&amp;, bool, unsigned int, mach_o::Layout const*) (5 samples, 0.03%)</title><rect x="2.2940%" y="661" width="0.0287%" height="15" fill="rgb(251,153,30)" fg:x="399" fg:w="5"/><text x="2.5440%" y="671.50"></text></g><g><title>dyld4::Loader::mapSegments(Diagnostics&amp;, dyld4::RuntimeState&amp;, char const*, int, unsigned long long, dyld4::Loader::CodeSignatureInFile const&amp;, bool, dyld3::Array&lt;dyld4::Loader::Region&gt; const&amp;, bool, bool, dyld4::Loader::FileValidationInfo const&amp;) (3 samples, 0.02%)</title><rect x="2.3055%" y="645" width="0.0172%" height="15" fill="rgb(239,152,38)" fg:x="401" fg:w="3"/><text x="2.5555%" y="655.50"></text></g><g><title>dyld4::JustInTimeLoader::withRegions(dyld3::MachOFile const*, void (dyld3::Array&lt;dyld4::Loader::Region&gt; const&amp;) block_pointer) (6 samples, 0.03%)</title><rect x="2.2940%" y="677" width="0.0345%" height="15" fill="rgb(249,139,47)" fg:x="399" fg:w="6"/><text x="2.5440%" y="687.50"></text></g><g><title>dyld4::SyscallDelegate::mapFileReadOnly(Diagnostics&amp;, char const*, int*, unsigned long*, dyld4::FileID*, bool*, char*) const (3 samples, 0.02%)</title><rect x="2.3285%" y="677" width="0.0172%" height="15" fill="rgb(244,64,35)" fg:x="405" fg:w="3"/><text x="2.5785%" y="687.50"></text></g><g><title>dyld3::open(char const*, int, int) (2 samples, 0.01%)</title><rect x="2.3343%" y="661" width="0.0115%" height="15" fill="rgb(216,46,15)" fg:x="406" fg:w="2"/><text x="2.5843%" y="671.50"></text></g><g><title>open_with_subsystem (2 samples, 0.01%)</title><rect x="2.3343%" y="645" width="0.0115%" height="15" fill="rgb(250,74,19)" fg:x="406" fg:w="2"/><text x="2.5843%" y="655.50"></text></g><g><title>dyld4::JustInTimeLoader::loadDependents(Diagnostics&amp;, dyld4::RuntimeState&amp;, dyld4::Loader::LoadOptions const&amp;) (139 samples, 0.80%)</title><rect x="1.5523%" y="869" width="0.7992%" height="15" fill="rgb(249,42,33)" fg:x="270" fg:w="139"/><text x="1.8023%" y="879.50"></text></g><g><title>mach_o::Header::forEachLinkedDylib(void (char const*, mach_o::LinkedDylibAttributes, mach_o::Version32, mach_o::Version32, bool, bool&amp;) block_pointer) const (10 samples, 0.06%)</title><rect x="2.2940%" y="853" width="0.0575%" height="15" fill="rgb(242,149,17)" fg:x="399" fg:w="10"/><text x="2.5440%" y="863.50"></text></g><g><title>mach_o::Header::forEachLoadCommand(void (load_command const*, bool&amp;) block_pointer) const (10 samples, 0.06%)</title><rect x="2.2940%" y="837" width="0.0575%" height="15" fill="rgb(244,29,21)" fg:x="399" fg:w="10"/><text x="2.5440%" y="847.50"></text></g><g><title>invocation function for block in mach_o::Header::forEachLinkedDylib(void (char const*, mach_o::LinkedDylibAttributes, mach_o::Version32, mach_o::Version32, bool, bool&amp;) block_pointer) const (10 samples, 0.06%)</title><rect x="2.2940%" y="821" width="0.0575%" height="15" fill="rgb(220,130,37)" fg:x="399" fg:w="10"/><text x="2.5440%" y="831.50"></text></g><g><title>invocation function for block in dyld4::JustInTimeLoader::loadDependents(Diagnostics&amp;, dyld4::RuntimeState&amp;, dyld4::Loader::LoadOptions const&amp;) (10 samples, 0.06%)</title><rect x="2.2940%" y="805" width="0.0575%" height="15" fill="rgb(211,67,2)" fg:x="399" fg:w="10"/><text x="2.5440%" y="815.50"></text></g><g><title>dyld4::Loader::getLoader(Diagnostics&amp;, dyld4::RuntimeState&amp;, char const*, dyld4::Loader::LoadOptions const&amp;) (10 samples, 0.06%)</title><rect x="2.2940%" y="789" width="0.0575%" height="15" fill="rgb(235,68,52)" fg:x="399" fg:w="10"/><text x="2.5440%" y="799.50"></text></g><g><title>dyld4::Loader::forEachPath(Diagnostics&amp;, dyld4::RuntimeState&amp;, char const*, dyld4::Loader::LoadOptions const&amp;, void (char const*, dyld4::ProcessConfig::PathOverrides::Type, bool&amp;) block_pointer) (10 samples, 0.06%)</title><rect x="2.2940%" y="773" width="0.0575%" height="15" fill="rgb(246,142,3)" fg:x="399" fg:w="10"/><text x="2.5440%" y="783.50"></text></g><g><title>dyld4::ProcessConfig::PathOverrides::forEachPathVariant(char const*, mach_o::Platform, bool, bool, bool&amp;, void (char const*, dyld4::ProcessConfig::PathOverrides::Type, bool&amp;) block_pointer) const (10 samples, 0.06%)</title><rect x="2.2940%" y="757" width="0.0575%" height="15" fill="rgb(241,25,7)" fg:x="399" fg:w="10"/><text x="2.5440%" y="767.50"></text></g><g><title>dyld4::Loader::forEachResolvedAtPathVar(dyld4::RuntimeState&amp;, char const*, dyld4::Loader::LoadOptions const&amp;, dyld4::ProcessConfig::PathOverrides::Type, bool&amp;, void (char const*, dyld4::ProcessConfig::PathOverrides::Type, bool&amp;) block_pointer) (10 samples, 0.06%)</title><rect x="2.2940%" y="741" width="0.0575%" height="15" fill="rgb(242,119,39)" fg:x="399" fg:w="10"/><text x="2.5440%" y="751.50"></text></g><g><title>invocation function for block in dyld4::Loader::getLoader(Diagnostics&amp;, dyld4::RuntimeState&amp;, char const*, dyld4::Loader::LoadOptions const&amp;) (10 samples, 0.06%)</title><rect x="2.2940%" y="725" width="0.0575%" height="15" fill="rgb(241,98,45)" fg:x="399" fg:w="10"/><text x="2.5440%" y="735.50"></text></g><g><title>dyld4::Loader::makeDiskLoader(Diagnostics&amp;, dyld4::RuntimeState&amp;, char const*, dyld4::Loader::LoadOptions const&amp;, bool, unsigned int, mach_o::Layout const*) (10 samples, 0.06%)</title><rect x="2.2940%" y="709" width="0.0575%" height="15" fill="rgb(254,28,30)" fg:x="399" fg:w="10"/><text x="2.5440%" y="719.50"></text></g><g><title>dyld4::JustInTimeLoader::makeJustInTimeLoaderDisk(Diagnostics&amp;, dyld4::RuntimeState&amp;, char const*, dyld4::Loader::LoadOptions const&amp;, bool, unsigned int, mach_o::Layout const*) (10 samples, 0.06%)</title><rect x="2.2940%" y="693" width="0.0575%" height="15" fill="rgb(241,142,54)" fg:x="399" fg:w="10"/><text x="2.5440%" y="703.50"></text></g><g><title>PropertyList::encode(ByteStream&amp;) (2 samples, 0.01%)</title><rect x="2.3630%" y="821" width="0.0115%" height="15" fill="rgb(222,85,15)" fg:x="411" fg:w="2"/><text x="2.6130%" y="831.50"></text></g><g><title>dyld4::RuntimeState::notifyDebuggerLoad(std::__1::span&lt;dyld4::Loader const*, 18446744073709551615ul&gt; const&amp;) (5 samples, 0.03%)</title><rect x="2.3573%" y="869" width="0.0287%" height="15" fill="rgb(210,85,47)" fg:x="410" fg:w="5"/><text x="2.6073%" y="879.50"></text></g><g><title>dyld4::ExternallyViewableState::addImages(lsl::Allocator&amp;, lsl::Allocator&amp;, std::__1::span&lt;dyld4::ExternallyViewableState::ImageInfo, 18446744073709551615ul&gt; const&amp;) (5 samples, 0.03%)</title><rect x="2.3573%" y="853" width="0.0287%" height="15" fill="rgb(224,206,25)" fg:x="410" fg:w="5"/><text x="2.6073%" y="863.50"></text></g><g><title>dyld4::ExternallyViewableState::generateAtlas(lsl::Allocator&amp;) (5 samples, 0.03%)</title><rect x="2.3573%" y="837" width="0.0287%" height="15" fill="rgb(243,201,19)" fg:x="410" fg:w="5"/><text x="2.6073%" y="847.50"></text></g><g><title>dyld4::start(dyld4::KernelArgs*, void*, void*)::$_0::operator()() const (412 samples, 2.37%)</title><rect x="0.0287%" y="901" width="2.3688%" height="15" fill="rgb(236,59,4)" fg:x="5" fg:w="412"/><text x="0.2787%" y="911.50">dy..</text></g><g><title>dyld4::prepare(dyld4::APIs&amp;, mach_o::Header const*) (412 samples, 2.37%)</title><rect x="0.0287%" y="885" width="2.3688%" height="15" fill="rgb(254,179,45)" fg:x="5" fg:w="412"/><text x="0.2787%" y="895.50">dy..</text></g><g><title>start (416 samples, 2.39%)</title><rect x="0.0172%" y="917" width="2.3918%" height="15" fill="rgb(226,14,10)" fg:x="3" fg:w="416"/><text x="0.2672%" y="927.50">st..</text></g><g><title>main (2 samples, 0.01%)</title><rect x="2.3975%" y="901" width="0.0115%" height="15" fill="rgb(244,27,41)" fg:x="417" fg:w="2"/><text x="2.6475%" y="911.50"></text></g><g><title>std::rt::lang_start_internal (2 samples, 0.01%)</title><rect x="2.3975%" y="885" width="0.0115%" height="15" fill="rgb(235,35,32)" fg:x="417" fg:w="2"/><text x="2.6475%" y="895.50"></text></g><g><title>std::rt::lang_start::_$u7b$$u7b$closure$u7d$$u7d$::he1ffdfd72974a367 (.llvm.9053148768203175168) (2 samples, 0.01%)</title><rect x="2.3975%" y="869" width="0.0115%" height="15" fill="rgb(218,68,31)" fg:x="417" fg:w="2"/><text x="2.6475%" y="879.50"></text></g><g><title>std::sys::backtrace::__rust_begin_short_backtrace (2 samples, 0.01%)</title><rect x="2.3975%" y="853" width="0.0115%" height="15" fill="rgb(207,120,37)" fg:x="417" fg:w="2"/><text x="2.6475%" y="863.50"></text></g><g><title>face_cropper::main (2 samples, 0.01%)</title><rect x="2.3975%" y="837" width="0.0115%" height="15" fill="rgb(227,98,0)" fg:x="417" fg:w="2"/><text x="2.6475%" y="847.50"></text></g><g><title>ioGPUResourceFinalize (2 samples, 0.01%)</title><rect x="2.4090%" y="645" width="0.0115%" height="15" fill="rgb(207,7,3)" fg:x="419" fg:w="2"/><text x="2.6590%" y="655.50"></text></g><g><title>iokit_user_client_trap (2 samples, 0.01%)</title><rect x="2.4090%" y="629" width="0.0115%" height="15" fill="rgb(206,98,19)" fg:x="419" fg:w="2"/><text x="2.6590%" y="639.50"></text></g><g><title>0x1f347db2c (3 samples, 0.02%)</title><rect x="2.4090%" y="805" width="0.0172%" height="15" fill="rgb(217,5,26)" fg:x="419" fg:w="3"/><text x="2.6590%" y="815.50"></text></g><g><title>gldDestroyBuffer (3 samples, 0.02%)</title><rect x="2.4090%" y="789" width="0.0172%" height="15" fill="rgb(235,190,38)" fg:x="419" fg:w="3"/><text x="2.6590%" y="799.50"></text></g><g><title>GLDBufferRec::dealloc() (3 samples, 0.02%)</title><rect x="2.4090%" y="773" width="0.0172%" height="15" fill="rgb(247,86,24)" fg:x="419" fg:w="3"/><text x="2.6590%" y="783.50"></text></g><g><title>GLDMemoryPluginRec::dealloc() (3 samples, 0.02%)</title><rect x="2.4090%" y="757" width="0.0172%" height="15" fill="rgb(205,101,16)" fg:x="419" fg:w="3"/><text x="2.6590%" y="767.50"></text></g><g><title>GLRBufferResource::dealloc() (3 samples, 0.02%)</title><rect x="2.4090%" y="741" width="0.0172%" height="15" fill="rgb(246,168,33)" fg:x="419" fg:w="3"/><text x="2.6590%" y="751.50"></text></g><g><title>-[AGXG14GFamilyBuffer dealloc] (3 samples, 0.02%)</title><rect x="2.4090%" y="725" width="0.0172%" height="15" fill="rgb(231,114,1)" fg:x="419" fg:w="3"/><text x="2.6590%" y="735.50"></text></g><g><title>-[AGXBuffer dealloc] (3 samples, 0.02%)</title><rect x="2.4090%" y="709" width="0.0172%" height="15" fill="rgb(207,184,53)" fg:x="419" fg:w="3"/><text x="2.6590%" y="719.50"></text></g><g><title>-[IOGPUMetalBuffer dealloc] (3 samples, 0.02%)</title><rect x="2.4090%" y="693" width="0.0172%" height="15" fill="rgb(224,95,51)" fg:x="419" fg:w="3"/><text x="2.6590%" y="703.50"></text></g><g><title>-[IOGPUMetalResource dealloc] (3 samples, 0.02%)</title><rect x="2.4090%" y="677" width="0.0172%" height="15" fill="rgb(212,188,45)" fg:x="419" fg:w="3"/><text x="2.6590%" y="687.50"></text></g><g><title>_CFRelease (3 samples, 0.02%)</title><rect x="2.4090%" y="661" width="0.0172%" height="15" fill="rgb(223,154,38)" fg:x="419" fg:w="3"/><text x="2.6590%" y="671.50"></text></g><g><title>_dispatch_worker_thread2 (4 samples, 0.02%)</title><rect x="2.4090%" y="885" width="0.0230%" height="15" fill="rgb(251,22,52)" fg:x="419" fg:w="4"/><text x="2.6590%" y="895.50"></text></g><g><title>_dispatch_root_queue_drain (4 samples, 0.02%)</title><rect x="2.4090%" y="869" width="0.0230%" height="15" fill="rgb(229,209,22)" fg:x="419" fg:w="4"/><text x="2.6590%" y="879.50"></text></g><g><title>&lt;deduplicated_symbol&gt; (4 samples, 0.02%)</title><rect x="2.4090%" y="853" width="0.0230%" height="15" fill="rgb(234,138,34)" fg:x="419" fg:w="4"/><text x="2.6590%" y="863.50"></text></g><g><title>_dispatch_client_callout (4 samples, 0.02%)</title><rect x="2.4090%" y="837" width="0.0230%" height="15" fill="rgb(212,95,11)" fg:x="419" fg:w="4"/><text x="2.6590%" y="847.50"></text></g><g><title>_dispatch_call_block_and_release (4 samples, 0.02%)</title><rect x="2.4090%" y="821" width="0.0230%" height="15" fill="rgb(240,179,47)" fg:x="419" fg:w="4"/><text x="2.6590%" y="831.50"></text></g><g><title>start_wqthread (8 samples, 0.05%)</title><rect x="2.4090%" y="917" width="0.0460%" height="15" fill="rgb(240,163,11)" fg:x="419" fg:w="8"/><text x="2.6590%" y="927.50"></text></g><g><title>_pthread_wqthread (8 samples, 0.05%)</title><rect x="2.4090%" y="901" width="0.0460%" height="15" fill="rgb(236,37,12)" fg:x="419" fg:w="8"/><text x="2.6590%" y="911.50"></text></g><g><title>_dispatch_workloop_worker_thread (4 samples, 0.02%)</title><rect x="2.4320%" y="885" width="0.0230%" height="15" fill="rgb(232,164,16)" fg:x="423" fg:w="4"/><text x="2.6820%" y="895.50"></text></g><g><title>_dispatch_root_queue_drain_deferred_wlh (4 samples, 0.02%)</title><rect x="2.4320%" y="869" width="0.0230%" height="15" fill="rgb(244,205,15)" fg:x="423" fg:w="4"/><text x="2.6820%" y="879.50"></text></g><g><title>_dispatch_lane_invoke (4 samples, 0.02%)</title><rect x="2.4320%" y="853" width="0.0230%" height="15" fill="rgb(223,117,47)" fg:x="423" fg:w="4"/><text x="2.6820%" y="863.50"></text></g><g><title>_dispatch_lane_serial_drain (4 samples, 0.02%)</title><rect x="2.4320%" y="837" width="0.0230%" height="15" fill="rgb(244,107,35)" fg:x="423" fg:w="4"/><text x="2.6820%" y="847.50"></text></g><g><title>_dispatch_lane_invoke (3 samples, 0.02%)</title><rect x="2.4378%" y="821" width="0.0172%" height="15" fill="rgb(205,140,8)" fg:x="424" fg:w="3"/><text x="2.6878%" y="831.50"></text></g><g><title>_dispatch_lane_serial_drain (3 samples, 0.02%)</title><rect x="2.4378%" y="805" width="0.0172%" height="15" fill="rgb(228,84,46)" fg:x="424" fg:w="3"/><text x="2.6878%" y="815.50"></text></g><g><title>_dispatch_mach_invoke (3 samples, 0.02%)</title><rect x="2.4378%" y="789" width="0.0172%" height="15" fill="rgb(254,188,9)" fg:x="424" fg:w="3"/><text x="2.6878%" y="799.50"></text></g><g><title>_dispatch_lane_serial_drain (3 samples, 0.02%)</title><rect x="2.4378%" y="773" width="0.0172%" height="15" fill="rgb(206,112,54)" fg:x="424" fg:w="3"/><text x="2.6878%" y="783.50"></text></g><g><title>_dispatch_mach_msg_invoke (3 samples, 0.02%)</title><rect x="2.4378%" y="757" width="0.0172%" height="15" fill="rgb(216,84,49)" fg:x="424" fg:w="3"/><text x="2.6878%" y="767.50"></text></g><g><title>_dispatch_client_callout4 (3 samples, 0.02%)</title><rect x="2.4378%" y="741" width="0.0172%" height="15" fill="rgb(214,194,35)" fg:x="424" fg:w="3"/><text x="2.6878%" y="751.50"></text></g><g><title>__IOGPUNotificationQueueSetDispatchQueue_block_invoke (3 samples, 0.02%)</title><rect x="2.4378%" y="725" width="0.0172%" height="15" fill="rgb(249,28,3)" fg:x="424" fg:w="3"/><text x="2.6878%" y="735.50"></text></g><g><title>IOGPUNotificationQueueDispatchAvailableCompletionNotifications (3 samples, 0.02%)</title><rect x="2.4378%" y="709" width="0.0172%" height="15" fill="rgb(222,56,52)" fg:x="424" fg:w="3"/><text x="2.6878%" y="719.50"></text></g><g><title>-[_MTLCommandQueue commandBufferDidComplete:startTime:completionTime:error:] (3 samples, 0.02%)</title><rect x="2.4378%" y="693" width="0.0172%" height="15" fill="rgb(245,217,50)" fg:x="424" fg:w="3"/><text x="2.6878%" y="703.50"></text></g><g><title>-[IOGPUMetalCommandBuffer didCompleteWithStartTime:endTime:error:] (3 samples, 0.02%)</title><rect x="2.4378%" y="677" width="0.0172%" height="15" fill="rgb(213,201,24)" fg:x="424" fg:w="3"/><text x="2.6878%" y="687.50"></text></g><g><title>-[_MTLCommandBuffer didCompleteWithStartTime:endTime:error:] (3 samples, 0.02%)</title><rect x="2.4378%" y="661" width="0.0172%" height="15" fill="rgb(248,116,28)" fg:x="424" fg:w="3"/><text x="2.6878%" y="671.50"></text></g><g><title>MTLDispatchListApply (3 samples, 0.02%)</title><rect x="2.4378%" y="645" width="0.0172%" height="15" fill="rgb(219,72,43)" fg:x="424" fg:w="3"/><text x="2.6878%" y="655.50"></text></g><g><title>invocation function for block in GLDQueueRec::flush(GLDQueueRec::FlushMode, bool) (3 samples, 0.02%)</title><rect x="2.4378%" y="629" width="0.0172%" height="15" fill="rgb(209,138,14)" fg:x="424" fg:w="3"/><text x="2.6878%" y="639.50"></text></g><g><title>GLRResourceList::makeResourcesNotBusyAndReset() (2 samples, 0.01%)</title><rect x="2.4435%" y="613" width="0.0115%" height="15" fill="rgb(222,18,33)" fg:x="425" fg:w="2"/><text x="2.6935%" y="623.50"></text></g><g><title>&lt;deduplicated_symbol&gt; (2 samples, 0.01%)</title><rect x="2.4435%" y="597" width="0.0115%" height="15" fill="rgb(213,199,7)" fg:x="425" fg:w="2"/><text x="2.6935%" y="607.50"></text></g><g><title>free_large (11 samples, 0.06%)</title><rect x="2.4608%" y="581" width="0.0632%" height="15" fill="rgb(250,110,10)" fg:x="428" fg:w="11"/><text x="2.7108%" y="591.50"></text></g><g><title>madvise (11 samples, 0.06%)</title><rect x="2.4608%" y="565" width="0.0632%" height="15" fill="rgb(248,123,6)" fg:x="428" fg:w="11"/><text x="2.7108%" y="575.50"></text></g><g><title>cv::Mat::~Mat() (12 samples, 0.07%)</title><rect x="2.4608%" y="645" width="0.0690%" height="15" fill="rgb(206,91,31)" fg:x="428" fg:w="12"/><text x="2.7108%" y="655.50"></text></g><g><title>cv::Mat::release() (12 samples, 0.07%)</title><rect x="2.4608%" y="629" width="0.0690%" height="15" fill="rgb(211,154,13)" fg:x="428" fg:w="12"/><text x="2.7108%" y="639.50"></text></g><g><title>cv::StdMatAllocator::deallocate(cv::UMatData*) const (12 samples, 0.07%)</title><rect x="2.4608%" y="613" width="0.0690%" height="15" fill="rgb(225,148,7)" fg:x="428" fg:w="12"/><text x="2.7108%" y="623.50"></text></g><g><title>_szone_free (12 samples, 0.07%)</title><rect x="2.4608%" y="597" width="0.0690%" height="15" fill="rgb(220,160,43)" fg:x="428" fg:w="12"/><text x="2.7108%" y="607.50"></text></g><g><title>ioGPUResourceFinalize (3 samples, 0.02%)</title><rect x="2.5470%" y="357" width="0.0172%" height="15" fill="rgb(213,52,39)" fg:x="443" fg:w="3"/><text x="2.7970%" y="367.50"></text></g><g><title>iokit_user_client_trap (3 samples, 0.02%)</title><rect x="2.5470%" y="341" width="0.0172%" height="15" fill="rgb(243,137,7)" fg:x="443" fg:w="3"/><text x="2.7970%" y="351.50"></text></g><g><title>-[IOGPUMetalBuffer dealloc] (5 samples, 0.03%)</title><rect x="2.5470%" y="405" width="0.0287%" height="15" fill="rgb(230,79,13)" fg:x="443" fg:w="5"/><text x="2.7970%" y="415.50"></text></g><g><title>-[IOGPUMetalResource dealloc] (5 samples, 0.03%)</title><rect x="2.5470%" y="389" width="0.0287%" height="15" fill="rgb(247,105,23)" fg:x="443" fg:w="5"/><text x="2.7970%" y="399.50"></text></g><g><title>_CFRelease (5 samples, 0.03%)</title><rect x="2.5470%" y="373" width="0.0287%" height="15" fill="rgb(223,179,41)" fg:x="443" fg:w="5"/><text x="2.7970%" y="383.50"></text></g><g><title>iokit_user_client_trap (2 samples, 0.01%)</title><rect x="2.5642%" y="357" width="0.0115%" height="15" fill="rgb(218,9,34)" fg:x="446" fg:w="2"/><text x="2.8142%" y="367.50"></text></g><g><title>cv_CascadeClassifier_delete (22 samples, 0.13%)</title><rect x="2.4550%" y="741" width="0.1265%" height="15" fill="rgb(222,106,8)" fg:x="427" fg:w="22"/><text x="2.7050%" y="751.50"></text></g><g><title>&lt;deduplicated_symbol&gt; (22 samples, 0.13%)</title><rect x="2.4550%" y="725" width="0.1265%" height="15" fill="rgb(211,220,0)" fg:x="427" fg:w="22"/><text x="2.7050%" y="735.50"></text></g><g><title>cv::CascadeClassifierImpl::~CascadeClassifierImpl() (22 samples, 0.13%)</title><rect x="2.4550%" y="709" width="0.1265%" height="15" fill="rgb(229,52,16)" fg:x="427" fg:w="22"/><text x="2.7050%" y="719.50"></text></g><g><title>&lt;deduplicated_symbol&gt; (22 samples, 0.13%)</title><rect x="2.4550%" y="693" width="0.1265%" height="15" fill="rgb(212,155,18)" fg:x="427" fg:w="22"/><text x="2.7050%" y="703.50"></text></g><g><title>std::__1::__shared_ptr_pointer&lt;cv::HaarEvaluator*, std::__1::shared_ptr&lt;cv::FeatureEvaluator&gt;::__shared_ptr_default_delete&lt;cv::FeatureEvaluator, cv::HaarEvaluator&gt;, std::__1::allocator&lt;cv::HaarEvaluator&gt;&gt;::__on_zero_shared() (22 samples, 0.13%)</title><rect x="2.4550%" y="677" width="0.1265%" height="15" fill="rgb(242,21,14)" fg:x="427" fg:w="22"/><text x="2.7050%" y="687.50"></text></g><g><title>cv::FeatureEvaluator::~FeatureEvaluator() (21 samples, 0.12%)</title><rect x="2.4608%" y="661" width="0.1207%" height="15" fill="rgb(222,19,48)" fg:x="428" fg:w="21"/><text x="2.7108%" y="671.50"></text></g><g><title>cv::UMat::~UMat() (9 samples, 0.05%)</title><rect x="2.5298%" y="645" width="0.0517%" height="15" fill="rgb(232,45,27)" fg:x="440" fg:w="9"/><text x="2.7798%" y="655.50"></text></g><g><title>cv::UMat::release() (9 samples, 0.05%)</title><rect x="2.5298%" y="629" width="0.0517%" height="15" fill="rgb(249,103,42)" fg:x="440" fg:w="9"/><text x="2.7798%" y="639.50"></text></g><g><title>cv::ocl::OpenCLAllocator::deallocate_(cv::UMatData*) const (9 samples, 0.05%)</title><rect x="2.5298%" y="613" width="0.0517%" height="15" fill="rgb(246,81,33)" fg:x="440" fg:w="9"/><text x="2.7798%" y="623.50"></text></g><g><title>cv::ocl::OpenCLBufferPoolBaseImpl&lt;cv::ocl::OpenCLBufferPoolImpl, cv::ocl::CLBufferEntry, _cl_mem*&gt;::release(_cl_mem*) (8 samples, 0.05%)</title><rect x="2.5355%" y="597" width="0.0460%" height="15" fill="rgb(252,33,42)" fg:x="441" fg:w="8"/><text x="2.7855%" y="607.50"></text></g><g><title>cv::ocl::OpenCLBufferPoolImpl::_releaseBufferEntry(cv::ocl::CLBufferEntry const&amp;) (8 samples, 0.05%)</title><rect x="2.5355%" y="581" width="0.0460%" height="15" fill="rgb(209,212,41)" fg:x="441" fg:w="8"/><text x="2.7855%" y="591.50"></text></g><g><title>clReleaseMemObject (8 samples, 0.05%)</title><rect x="2.5355%" y="565" width="0.0460%" height="15" fill="rgb(207,154,6)" fg:x="441" fg:w="8"/><text x="2.7855%" y="575.50"></text></g><g><title>0x1f3493120 (8 samples, 0.05%)</title><rect x="2.5355%" y="549" width="0.0460%" height="15" fill="rgb(223,64,47)" fg:x="441" fg:w="8"/><text x="2.7855%" y="559.50"></text></g><g><title>0x1f347e79c (8 samples, 0.05%)</title><rect x="2.5355%" y="533" width="0.0460%" height="15" fill="rgb(211,161,38)" fg:x="441" fg:w="8"/><text x="2.7855%" y="543.50"></text></g><g><title>gfxDestroyPluginBuffer (7 samples, 0.04%)</title><rect x="2.5413%" y="517" width="0.0402%" height="15" fill="rgb(219,138,40)" fg:x="442" fg:w="7"/><text x="2.7913%" y="527.50"></text></g><g><title>gldDestroyBuffer (6 samples, 0.03%)</title><rect x="2.5470%" y="501" width="0.0345%" height="15" fill="rgb(241,228,46)" fg:x="443" fg:w="6"/><text x="2.7970%" y="511.50"></text></g><g><title>GLDBufferRec::dealloc() (6 samples, 0.03%)</title><rect x="2.5470%" y="485" width="0.0345%" height="15" fill="rgb(223,209,38)" fg:x="443" fg:w="6"/><text x="2.7970%" y="495.50"></text></g><g><title>GLDMemoryPluginRec::dealloc() (6 samples, 0.03%)</title><rect x="2.5470%" y="469" width="0.0345%" height="15" fill="rgb(236,164,45)" fg:x="443" fg:w="6"/><text x="2.7970%" y="479.50"></text></g><g><title>GLRBufferResource::dealloc() (6 samples, 0.03%)</title><rect x="2.5470%" y="453" width="0.0345%" height="15" fill="rgb(231,15,5)" fg:x="443" fg:w="6"/><text x="2.7970%" y="463.50"></text></g><g><title>-[AGXG14GFamilyBuffer dealloc] (6 samples, 0.03%)</title><rect x="2.5470%" y="437" width="0.0345%" height="15" fill="rgb(252,35,15)" fg:x="443" fg:w="6"/><text x="2.7970%" y="447.50"></text></g><g><title>-[AGXBuffer dealloc] (6 samples, 0.03%)</title><rect x="2.5470%" y="421" width="0.0345%" height="15" fill="rgb(248,181,18)" fg:x="443" fg:w="6"/><text x="2.7970%" y="431.50"></text></g><g><title>&lt;deduplicated_symbol&gt; (2 samples, 0.01%)</title><rect x="2.6160%" y="629" width="0.0115%" height="15" fill="rgb(233,39,42)" fg:x="455" fg:w="2"/><text x="2.8660%" y="639.50"></text></g><g><title>DYLD-STUB$$cv::FileNodeIterator::operator*() const (2 samples, 0.01%)</title><rect x="2.6275%" y="629" width="0.0115%" height="15" fill="rgb(238,110,33)" fg:x="457" fg:w="2"/><text x="2.8775%" y="639.50"></text></g><g><title>DYLD-STUB$$cv::operator!=(cv::FileNodeIterator const&amp;, cv::FileNodeIterator const&amp;) (3 samples, 0.02%)</title><rect x="2.6505%" y="629" width="0.0172%" height="15" fill="rgb(233,195,10)" fg:x="461" fg:w="3"/><text x="2.9005%" y="639.50"></text></g><g><title>_free (2 samples, 0.01%)</title><rect x="2.6735%" y="629" width="0.0115%" height="15" fill="rgb(254,105,3)" fg:x="465" fg:w="2"/><text x="2.9235%" y="639.50"></text></g><g><title>_szone_free (2 samples, 0.01%)</title><rect x="2.6907%" y="629" width="0.0115%" height="15" fill="rgb(221,225,9)" fg:x="468" fg:w="2"/><text x="2.9407%" y="639.50"></text></g><g><title>cv::FileNode::operator float() const (4 samples, 0.02%)</title><rect x="2.7022%" y="629" width="0.0230%" height="15" fill="rgb(224,227,45)" fg:x="470" fg:w="4"/><text x="2.9522%" y="639.50"></text></g><g><title>cv::FileNode::operator int() const (4 samples, 0.02%)</title><rect x="2.7252%" y="629" width="0.0230%" height="15" fill="rgb(229,198,43)" fg:x="474" fg:w="4"/><text x="2.9752%" y="639.50"></text></g><g><title>cv::FileStorage::Impl::getNodePtr(unsigned long, unsigned long) const (2 samples, 0.01%)</title><rect x="2.7367%" y="613" width="0.0115%" height="15" fill="rgb(206,209,35)" fg:x="476" fg:w="2"/><text x="2.9867%" y="623.50"></text></g><g><title>cv::FileNode::size() const (3 samples, 0.02%)</title><rect x="2.7712%" y="597" width="0.0172%" height="15" fill="rgb(245,195,53)" fg:x="482" fg:w="3"/><text x="3.0212%" y="607.50"></text></g><g><title>cv::FileNode::type() const (2 samples, 0.01%)</title><rect x="2.7885%" y="597" width="0.0115%" height="15" fill="rgb(240,92,26)" fg:x="485" fg:w="2"/><text x="3.0385%" y="607.50"></text></g><g><title>cv::FileNode::type() const (3 samples, 0.02%)</title><rect x="2.8230%" y="581" width="0.0172%" height="15" fill="rgb(207,40,23)" fg:x="491" fg:w="3"/><text x="3.0730%" y="591.50"></text></g><g><title>cv::FileStorage::Impl::getNodePtr(unsigned long, unsigned long) const (3 samples, 0.02%)</title><rect x="2.8230%" y="565" width="0.0172%" height="15" fill="rgb(223,111,35)" fg:x="491" fg:w="3"/><text x="3.0730%" y="575.50"></text></g><g><title>cv::FileNodeIterator::FileNodeIterator(cv::FileNode const&amp;, bool) (9 samples, 0.05%)</title><rect x="2.8000%" y="597" width="0.0517%" height="15" fill="rgb(229,147,28)" fg:x="487" fg:w="9"/><text x="3.0500%" y="607.50"></text></g><g><title>cv::FileStorage::Impl::getNodePtr(unsigned long, unsigned long) const (2 samples, 0.01%)</title><rect x="2.8402%" y="581" width="0.0115%" height="15" fill="rgb(211,29,28)" fg:x="494" fg:w="2"/><text x="3.0902%" y="591.50"></text></g><g><title>cv::FileNode::operator[](std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt; const&amp;) const (40 samples, 0.23%)</title><rect x="2.7540%" y="613" width="0.2300%" height="15" fill="rgb(228,72,33)" fg:x="479" fg:w="40"/><text x="3.0040%" y="623.50"></text></g><g><title>std::__1::__hash_const_iterator&lt;std::__1::__hash_node&lt;std::__1::__hash_value_type&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt;, unsigned int&gt;, void*&gt;*&gt; std::__1::__hash_table&lt;std::__1::__hash_value_type&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt;, unsigned int&gt;, std::__1::__unordered_map_hasher&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt;, std::__1::__hash_value_type&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt;, unsigned int&gt;, std::__1::hash&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt;&gt;, std::__1::equal_to&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt;&gt;, true&gt;, std::__1::__unordered_map_equal&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt;, std::__1::__hash_value_type&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt;, unsigned int&gt;, std::__1::equal_to&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt;&gt;, std::__1::hash&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt;&gt;, true&gt;, std::__1::allocator&lt;std::__1::__hash_value_type&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt;, unsigned int&gt;&gt;&gt;::find&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt;&gt;(std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt; const&amp;) const (21 samples, 0.12%)</title><rect x="2.8632%" y="597" width="0.1207%" height="15" fill="rgb(205,214,31)" fg:x="498" fg:w="21"/><text x="3.1132%" y="607.50"></text></g><g><title>std::__1::equal_to&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt;&gt;::operator()[abi:ue170006](std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt; const&amp;, std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt; const&amp;) const (11 samples, 0.06%)</title><rect x="2.9207%" y="581" width="0.0632%" height="15" fill="rgb(224,111,15)" fg:x="508" fg:w="11"/><text x="3.1707%" y="591.50"></text></g><g><title>cv::FileNode::operator[](char const*) const (45 samples, 0.26%)</title><rect x="2.7482%" y="629" width="0.2587%" height="15" fill="rgb(253,21,26)" fg:x="478" fg:w="45"/><text x="2.9982%" y="639.50"></text></g><g><title>std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt;::basic_string[abi:ue170006]&lt;0&gt;(char const*) (3 samples, 0.02%)</title><rect x="2.9897%" y="613" width="0.0172%" height="15" fill="rgb(245,139,43)" fg:x="520" fg:w="3"/><text x="3.2397%" y="623.50"></text></g><g><title>cv::FileNode::size() const (3 samples, 0.02%)</title><rect x="3.0070%" y="629" width="0.0172%" height="15" fill="rgb(252,170,7)" fg:x="523" fg:w="3"/><text x="3.2570%" y="639.50"></text></g><g><title>cv::FileNode::size() const (7 samples, 0.04%)</title><rect x="3.0415%" y="613" width="0.0402%" height="15" fill="rgb(231,118,14)" fg:x="529" fg:w="7"/><text x="3.2915%" y="623.50"></text></g><g><title>cv::FileNode::type() const (2 samples, 0.01%)</title><rect x="3.0817%" y="613" width="0.0115%" height="15" fill="rgb(238,83,0)" fg:x="536" fg:w="2"/><text x="3.3317%" y="623.50"></text></g><g><title>cv::FileStorage::Impl::getNodePtr(unsigned long, unsigned long) const (3 samples, 0.02%)</title><rect x="3.0932%" y="613" width="0.0172%" height="15" fill="rgb(221,39,39)" fg:x="538" fg:w="3"/><text x="3.3432%" y="623.50"></text></g><g><title>cv::FileNodeIterator::FileNodeIterator(cv::FileNode const&amp;, bool) (18 samples, 0.10%)</title><rect x="3.0242%" y="629" width="0.1035%" height="15" fill="rgb(222,119,46)" fg:x="526" fg:w="18"/><text x="3.2742%" y="639.50"></text></g><g><title>cv::FileStorage::Impl::normalizeNodeOfs(unsigned long&amp;, unsigned long&amp;) const (3 samples, 0.02%)</title><rect x="3.1104%" y="613" width="0.0172%" height="15" fill="rgb(222,165,49)" fg:x="541" fg:w="3"/><text x="3.3604%" y="623.50"></text></g><g><title>cv::FileNodeIterator::operator*() const (3 samples, 0.02%)</title><rect x="3.1277%" y="629" width="0.0172%" height="15" fill="rgb(219,113,52)" fg:x="544" fg:w="3"/><text x="3.3777%" y="639.50"></text></g><g><title>cv::FileNodeIterator::operator++() (10 samples, 0.06%)</title><rect x="3.1449%" y="629" width="0.0575%" height="15" fill="rgb(214,7,15)" fg:x="547" fg:w="10"/><text x="3.3949%" y="639.50"></text></g><g><title>cv::FileNode::rawSize() const (6 samples, 0.03%)</title><rect x="3.1679%" y="613" width="0.0345%" height="15" fill="rgb(235,32,4)" fg:x="551" fg:w="6"/><text x="3.4179%" y="623.50"></text></g><g><title>cv::FileStorage::Impl::getNodePtr(unsigned long, unsigned long) const (3 samples, 0.02%)</title><rect x="3.1852%" y="597" width="0.0172%" height="15" fill="rgb(238,90,54)" fg:x="554" fg:w="3"/><text x="3.4352%" y="607.50"></text></g><g><title>cv::operator!=(cv::FileNodeIterator const&amp;, cv::FileNodeIterator const&amp;) (3 samples, 0.02%)</title><rect x="3.2082%" y="629" width="0.0172%" height="15" fill="rgb(213,208,19)" fg:x="558" fg:w="3"/><text x="3.4582%" y="639.50"></text></g><g><title>cv::FileNodeIterator::equalTo(cv::FileNodeIterator const&amp;) const (3 samples, 0.02%)</title><rect x="3.2082%" y="613" width="0.0172%" height="15" fill="rgb(233,156,4)" fg:x="558" fg:w="3"/><text x="3.4582%" y="623.50"></text></g><g><title>small_free_list_add_ptr (2 samples, 0.01%)</title><rect x="3.2829%" y="613" width="0.0115%" height="15" fill="rgb(207,194,5)" fg:x="571" fg:w="2"/><text x="3.5329%" y="623.50"></text></g><g><title>free_small (15 samples, 0.09%)</title><rect x="3.2312%" y="629" width="0.0862%" height="15" fill="rgb(206,111,30)" fg:x="562" fg:w="15"/><text x="3.4812%" y="639.50"></text></g><g><title>small_free_list_remove_ptr_no_clear (3 samples, 0.02%)</title><rect x="3.3002%" y="613" width="0.0172%" height="15" fill="rgb(243,70,54)" fg:x="574" fg:w="3"/><text x="3.5502%" y="623.50"></text></g><g><title>medium_malloc_should_clear (2 samples, 0.01%)</title><rect x="4.4673%" y="565" width="0.0115%" height="15" fill="rgb(242,28,8)" fg:x="777" fg:w="2"/><text x="4.7173%" y="575.50"></text></g><g><title>szone_malloc_should_clear (9 samples, 0.05%)</title><rect x="4.4616%" y="581" width="0.0517%" height="15" fill="rgb(219,106,18)" fg:x="776" fg:w="9"/><text x="4.7116%" y="591.50"></text></g><g><title>small_malloc_should_clear (6 samples, 0.03%)</title><rect x="4.4788%" y="565" width="0.0345%" height="15" fill="rgb(244,222,10)" fg:x="779" fg:w="6"/><text x="4.7288%" y="575.50"></text></g><g><title>small_malloc_from_free_list (2 samples, 0.01%)</title><rect x="4.5018%" y="549" width="0.0115%" height="15" fill="rgb(236,179,52)" fg:x="783" fg:w="2"/><text x="4.7518%" y="559.50"></text></g><g><title>std::__1::vector&lt;cv::CascadeClassifierImpl::Data::DTreeNode, std::__1::allocator&lt;cv::CascadeClassifierImpl::Data::DTreeNode&gt;&gt;::reserve(unsigned long) (208 samples, 1.20%)</title><rect x="3.3232%" y="629" width="1.1959%" height="15" fill="rgb(213,23,39)" fg:x="578" fg:w="208"/><text x="3.5732%" y="639.50"></text></g><g><title>&lt;deduplicated_symbol&gt; (12 samples, 0.07%)</title><rect x="4.4501%" y="613" width="0.0690%" height="15" fill="rgb(238,48,10)" fg:x="774" fg:w="12"/><text x="4.7001%" y="623.50"></text></g><g><title>operator new(unsigned long) (11 samples, 0.06%)</title><rect x="4.4558%" y="597" width="0.0632%" height="15" fill="rgb(251,196,23)" fg:x="775" fg:w="11"/><text x="4.7058%" y="607.50"></text></g><g><title>cv::CascadeClassifierImpl::Data::read(cv::FileNode const&amp;) (685 samples, 3.94%)</title><rect x="2.5815%" y="645" width="3.9384%" height="15" fill="rgb(250,152,24)" fg:x="449" fg:w="685"/><text x="2.8315%" y="655.50">cv::..</text></g><g><title>std::__1::vector&lt;float, std::__1::allocator&lt;float&gt;&gt;::reserve(unsigned long) (348 samples, 2.00%)</title><rect x="4.5191%" y="629" width="2.0008%" height="15" fill="rgb(209,150,17)" fg:x="786" fg:w="348"/><text x="4.7691%" y="639.50">s..</text></g><g><title>&lt;deduplicated_symbol&gt; (9 samples, 0.05%)</title><rect x="6.4681%" y="613" width="0.0517%" height="15" fill="rgb(234,202,34)" fg:x="1125" fg:w="9"/><text x="6.7181%" y="623.50"></text></g><g><title>operator new(unsigned long) (9 samples, 0.05%)</title><rect x="6.4681%" y="597" width="0.0517%" height="15" fill="rgb(253,148,53)" fg:x="1125" fg:w="9"/><text x="6.7181%" y="607.50"></text></g><g><title>szone_malloc_should_clear (9 samples, 0.05%)</title><rect x="6.4681%" y="581" width="0.0517%" height="15" fill="rgb(218,129,16)" fg:x="1125" fg:w="9"/><text x="6.7181%" y="591.50"></text></g><g><title>small_malloc_should_clear (7 samples, 0.04%)</title><rect x="6.4796%" y="565" width="0.0402%" height="15" fill="rgb(216,85,19)" fg:x="1127" fg:w="7"/><text x="6.7296%" y="575.50"></text></g><g><title>small_malloc_from_free_list (4 samples, 0.02%)</title><rect x="6.4969%" y="549" width="0.0230%" height="15" fill="rgb(235,228,7)" fg:x="1130" fg:w="4"/><text x="6.7469%" y="559.50"></text></g><g><title>small_free_list_remove_ptr_no_clear (2 samples, 0.01%)</title><rect x="6.5084%" y="533" width="0.0115%" height="15" fill="rgb(245,175,0)" fg:x="1132" fg:w="2"/><text x="6.7584%" y="543.50"></text></g><g><title>cv::FileNodeIterator::FileNodeIterator(cv::FileNode const&amp;, bool) (2 samples, 0.01%)</title><rect x="6.5314%" y="645" width="0.0115%" height="15" fill="rgb(208,168,36)" fg:x="1136" fg:w="2"/><text x="6.7814%" y="655.50"></text></g><g><title>cv::FileNodeIterator::operator++() (3 samples, 0.02%)</title><rect x="6.5716%" y="629" width="0.0172%" height="15" fill="rgb(246,171,24)" fg:x="1143" fg:w="3"/><text x="6.8216%" y="639.50"></text></g><g><title>cv::FileNode::rawSize() const (2 samples, 0.01%)</title><rect x="6.5774%" y="613" width="0.0115%" height="15" fill="rgb(215,142,24)" fg:x="1144" fg:w="2"/><text x="6.8274%" y="623.50"></text></g><g><title>_platform_memmove (2 samples, 0.01%)</title><rect x="6.6291%" y="597" width="0.0115%" height="15" fill="rgb(250,187,7)" fg:x="1153" fg:w="2"/><text x="6.8791%" y="607.50"></text></g><g><title>cv::FileNode::size() const (2 samples, 0.01%)</title><rect x="6.6579%" y="581" width="0.0115%" height="15" fill="rgb(228,66,33)" fg:x="1158" fg:w="2"/><text x="6.9079%" y="591.50"></text></g><g><title>cv::FileNode::type() const (3 samples, 0.02%)</title><rect x="6.6693%" y="581" width="0.0172%" height="15" fill="rgb(234,215,21)" fg:x="1160" fg:w="3"/><text x="6.9193%" y="591.50"></text></g><g><title>cv::FileStorage::Impl::getNodePtr(unsigned long, unsigned long) const (3 samples, 0.02%)</title><rect x="6.6693%" y="565" width="0.0172%" height="15" fill="rgb(222,191,20)" fg:x="1160" fg:w="3"/><text x="6.9193%" y="575.50"></text></g><g><title>cv::FileNode::size() const (2 samples, 0.01%)</title><rect x="6.6923%" y="565" width="0.0115%" height="15" fill="rgb(245,79,54)" fg:x="1164" fg:w="2"/><text x="6.9423%" y="575.50"></text></g><g><title>cv::FileNode::type() const (6 samples, 0.03%)</title><rect x="6.7038%" y="565" width="0.0345%" height="15" fill="rgb(240,10,37)" fg:x="1166" fg:w="6"/><text x="6.9538%" y="575.50"></text></g><g><title>cv::FileStorage::Impl::getNodePtr(unsigned long, unsigned long) const (5 samples, 0.03%)</title><rect x="6.7096%" y="549" width="0.0287%" height="15" fill="rgb(214,192,32)" fg:x="1167" fg:w="5"/><text x="6.9596%" y="559.50"></text></g><g><title>cv::FileNodeIterator::FileNodeIterator(cv::FileNode const&amp;, bool) (10 samples, 0.06%)</title><rect x="6.6866%" y="581" width="0.0575%" height="15" fill="rgb(209,36,54)" fg:x="1163" fg:w="10"/><text x="6.9366%" y="591.50"></text></g><g><title>cv::FileNode::operator[](std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt; const&amp;) const (26 samples, 0.15%)</title><rect x="6.6406%" y="597" width="0.1495%" height="15" fill="rgb(220,10,11)" fg:x="1155" fg:w="26"/><text x="6.8906%" y="607.50"></text></g><g><title>std::__1::__hash_const_iterator&lt;std::__1::__hash_node&lt;std::__1::__hash_value_type&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt;, unsigned int&gt;, void*&gt;*&gt; std::__1::__hash_table&lt;std::__1::__hash_value_type&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt;, unsigned int&gt;, std::__1::__unordered_map_hasher&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt;, std::__1::__hash_value_type&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt;, unsigned int&gt;, std::__1::hash&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt;&gt;, std::__1::equal_to&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt;&gt;, true&gt;, std::__1::__unordered_map_equal&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt;, std::__1::__hash_value_type&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt;, unsigned int&gt;, std::__1::equal_to&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt;&gt;, std::__1::hash&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt;&gt;, true&gt;, std::__1::allocator&lt;std::__1::__hash_value_type&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt;, unsigned int&gt;&gt;&gt;::find&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt;&gt;(std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt; const&amp;) const (7 samples, 0.04%)</title><rect x="6.7498%" y="581" width="0.0402%" height="15" fill="rgb(221,106,17)" fg:x="1174" fg:w="7"/><text x="6.9998%" y="591.50"></text></g><g><title>std::__1::equal_to&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt;&gt;::operator()[abi:ue170006](std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt; const&amp;, std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt; const&amp;) const (3 samples, 0.02%)</title><rect x="6.7728%" y="565" width="0.0172%" height="15" fill="rgb(251,142,44)" fg:x="1178" fg:w="3"/><text x="7.0228%" y="575.50"></text></g><g><title>cv::FileNode::operator[](char const*) const (30 samples, 0.17%)</title><rect x="6.6291%" y="613" width="0.1725%" height="15" fill="rgb(238,13,15)" fg:x="1153" fg:w="30"/><text x="6.8791%" y="623.50"></text></g><g><title>cv::FileNode::rawSize() const (2 samples, 0.01%)</title><rect x="6.8016%" y="613" width="0.0115%" height="15" fill="rgb(208,107,27)" fg:x="1183" fg:w="2"/><text x="7.0516%" y="623.50"></text></g><g><title>cv::FileNode::size() const (4 samples, 0.02%)</title><rect x="6.8303%" y="597" width="0.0230%" height="15" fill="rgb(205,136,37)" fg:x="1188" fg:w="4"/><text x="7.0803%" y="607.50"></text></g><g><title>cv::FileStorage::Impl::getNodePtr(unsigned long, unsigned long) const (2 samples, 0.01%)</title><rect x="6.8418%" y="581" width="0.0115%" height="15" fill="rgb(250,205,27)" fg:x="1190" fg:w="2"/><text x="7.0918%" y="591.50"></text></g><g><title>cv::FileNode::type() const (4 samples, 0.02%)</title><rect x="6.8533%" y="597" width="0.0230%" height="15" fill="rgb(210,80,43)" fg:x="1192" fg:w="4"/><text x="7.1033%" y="607.50"></text></g><g><title>cv::FileStorage::Impl::getNodePtr(unsigned long, unsigned long) const (2 samples, 0.01%)</title><rect x="6.8648%" y="581" width="0.0115%" height="15" fill="rgb(247,160,36)" fg:x="1194" fg:w="2"/><text x="7.1148%" y="591.50"></text></g><g><title>cv::FileStorage::Impl::getNodePtr(unsigned long, unsigned long) const (2 samples, 0.01%)</title><rect x="6.8763%" y="597" width="0.0115%" height="15" fill="rgb(234,13,49)" fg:x="1196" fg:w="2"/><text x="7.1263%" y="607.50"></text></g><g><title>cv::FileNodeIterator::FileNodeIterator(cv::FileNode const&amp;, bool) (16 samples, 0.09%)</title><rect x="6.8131%" y="613" width="0.0920%" height="15" fill="rgb(234,122,0)" fg:x="1185" fg:w="16"/><text x="7.0631%" y="623.50"></text></g><g><title>cv::FileStorage::Impl::normalizeNodeOfs(unsigned long&amp;, unsigned long&amp;) const (3 samples, 0.02%)</title><rect x="6.8878%" y="597" width="0.0172%" height="15" fill="rgb(207,146,38)" fg:x="1198" fg:w="3"/><text x="7.1378%" y="607.50"></text></g><g><title>cv::FileNodeIterator::equalTo(cv::FileNodeIterator const&amp;) const (4 samples, 0.02%)</title><rect x="6.9051%" y="613" width="0.0230%" height="15" fill="rgb(207,177,25)" fg:x="1201" fg:w="4"/><text x="7.1551%" y="623.50"></text></g><g><title>cv::FileNodeIterator::operator*() const (2 samples, 0.01%)</title><rect x="6.9281%" y="613" width="0.0115%" height="15" fill="rgb(211,178,42)" fg:x="1205" fg:w="2"/><text x="7.1781%" y="623.50"></text></g><g><title>cv::FileNode::rawSize() const (14 samples, 0.08%)</title><rect x="6.9741%" y="597" width="0.0805%" height="15" fill="rgb(230,69,54)" fg:x="1213" fg:w="14"/><text x="7.2241%" y="607.50"></text></g><g><title>cv::FileStorage::Impl::getNodePtr(unsigned long, unsigned long) const (3 samples, 0.02%)</title><rect x="7.0373%" y="581" width="0.0172%" height="15" fill="rgb(214,135,41)" fg:x="1224" fg:w="3"/><text x="7.2873%" y="591.50"></text></g><g><title>cv::FileNodeIterator::operator++() (21 samples, 0.12%)</title><rect x="6.9396%" y="613" width="0.1207%" height="15" fill="rgb(237,67,25)" fg:x="1207" fg:w="21"/><text x="7.1896%" y="623.50"></text></g><g><title>cv::operator!=(cv::FileNodeIterator const&amp;, cv::FileNodeIterator const&amp;) (2 samples, 0.01%)</title><rect x="7.0661%" y="613" width="0.0115%" height="15" fill="rgb(222,189,50)" fg:x="1229" fg:w="2"/><text x="7.3161%" y="623.50"></text></g><g><title>cv::FileNodeIterator::equalTo(cv::FileNodeIterator const&amp;) const (2 samples, 0.01%)</title><rect x="7.0661%" y="597" width="0.0115%" height="15" fill="rgb(245,148,34)" fg:x="1229" fg:w="2"/><text x="7.3161%" y="607.50"></text></g><g><title>cv::read(cv::FileNode const&amp;, float&amp;, float) (2 samples, 0.01%)</title><rect x="7.0776%" y="613" width="0.0115%" height="15" fill="rgb(222,29,6)" fg:x="1231" fg:w="2"/><text x="7.3276%" y="623.50"></text></g><g><title>cv::HaarEvaluator::Feature::read(cv::FileNode const&amp;, cv::Size_&lt;int&gt; const&amp;) (96 samples, 0.55%)</title><rect x="6.5889%" y="629" width="0.5519%" height="15" fill="rgb(221,189,43)" fg:x="1146" fg:w="96"/><text x="6.8389%" y="639.50"></text></g><g><title>cv::read(cv::FileNode const&amp;, int&amp;, int) (9 samples, 0.05%)</title><rect x="7.0891%" y="613" width="0.0517%" height="15" fill="rgb(207,36,27)" fg:x="1233" fg:w="9"/><text x="7.3391%" y="623.50"></text></g><g><title>cv::FileNode::operator int() const (8 samples, 0.05%)</title><rect x="7.0948%" y="597" width="0.0460%" height="15" fill="rgb(217,90,24)" fg:x="1234" fg:w="8"/><text x="7.3448%" y="607.50"></text></g><g><title>cv::FileStorage::Impl::getNodePtr(unsigned long, unsigned long) const (2 samples, 0.01%)</title><rect x="7.1293%" y="581" width="0.0115%" height="15" fill="rgb(224,66,35)" fg:x="1240" fg:w="2"/><text x="7.3793%" y="591.50"></text></g><g><title>cv::CascadeClassifierImpl::read_(cv::FileNode const&amp;) (795 samples, 4.57%)</title><rect x="2.5815%" y="661" width="4.5708%" height="15" fill="rgb(221,13,50)" fg:x="449" fg:w="795"/><text x="2.8315%" y="671.50">cv::C..</text></g><g><title>cv::HaarEvaluator::read(cv::FileNode const&amp;, cv::Size_&lt;int&gt;) (105 samples, 0.60%)</title><rect x="6.5486%" y="645" width="0.6037%" height="15" fill="rgb(236,68,49)" fg:x="1139" fg:w="105"/><text x="6.7986%" y="655.50"></text></g><g><title>std::__1::vector&lt;cv::HaarEvaluator::Feature, std::__1::allocator&lt;cv::HaarEvaluator::Feature&gt;&gt;::__append(unsigned long) (2 samples, 0.01%)</title><rect x="7.1408%" y="629" width="0.0115%" height="15" fill="rgb(229,146,28)" fg:x="1242" fg:w="2"/><text x="7.3908%" y="639.50"></text></g><g><title>cv::FileStorage::Impl::convertToCollection(int, cv::FileNode&amp;) (2 samples, 0.01%)</title><rect x="7.2040%" y="549" width="0.0115%" height="15" fill="rgb(225,31,38)" fg:x="1253" fg:w="2"/><text x="7.4540%" y="559.50"></text></g><g><title>cv::FileNode::type() const (2 samples, 0.01%)</title><rect x="7.2040%" y="533" width="0.0115%" height="15" fill="rgb(250,208,3)" fg:x="1253" fg:w="2"/><text x="7.4540%" y="543.50"></text></g><g><title>cv::FileStorage::Impl::addNode(cv::FileNode&amp;, std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt; const&amp;, int, void const*, int) (9 samples, 0.05%)</title><rect x="7.1696%" y="565" width="0.0517%" height="15" fill="rgb(246,54,23)" fg:x="1247" fg:w="9"/><text x="7.4196%" y="575.50"></text></g><g><title>cv::XMLParser::parseTag(char*, std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt;&amp;, std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt;&amp;, int&amp;) (8 samples, 0.05%)</title><rect x="7.2270%" y="565" width="0.0460%" height="15" fill="rgb(243,76,11)" fg:x="1257" fg:w="8"/><text x="7.4770%" y="575.50"></text></g><g><title>cv::FileStorage::Impl::addNode(cv::FileNode&amp;, std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt; const&amp;, int, void const*, int) (13 samples, 0.07%)</title><rect x="7.3018%" y="549" width="0.0747%" height="15" fill="rgb(245,21,50)" fg:x="1270" fg:w="13"/><text x="7.5518%" y="559.50"></text></g><g><title>std::__1::__hash_const_iterator&lt;std::__1::__hash_node&lt;std::__1::__hash_value_type&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt;, unsigned int&gt;, void*&gt;*&gt; std::__1::__hash_table&lt;std::__1::__hash_value_type&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt;, unsigned int&gt;, std::__1::__unordered_map_hasher&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt;, std::__1::__hash_value_type&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt;, unsigned int&gt;, std::__1::hash&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt;&gt;, std::__1::equal_to&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt;&gt;, true&gt;, std::__1::__unordered_map_equal&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt;, std::__1::__hash_value_type&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt;, unsigned int&gt;, std::__1::equal_to&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt;&gt;, std::__1::hash&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt;&gt;, true&gt;, std::__1::allocator&lt;std::__1::__hash_value_type&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt;, unsigned int&gt;&gt;&gt;::find&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt;&gt;(std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt; const&amp;) const (8 samples, 0.05%)</title><rect x="7.3305%" y="533" width="0.0460%" height="15" fill="rgb(228,9,43)" fg:x="1275" fg:w="8"/><text x="7.5805%" y="543.50"></text></g><g><title>std::__1::equal_to&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt;&gt;::operator()[abi:ue170006](std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt; const&amp;, std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt; const&amp;) const (2 samples, 0.01%)</title><rect x="7.3650%" y="517" width="0.0115%" height="15" fill="rgb(208,100,47)" fg:x="1281" fg:w="2"/><text x="7.6150%" y="527.50"></text></g><g><title>cv::FileStorage::Impl::finalizeCollection(cv::FileNode&amp;) (7 samples, 0.04%)</title><rect x="7.3765%" y="549" width="0.0402%" height="15" fill="rgb(232,26,8)" fg:x="1283" fg:w="7"/><text x="7.6265%" y="559.50"></text></g><g><title>cv::FileNode::type() const (4 samples, 0.02%)</title><rect x="7.3938%" y="533" width="0.0230%" height="15" fill="rgb(216,166,38)" fg:x="1286" fg:w="4"/><text x="7.6438%" y="543.50"></text></g><g><title>cv::FileStorage::Impl::getNodePtr(unsigned long, unsigned long) const (3 samples, 0.02%)</title><rect x="7.3995%" y="517" width="0.0172%" height="15" fill="rgb(251,202,51)" fg:x="1287" fg:w="3"/><text x="7.6495%" y="527.50"></text></g><g><title>cv::XMLParser::parseTag(char*, std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt;&amp;, std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt;&amp;, int&amp;) (12 samples, 0.07%)</title><rect x="7.4225%" y="549" width="0.0690%" height="15" fill="rgb(254,216,34)" fg:x="1291" fg:w="12"/><text x="7.6725%" y="559.50"></text></g><g><title>std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt;::basic_string[abi:ue170006](char const*, unsigned long) (2 samples, 0.01%)</title><rect x="7.4800%" y="533" width="0.0115%" height="15" fill="rgb(251,32,27)" fg:x="1301" fg:w="2"/><text x="7.7300%" y="543.50"></text></g><g><title>_platform_strcmp$VARIANT$Base (2 samples, 0.01%)</title><rect x="7.5490%" y="533" width="0.0115%" height="15" fill="rgb(208,127,28)" fg:x="1313" fg:w="2"/><text x="7.7990%" y="543.50"></text></g><g><title>cv::FileNode::setValue(int, void const*, int) (2 samples, 0.01%)</title><rect x="7.5605%" y="533" width="0.0115%" height="15" fill="rgb(224,137,22)" fg:x="1315" fg:w="2"/><text x="7.8105%" y="543.50"></text></g><g><title>_platform_strcmp$VARIANT$Base (2 samples, 0.01%)</title><rect x="7.6353%" y="517" width="0.0115%" height="15" fill="rgb(254,70,32)" fg:x="1328" fg:w="2"/><text x="7.8853%" y="527.50"></text></g><g><title>cv::FileNode::isNamed() const (4 samples, 0.02%)</title><rect x="7.6468%" y="517" width="0.0230%" height="15" fill="rgb(229,75,37)" fg:x="1330" fg:w="4"/><text x="7.8968%" y="527.50"></text></g><g><title>cv::FileStorage::Impl::convertToCollection(int, cv::FileNode&amp;) (5 samples, 0.03%)</title><rect x="7.6755%" y="517" width="0.0287%" height="15" fill="rgb(252,64,23)" fg:x="1335" fg:w="5"/><text x="7.9255%" y="527.50"></text></g><g><title>cv::FileStorage::Impl::addNode(cv::FileNode&amp;, std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt; const&amp;, int, void const*, int) (23 samples, 0.13%)</title><rect x="7.5778%" y="533" width="0.1322%" height="15" fill="rgb(232,162,48)" fg:x="1318" fg:w="23"/><text x="7.8278%" y="543.50"></text></g><g><title>cv::FileStorage::Impl::finalizeCollection(cv::FileNode&amp;) (2 samples, 0.01%)</title><rect x="7.7157%" y="533" width="0.0115%" height="15" fill="rgb(246,160,12)" fg:x="1342" fg:w="2"/><text x="7.9657%" y="543.50"></text></g><g><title>cv::FileNode::type() const (2 samples, 0.01%)</title><rect x="7.7157%" y="517" width="0.0115%" height="15" fill="rgb(247,166,0)" fg:x="1342" fg:w="2"/><text x="7.9657%" y="527.50"></text></g><g><title>cv::FileStorage::Impl::gets() (2 samples, 0.01%)</title><rect x="7.7272%" y="533" width="0.0115%" height="15" fill="rgb(249,219,21)" fg:x="1344" fg:w="2"/><text x="7.9772%" y="543.50"></text></g><g><title>_platform_memmove (9 samples, 0.05%)</title><rect x="7.8422%" y="517" width="0.0517%" height="15" fill="rgb(205,209,3)" fg:x="1364" fg:w="9"/><text x="8.0922%" y="527.50"></text></g><g><title>cv::XMLParser::parseTag(char*, std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt;&amp;, std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt;&amp;, int&amp;) (32 samples, 0.18%)</title><rect x="7.7445%" y="533" width="0.1840%" height="15" fill="rgb(243,44,1)" fg:x="1347" fg:w="32"/><text x="7.9945%" y="543.50"></text></g><g><title>std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt;::basic_string[abi:ue170006](char const*, unsigned long) (6 samples, 0.03%)</title><rect x="7.8940%" y="517" width="0.0345%" height="15" fill="rgb(206,159,16)" fg:x="1373" fg:w="6"/><text x="8.1440%" y="527.50"></text></g><g><title>_platform_memmove (4 samples, 0.02%)</title><rect x="7.9055%" y="501" width="0.0230%" height="15" fill="rgb(244,77,30)" fg:x="1375" fg:w="4"/><text x="8.1555%" y="511.50"></text></g><g><title>cv::FileNode::setValue(int, void const*, int) (16 samples, 0.09%)</title><rect x="8.2102%" y="517" width="0.0920%" height="15" fill="rgb(218,69,12)" fg:x="1428" fg:w="16"/><text x="8.4602%" y="527.50"></text></g><g><title>cv::FileStorage::Impl::reserveNodeSpace(cv::FileNode&amp;, unsigned long) (4 samples, 0.02%)</title><rect x="8.2792%" y="501" width="0.0230%" height="15" fill="rgb(212,87,7)" fg:x="1440" fg:w="4"/><text x="8.5292%" y="511.50"></text></g><g><title>cv::FileNode::type() const (15 samples, 0.09%)</title><rect x="8.3022%" y="517" width="0.0862%" height="15" fill="rgb(245,114,25)" fg:x="1444" fg:w="15"/><text x="8.5522%" y="527.50"></text></g><g><title>cv::FileStorage::Impl::getNodePtr(unsigned long, unsigned long) const (4 samples, 0.02%)</title><rect x="8.3654%" y="501" width="0.0230%" height="15" fill="rgb(210,61,42)" fg:x="1455" fg:w="4"/><text x="8.6154%" y="511.50"></text></g><g><title>cv::FileNode::isNamed() const (7 samples, 0.04%)</title><rect x="8.4862%" y="501" width="0.0402%" height="15" fill="rgb(211,52,33)" fg:x="1476" fg:w="7"/><text x="8.7362%" y="511.50"></text></g><g><title>cv::FileStorage::Impl::getNodePtr(unsigned long, unsigned long) const (3 samples, 0.02%)</title><rect x="8.5092%" y="485" width="0.0172%" height="15" fill="rgb(234,58,33)" fg:x="1480" fg:w="3"/><text x="8.7592%" y="495.50"></text></g><g><title>cv::FileNode::type() const (3 samples, 0.02%)</title><rect x="8.5264%" y="501" width="0.0172%" height="15" fill="rgb(220,115,36)" fg:x="1483" fg:w="3"/><text x="8.7764%" y="511.50"></text></g><g><title>cv::FileStorage::Impl::convertToCollection(int, cv::FileNode&amp;) (11 samples, 0.06%)</title><rect x="8.5437%" y="501" width="0.0632%" height="15" fill="rgb(243,153,54)" fg:x="1486" fg:w="11"/><text x="8.7937%" y="511.50"></text></g><g><title>cv::FileNode::type() const (8 samples, 0.05%)</title><rect x="8.5609%" y="485" width="0.0460%" height="15" fill="rgb(251,47,18)" fg:x="1489" fg:w="8"/><text x="8.8109%" y="495.50"></text></g><g><title>cv::FileStorage::Impl::getNodePtr(unsigned long, unsigned long) const (4 samples, 0.02%)</title><rect x="8.5839%" y="469" width="0.0230%" height="15" fill="rgb(242,102,42)" fg:x="1493" fg:w="4"/><text x="8.8339%" y="479.50"></text></g><g><title>cv::FileStorage::Impl::getNodePtr(unsigned long, unsigned long) const (2 samples, 0.01%)</title><rect x="8.6069%" y="501" width="0.0115%" height="15" fill="rgb(234,31,38)" fg:x="1497" fg:w="2"/><text x="8.8569%" y="511.50"></text></g><g><title>cv::FileStorage::Impl::reserveNodeSpace(cv::FileNode&amp;, unsigned long) (18 samples, 0.10%)</title><rect x="8.6184%" y="501" width="0.1035%" height="15" fill="rgb(221,117,51)" fg:x="1499" fg:w="18"/><text x="8.8684%" y="511.50"></text></g><g><title>cv::FileStorage::Impl::addNode(cv::FileNode&amp;, std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt; const&amp;, int, void const*, int) (77 samples, 0.44%)</title><rect x="8.3884%" y="517" width="0.4427%" height="15" fill="rgb(212,20,18)" fg:x="1459" fg:w="77"/><text x="8.6384%" y="527.50"></text></g><g><title>std::__1::__hash_const_iterator&lt;std::__1::__hash_node&lt;std::__1::__hash_value_type&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt;, unsigned int&gt;, void*&gt;*&gt; std::__1::__hash_table&lt;std::__1::__hash_value_type&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt;, unsigned int&gt;, std::__1::__unordered_map_hasher&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt;, std::__1::__hash_value_type&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt;, unsigned int&gt;, std::__1::hash&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt;&gt;, std::__1::equal_to&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt;&gt;, true&gt;, std::__1::__unordered_map_equal&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt;, std::__1::__hash_value_type&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt;, unsigned int&gt;, std::__1::equal_to&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt;&gt;, std::__1::hash&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt;&gt;, true&gt;, std::__1::allocator&lt;std::__1::__hash_value_type&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt;, unsigned int&gt;&gt;&gt;::find&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt;&gt;(std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt; const&amp;) const (19 samples, 0.11%)</title><rect x="8.7219%" y="501" width="0.1092%" height="15" fill="rgb(245,133,36)" fg:x="1517" fg:w="19"/><text x="8.9719%" y="511.50"></text></g><g><title>std::__1::equal_to&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt;&gt;::operator()[abi:ue170006](std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt; const&amp;, std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt; const&amp;) const (13 samples, 0.07%)</title><rect x="8.7564%" y="485" width="0.0747%" height="15" fill="rgb(212,6,19)" fg:x="1523" fg:w="13"/><text x="9.0064%" y="495.50"></text></g><g><title>cv::FileNode::isNamed() const (4 samples, 0.02%)</title><rect x="8.8771%" y="501" width="0.0230%" height="15" fill="rgb(218,1,36)" fg:x="1544" fg:w="4"/><text x="9.1271%" y="511.50"></text></g><g><title>cv::FileStorage::Impl::getNodePtr(unsigned long, unsigned long) const (3 samples, 0.02%)</title><rect x="8.8829%" y="485" width="0.0172%" height="15" fill="rgb(246,84,54)" fg:x="1545" fg:w="3"/><text x="9.1329%" y="495.50"></text></g><g><title>cv::FileNode::isNamed() const (6 samples, 0.03%)</title><rect x="8.9116%" y="485" width="0.0345%" height="15" fill="rgb(242,110,6)" fg:x="1550" fg:w="6"/><text x="9.1616%" y="495.50"></text></g><g><title>cv::FileStorage::Impl::getNodePtr(unsigned long, unsigned long) const (4 samples, 0.02%)</title><rect x="8.9231%" y="469" width="0.0230%" height="15" fill="rgb(214,47,5)" fg:x="1552" fg:w="4"/><text x="9.1731%" y="479.50"></text></g><g><title>cv::FileStorage::Impl::convertToCollection(int, cv::FileNode&amp;) (2 samples, 0.01%)</title><rect x="8.9519%" y="485" width="0.0115%" height="15" fill="rgb(218,159,25)" fg:x="1557" fg:w="2"/><text x="9.2019%" y="495.50"></text></g><g><title>cv::FileStorage::Impl::addNode(cv::FileNode&amp;, std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt; const&amp;, int, void const*, int) (18 samples, 0.10%)</title><rect x="8.9059%" y="501" width="0.1035%" height="15" fill="rgb(215,211,28)" fg:x="1549" fg:w="18"/><text x="9.1559%" y="511.50"></text></g><g><title>cv::FileStorage::Impl::reserveNodeSpace(cv::FileNode&amp;, unsigned long) (7 samples, 0.04%)</title><rect x="8.9691%" y="485" width="0.0402%" height="15" fill="rgb(238,59,32)" fg:x="1560" fg:w="7"/><text x="9.2191%" y="495.50"></text></g><g><title>cv::FileStorage::Impl::getNodePtr(unsigned long, unsigned long) const (2 samples, 0.01%)</title><rect x="9.0094%" y="501" width="0.0115%" height="15" fill="rgb(226,82,3)" fg:x="1567" fg:w="2"/><text x="9.2594%" y="511.50"></text></g><g><title>cv::FileStorage::Impl::convertToCollection(int, cv::FileNode&amp;) (38 samples, 0.22%)</title><rect x="8.8311%" y="517" width="0.2185%" height="15" fill="rgb(240,164,32)" fg:x="1536" fg:w="38"/><text x="9.0811%" y="527.50"></text></g><g><title>cv::FileStorage::Impl::reserveNodeSpace(cv::FileNode&amp;, unsigned long) (5 samples, 0.03%)</title><rect x="9.0209%" y="501" width="0.0287%" height="15" fill="rgb(232,46,7)" fg:x="1569" fg:w="5"/><text x="9.2709%" y="511.50"></text></g><g><title>cv::FileStorage::Impl::finalizeCollection(cv::FileNode&amp;) (13 samples, 0.07%)</title><rect x="9.0496%" y="517" width="0.0747%" height="15" fill="rgb(229,129,53)" fg:x="1574" fg:w="13"/><text x="9.2996%" y="527.50"></text></g><g><title>cv::FileNode::type() const (5 samples, 0.03%)</title><rect x="9.0956%" y="501" width="0.0287%" height="15" fill="rgb(234,188,29)" fg:x="1582" fg:w="5"/><text x="9.3456%" y="511.50"></text></g><g><title>cv::FileStorage::Impl::getNodePtr(unsigned long, unsigned long) const (3 samples, 0.02%)</title><rect x="9.1071%" y="485" width="0.0172%" height="15" fill="rgb(246,141,4)" fg:x="1584" fg:w="3"/><text x="9.3571%" y="495.50"></text></g><g><title>cv::FileStorage::Impl::reserveNodeSpace(cv::FileNode&amp;, unsigned long) (6 samples, 0.03%)</title><rect x="9.1359%" y="517" width="0.0345%" height="15" fill="rgb(229,23,39)" fg:x="1589" fg:w="6"/><text x="9.3859%" y="527.50"></text></g><g><title>__ulock_wait2 (4 samples, 0.02%)</title><rect x="9.2393%" y="437" width="0.0230%" height="15" fill="rgb(206,12,3)" fg:x="1607" fg:w="4"/><text x="9.4893%" y="447.50"></text></g><g><title>_os_unfair_lock_lock_slow (2 samples, 0.01%)</title><rect x="9.2681%" y="437" width="0.0115%" height="15" fill="rgb(252,226,20)" fg:x="1612" fg:w="2"/><text x="9.5181%" y="447.50"></text></g><g><title>localeconv_l (13 samples, 0.07%)</title><rect x="9.2336%" y="453" width="0.0747%" height="15" fill="rgb(216,123,35)" fg:x="1606" fg:w="13"/><text x="9.4836%" y="463.50"></text></g><g><title>os_unfair_lock_unlock (4 samples, 0.02%)</title><rect x="9.2853%" y="437" width="0.0230%" height="15" fill="rgb(212,68,40)" fg:x="1615" fg:w="4"/><text x="9.5353%" y="447.50"></text></g><g><title>cv::FileStorage::Impl::strtod(char*, char**) (31 samples, 0.18%)</title><rect x="9.1704%" y="517" width="0.1782%" height="15" fill="rgb(254,125,32)" fg:x="1595" fg:w="31"/><text x="9.4204%" y="527.50"></text></g><g><title>strtod (28 samples, 0.16%)</title><rect x="9.1876%" y="501" width="0.1610%" height="15" fill="rgb(253,97,22)" fg:x="1598" fg:w="28"/><text x="9.4376%" y="511.50"></text></g><g><title>_ffpp_strtoencf64_l (28 samples, 0.16%)</title><rect x="9.1876%" y="485" width="0.1610%" height="15" fill="rgb(241,101,14)" fg:x="1598" fg:w="28"/><text x="9.4376%" y="495.50"></text></g><g><title>fastParse64 (25 samples, 0.14%)</title><rect x="9.2049%" y="469" width="0.1437%" height="15" fill="rgb(238,103,29)" fg:x="1601" fg:w="25"/><text x="9.4549%" y="479.50"></text></g><g><title>os_unfair_lock_lock (7 samples, 0.04%)</title><rect x="9.3083%" y="453" width="0.0402%" height="15" fill="rgb(233,195,47)" fg:x="1619" fg:w="7"/><text x="9.5583%" y="463.50"></text></g><g><title>_platform_memmove (3 samples, 0.02%)</title><rect x="9.5268%" y="501" width="0.0172%" height="15" fill="rgb(246,218,30)" fg:x="1657" fg:w="3"/><text x="9.7768%" y="511.50"></text></g><g><title>std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt;::basic_string[abi:ue170006](char const*, unsigned long) (3 samples, 0.02%)</title><rect x="9.5441%" y="501" width="0.0172%" height="15" fill="rgb(219,145,47)" fg:x="1660" fg:w="3"/><text x="9.7941%" y="511.50"></text></g><g><title>cv::XMLParser::parseTag(char*, std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt;&amp;, std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt;&amp;, int&amp;) (38 samples, 0.22%)</title><rect x="9.3486%" y="517" width="0.2185%" height="15" fill="rgb(243,12,26)" fg:x="1626" fg:w="38"/><text x="9.5986%" y="527.50"></text></g><g><title>cv::FileNode::setValue(int, void const*, int) (8 samples, 0.05%)</title><rect x="9.6763%" y="501" width="0.0460%" height="15" fill="rgb(214,87,16)" fg:x="1683" fg:w="8"/><text x="9.9263%" y="511.50"></text></g><g><title>cv::FileNode::type() const (14 samples, 0.08%)</title><rect x="9.7223%" y="501" width="0.0805%" height="15" fill="rgb(208,99,42)" fg:x="1691" fg:w="14"/><text x="9.9723%" y="511.50"></text></g><g><title>cv::FileStorage::Impl::getNodePtr(unsigned long, unsigned long) const (5 samples, 0.03%)</title><rect x="9.7740%" y="485" width="0.0287%" height="15" fill="rgb(253,99,2)" fg:x="1700" fg:w="5"/><text x="10.0240%" y="495.50"></text></g><g><title>cv::FileNode::isNamed() const (2 samples, 0.01%)</title><rect x="9.8373%" y="485" width="0.0115%" height="15" fill="rgb(220,168,23)" fg:x="1711" fg:w="2"/><text x="10.0873%" y="495.50"></text></g><g><title>cv::FileNode::type() const (2 samples, 0.01%)</title><rect x="9.8488%" y="485" width="0.0115%" height="15" fill="rgb(242,38,24)" fg:x="1713" fg:w="2"/><text x="10.0988%" y="495.50"></text></g><g><title>cv::FileStorage::Impl::getNodePtr(unsigned long, unsigned long) const (2 samples, 0.01%)</title><rect x="9.8488%" y="469" width="0.0115%" height="15" fill="rgb(225,182,9)" fg:x="1713" fg:w="2"/><text x="10.0988%" y="479.50"></text></g><g><title>cv::FileStorage::Impl::convertToCollection(int, cv::FileNode&amp;) (4 samples, 0.02%)</title><rect x="9.8603%" y="485" width="0.0230%" height="15" fill="rgb(243,178,37)" fg:x="1715" fg:w="4"/><text x="10.1103%" y="495.50"></text></g><g><title>cv::FileNode::type() const (3 samples, 0.02%)</title><rect x="9.8660%" y="469" width="0.0172%" height="15" fill="rgb(232,139,19)" fg:x="1716" fg:w="3"/><text x="10.1160%" y="479.50"></text></g><g><title>cv::FileStorage::Impl::getNodePtr(unsigned long, unsigned long) const (2 samples, 0.01%)</title><rect x="9.8718%" y="453" width="0.0115%" height="15" fill="rgb(225,201,24)" fg:x="1717" fg:w="2"/><text x="10.1218%" y="463.50"></text></g><g><title>cv::FileStorage::Impl::getNodePtr(unsigned long, unsigned long) const (2 samples, 0.01%)</title><rect x="9.8833%" y="485" width="0.0115%" height="15" fill="rgb(221,47,46)" fg:x="1719" fg:w="2"/><text x="10.1333%" y="495.50"></text></g><g><title>cv::FileStorage::Impl::addNode(cv::FileNode&amp;, std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt; const&amp;, int, void const*, int) (21 samples, 0.12%)</title><rect x="9.8028%" y="501" width="0.1207%" height="15" fill="rgb(249,23,13)" fg:x="1705" fg:w="21"/><text x="10.0528%" y="511.50"></text></g><g><title>cv::FileStorage::Impl::reserveNodeSpace(cv::FileNode&amp;, unsigned long) (5 samples, 0.03%)</title><rect x="9.8948%" y="485" width="0.0287%" height="15" fill="rgb(219,9,5)" fg:x="1721" fg:w="5"/><text x="10.1448%" y="495.50"></text></g><g><title>cv::FileNode::type() const (2 samples, 0.01%)</title><rect x="9.9638%" y="485" width="0.0115%" height="15" fill="rgb(254,171,16)" fg:x="1733" fg:w="2"/><text x="10.2138%" y="495.50"></text></g><g><title>cv::FileNode::setValue(int, void const*, int) (6 samples, 0.03%)</title><rect x="9.9983%" y="469" width="0.0345%" height="15" fill="rgb(230,171,20)" fg:x="1739" fg:w="6"/><text x="10.2483%" y="479.50"></text></g><g><title>cv::FileStorage::Impl::reserveNodeSpace(cv::FileNode&amp;, unsigned long) (2 samples, 0.01%)</title><rect x="10.0213%" y="453" width="0.0115%" height="15" fill="rgb(210,71,41)" fg:x="1743" fg:w="2"/><text x="10.2713%" y="463.50"></text></g><g><title>cv::FileStorage::Impl::addNode(cv::FileNode&amp;, std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt; const&amp;, int, void const*, int) (15 samples, 0.09%)</title><rect x="9.9753%" y="485" width="0.0862%" height="15" fill="rgb(206,173,20)" fg:x="1735" fg:w="15"/><text x="10.2253%" y="495.50"></text></g><g><title>cv::FileStorage::Impl::reserveNodeSpace(cv::FileNode&amp;, unsigned long) (3 samples, 0.02%)</title><rect x="10.0443%" y="469" width="0.0172%" height="15" fill="rgb(233,88,34)" fg:x="1747" fg:w="3"/><text x="10.2943%" y="479.50"></text></g><g><title>cv::FileStorage::Impl::convertToCollection(int, cv::FileNode&amp;) (27 samples, 0.16%)</title><rect x="9.9235%" y="501" width="0.1552%" height="15" fill="rgb(223,209,46)" fg:x="1726" fg:w="27"/><text x="10.1735%" y="511.50"></text></g><g><title>cv::FileStorage::Impl::reserveNodeSpace(cv::FileNode&amp;, unsigned long) (2 samples, 0.01%)</title><rect x="10.0673%" y="485" width="0.0115%" height="15" fill="rgb(250,43,18)" fg:x="1751" fg:w="2"/><text x="10.3173%" y="495.50"></text></g><g><title>cv::FileNode::type() const (2 samples, 0.01%)</title><rect x="10.1075%" y="485" width="0.0115%" height="15" fill="rgb(208,13,10)" fg:x="1758" fg:w="2"/><text x="10.3575%" y="495.50"></text></g><g><title>cv::FileStorage::Impl::getNodePtr(unsigned long, unsigned long) const (2 samples, 0.01%)</title><rect x="10.1075%" y="469" width="0.0115%" height="15" fill="rgb(212,200,36)" fg:x="1758" fg:w="2"/><text x="10.3575%" y="479.50"></text></g><g><title>cv::FileStorage::Impl::finalizeCollection(cv::FileNode&amp;) (9 samples, 0.05%)</title><rect x="10.0788%" y="501" width="0.0517%" height="15" fill="rgb(225,90,30)" fg:x="1753" fg:w="9"/><text x="10.3288%" y="511.50"></text></g><g><title>cv::FileStorage::Impl::getNodePtr(unsigned long, unsigned long) const (2 samples, 0.01%)</title><rect x="10.1190%" y="485" width="0.0115%" height="15" fill="rgb(236,182,39)" fg:x="1760" fg:w="2"/><text x="10.3690%" y="495.50"></text></g><g><title>__ulock_wait2 (13 samples, 0.07%)</title><rect x="10.4122%" y="421" width="0.0747%" height="15" fill="rgb(212,144,35)" fg:x="1811" fg:w="13"/><text x="10.6622%" y="431.50"></text></g><g><title>__ulock_wake (9 samples, 0.05%)</title><rect x="10.4870%" y="421" width="0.0517%" height="15" fill="rgb(228,63,44)" fg:x="1824" fg:w="9"/><text x="10.7370%" y="431.50"></text></g><g><title>_os_unfair_lock_lock_slow (10 samples, 0.06%)</title><rect x="10.5387%" y="421" width="0.0575%" height="15" fill="rgb(228,109,6)" fg:x="1833" fg:w="10"/><text x="10.7887%" y="431.50"></text></g><g><title>os_unfair_lock_lock (3 samples, 0.02%)</title><rect x="10.6020%" y="421" width="0.0172%" height="15" fill="rgb(238,117,24)" fg:x="1844" fg:w="3"/><text x="10.8520%" y="431.50"></text></g><g><title>localeconv_l (39 samples, 0.22%)</title><rect x="10.4065%" y="437" width="0.2242%" height="15" fill="rgb(242,26,26)" fg:x="1810" fg:w="39"/><text x="10.6565%" y="447.50"></text></g><g><title>os_unfair_lock_unlock (2 samples, 0.01%)</title><rect x="10.6192%" y="421" width="0.0115%" height="15" fill="rgb(221,92,48)" fg:x="1847" fg:w="2"/><text x="10.8692%" y="431.50"></text></g><g><title>cv::FileStorage::Impl::strtod(char*, char**) (97 samples, 0.56%)</title><rect x="10.1420%" y="501" width="0.5577%" height="15" fill="rgb(209,209,32)" fg:x="1764" fg:w="97"/><text x="10.3920%" y="511.50"></text></g><g><title>strtod (94 samples, 0.54%)</title><rect x="10.1593%" y="485" width="0.5404%" height="15" fill="rgb(221,70,22)" fg:x="1767" fg:w="94"/><text x="10.4093%" y="495.50"></text></g><g><title>_ffpp_strtoencf64_l (93 samples, 0.53%)</title><rect x="10.1650%" y="469" width="0.5347%" height="15" fill="rgb(248,145,5)" fg:x="1768" fg:w="93"/><text x="10.4150%" y="479.50"></text></g><g><title>fastParse64 (84 samples, 0.48%)</title><rect x="10.2168%" y="453" width="0.4830%" height="15" fill="rgb(226,116,26)" fg:x="1777" fg:w="84"/><text x="10.4668%" y="463.50"></text></g><g><title>os_unfair_lock_lock (12 samples, 0.07%)</title><rect x="10.6307%" y="437" width="0.0690%" height="15" fill="rgb(244,5,17)" fg:x="1849" fg:w="12"/><text x="10.8807%" y="447.50"></text></g><g><title>DYLD-STUB$$strlen (2 samples, 0.01%)</title><rect x="10.7457%" y="469" width="0.0115%" height="15" fill="rgb(252,159,33)" fg:x="1869" fg:w="2"/><text x="10.9957%" y="479.50"></text></g><g><title>DYLD-STUB$$fgets (2 samples, 0.01%)</title><rect x="10.7744%" y="453" width="0.0115%" height="15" fill="rgb(206,71,0)" fg:x="1874" fg:w="2"/><text x="11.0244%" y="463.50"></text></g><g><title>__read_nocancel (3 samples, 0.02%)</title><rect x="10.8319%" y="405" width="0.0172%" height="15" fill="rgb(233,118,54)" fg:x="1884" fg:w="3"/><text x="11.0819%" y="415.50"></text></g><g><title>__srefill1 (16 samples, 0.09%)</title><rect x="10.8319%" y="437" width="0.0920%" height="15" fill="rgb(234,83,48)" fg:x="1884" fg:w="16"/><text x="11.0819%" y="447.50"></text></g><g><title>_sread (16 samples, 0.09%)</title><rect x="10.8319%" y="421" width="0.0920%" height="15" fill="rgb(228,3,54)" fg:x="1884" fg:w="16"/><text x="11.0819%" y="431.50"></text></g><g><title>__sread (13 samples, 0.07%)</title><rect x="10.8492%" y="405" width="0.0747%" height="15" fill="rgb(226,155,13)" fg:x="1887" fg:w="13"/><text x="11.0992%" y="415.50"></text></g><g><title>__read_nocancel (13 samples, 0.07%)</title><rect x="10.8492%" y="389" width="0.0747%" height="15" fill="rgb(241,28,37)" fg:x="1887" fg:w="13"/><text x="11.0992%" y="399.50"></text></g><g><title>_platform_memchr (6 samples, 0.03%)</title><rect x="10.9239%" y="437" width="0.0345%" height="15" fill="rgb(233,93,10)" fg:x="1900" fg:w="6"/><text x="11.1739%" y="447.50"></text></g><g><title>flockfile (5 samples, 0.03%)</title><rect x="10.9584%" y="437" width="0.0287%" height="15" fill="rgb(225,113,19)" fg:x="1906" fg:w="5"/><text x="11.2084%" y="447.50"></text></g><g><title>pthread_mutex_lock (3 samples, 0.02%)</title><rect x="10.9699%" y="421" width="0.0172%" height="15" fill="rgb(241,2,18)" fg:x="1908" fg:w="3"/><text x="11.2199%" y="431.50"></text></g><g><title>cv::XMLParser::skipSpaces(char*, int) (56 samples, 0.32%)</title><rect x="10.6997%" y="501" width="0.3220%" height="15" fill="rgb(228,207,21)" fg:x="1861" fg:w="56"/><text x="10.9497%" y="511.50"></text></g><g><title>cv::FileStorage::Impl::gets() (49 samples, 0.28%)</title><rect x="10.7400%" y="485" width="0.2817%" height="15" fill="rgb(213,211,35)" fg:x="1868" fg:w="49"/><text x="10.9900%" y="495.50"></text></g><g><title>cv::FileStorage::Impl::gets(unsigned long) (45 samples, 0.26%)</title><rect x="10.7630%" y="469" width="0.2587%" height="15" fill="rgb(209,83,10)" fg:x="1872" fg:w="45"/><text x="11.0130%" y="479.50"></text></g><g><title>fgets (39 samples, 0.22%)</title><rect x="10.7974%" y="453" width="0.2242%" height="15" fill="rgb(209,164,1)" fg:x="1878" fg:w="39"/><text x="11.0474%" y="463.50"></text></g><g><title>funlockfile (6 samples, 0.03%)</title><rect x="10.9872%" y="437" width="0.0345%" height="15" fill="rgb(213,184,43)" fg:x="1911" fg:w="6"/><text x="11.2372%" y="447.50"></text></g><g><title>_pthread_mutex_firstfit_unlock_slow (5 samples, 0.03%)</title><rect x="10.9929%" y="421" width="0.0287%" height="15" fill="rgb(231,61,34)" fg:x="1912" fg:w="5"/><text x="11.2429%" y="431.50"></text></g><g><title>cv::XMLParser::parseValue(char*, cv::FileNode&amp;) (259 samples, 1.49%)</title><rect x="9.5671%" y="517" width="1.4891%" height="15" fill="rgb(235,75,3)" fg:x="1664" fg:w="259"/><text x="9.8171%" y="527.50"></text></g><g><title>strtoll_l (6 samples, 0.03%)</title><rect x="11.0217%" y="501" width="0.0345%" height="15" fill="rgb(220,106,47)" fg:x="1917" fg:w="6"/><text x="11.2717%" y="511.50"></text></g><g><title>_platform_strlen (3 samples, 0.02%)</title><rect x="11.2632%" y="485" width="0.0172%" height="15" fill="rgb(210,196,33)" fg:x="1959" fg:w="3"/><text x="11.5132%" y="495.50"></text></g><g><title>_platform_strlen (2 samples, 0.01%)</title><rect x="11.3264%" y="469" width="0.0115%" height="15" fill="rgb(229,154,42)" fg:x="1970" fg:w="2"/><text x="11.5764%" y="479.50"></text></g><g><title>DYLD-STUB$$__error (3 samples, 0.02%)</title><rect x="11.3551%" y="453" width="0.0172%" height="15" fill="rgb(228,114,26)" fg:x="1975" fg:w="3"/><text x="11.6051%" y="463.50"></text></g><g><title>__read_nocancel (7 samples, 0.04%)</title><rect x="11.3724%" y="421" width="0.0402%" height="15" fill="rgb(208,144,1)" fg:x="1978" fg:w="7"/><text x="11.6224%" y="431.50"></text></g><g><title>__srefill1 (14 samples, 0.08%)</title><rect x="11.3724%" y="453" width="0.0805%" height="15" fill="rgb(239,112,37)" fg:x="1978" fg:w="14"/><text x="11.6224%" y="463.50"></text></g><g><title>_sread (14 samples, 0.08%)</title><rect x="11.3724%" y="437" width="0.0805%" height="15" fill="rgb(210,96,50)" fg:x="1978" fg:w="14"/><text x="11.6224%" y="447.50"></text></g><g><title>__sread (7 samples, 0.04%)</title><rect x="11.4126%" y="421" width="0.0402%" height="15" fill="rgb(222,178,2)" fg:x="1985" fg:w="7"/><text x="11.6626%" y="431.50"></text></g><g><title>__read_nocancel (7 samples, 0.04%)</title><rect x="11.4126%" y="405" width="0.0402%" height="15" fill="rgb(226,74,18)" fg:x="1985" fg:w="7"/><text x="11.6626%" y="415.50"></text></g><g><title>_platform_memchr (6 samples, 0.03%)</title><rect x="11.4529%" y="453" width="0.0345%" height="15" fill="rgb(225,67,54)" fg:x="1992" fg:w="6"/><text x="11.7029%" y="463.50"></text></g><g><title>_platform_memmove (3 samples, 0.02%)</title><rect x="11.4874%" y="453" width="0.0172%" height="15" fill="rgb(251,92,32)" fg:x="1998" fg:w="3"/><text x="11.7374%" y="463.50"></text></g><g><title>_pthread_mutex_lock_init_slow (2 samples, 0.01%)</title><rect x="11.5046%" y="453" width="0.0115%" height="15" fill="rgb(228,149,22)" fg:x="2001" fg:w="2"/><text x="11.7546%" y="463.50"></text></g><g><title>_pthread_mutex_firstfit_lock_slow (2 samples, 0.01%)</title><rect x="11.5276%" y="437" width="0.0115%" height="15" fill="rgb(243,54,13)" fg:x="2005" fg:w="2"/><text x="11.7776%" y="447.50"></text></g><g><title>_pthread_mutex_lock_init_slow (4 samples, 0.02%)</title><rect x="11.5391%" y="437" width="0.0230%" height="15" fill="rgb(243,180,28)" fg:x="2007" fg:w="4"/><text x="11.7891%" y="447.50"></text></g><g><title>flockfile (10 samples, 0.06%)</title><rect x="11.5161%" y="453" width="0.0575%" height="15" fill="rgb(208,167,24)" fg:x="2003" fg:w="10"/><text x="11.7661%" y="463.50"></text></g><g><title>pthread_mutex_lock (2 samples, 0.01%)</title><rect x="11.5621%" y="437" width="0.0115%" height="15" fill="rgb(245,73,45)" fg:x="2011" fg:w="2"/><text x="11.8121%" y="447.50"></text></g><g><title>_pthread_mutex_firstfit_unlock_slow (4 samples, 0.02%)</title><rect x="11.5736%" y="437" width="0.0230%" height="15" fill="rgb(237,203,48)" fg:x="2013" fg:w="4"/><text x="11.8236%" y="447.50"></text></g><g><title>fgets (48 samples, 0.28%)</title><rect x="11.3379%" y="469" width="0.2760%" height="15" fill="rgb(211,197,16)" fg:x="1972" fg:w="48"/><text x="11.5879%" y="479.50"></text></g><g><title>funlockfile (7 samples, 0.04%)</title><rect x="11.5736%" y="453" width="0.0402%" height="15" fill="rgb(243,99,51)" fg:x="2013" fg:w="7"/><text x="11.8236%" y="463.50"></text></g><g><title>pthread_mutex_unlock (2 samples, 0.01%)</title><rect x="11.6024%" y="437" width="0.0115%" height="15" fill="rgb(215,123,29)" fg:x="2018" fg:w="2"/><text x="11.8524%" y="447.50"></text></g><g><title>cv::FileStorage::Impl::gets(unsigned long) (59 samples, 0.34%)</title><rect x="11.2804%" y="485" width="0.3392%" height="15" fill="rgb(239,186,37)" fg:x="1962" fg:w="59"/><text x="11.5304%" y="495.50"></text></g><g><title>cv::XMLParser::skipSpaces(char*, int) (99 samples, 0.57%)</title><rect x="11.0562%" y="517" width="0.5692%" height="15" fill="rgb(252,136,39)" fg:x="1923" fg:w="99"/><text x="11.3062%" y="527.50"></text></g><g><title>cv::FileStorage::Impl::gets() (72 samples, 0.41%)</title><rect x="11.2114%" y="501" width="0.4140%" height="15" fill="rgb(223,213,32)" fg:x="1950" fg:w="72"/><text x="11.4614%" y="511.50"></text></g><g><title>cv::XMLParser::parseValue(char*, cv::FileNode&amp;) (664 samples, 3.82%)</title><rect x="7.9285%" y="533" width="3.8176%" height="15" fill="rgb(233,115,5)" fg:x="1379" fg:w="664"/><text x="8.1785%" y="543.50">cv::..</text></g><g><title>strtoll_l (20 samples, 0.11%)</title><rect x="11.6311%" y="517" width="0.1150%" height="15" fill="rgb(207,226,44)" fg:x="2023" fg:w="20"/><text x="11.8811%" y="527.50"></text></g><g><title>_platform_strlen (5 samples, 0.03%)</title><rect x="11.8841%" y="485" width="0.0287%" height="15" fill="rgb(208,126,0)" fg:x="2067" fg:w="5"/><text x="12.1341%" y="495.50"></text></g><g><title>__error (2 samples, 0.01%)</title><rect x="11.9761%" y="469" width="0.0115%" height="15" fill="rgb(244,66,21)" fg:x="2083" fg:w="2"/><text x="12.2261%" y="479.50"></text></g><g><title>__srefill1 (4 samples, 0.02%)</title><rect x="11.9876%" y="469" width="0.0230%" height="15" fill="rgb(222,97,12)" fg:x="2085" fg:w="4"/><text x="12.2376%" y="479.50"></text></g><g><title>_sread (4 samples, 0.02%)</title><rect x="11.9876%" y="453" width="0.0230%" height="15" fill="rgb(219,213,19)" fg:x="2085" fg:w="4"/><text x="12.2376%" y="463.50"></text></g><g><title>__sread (3 samples, 0.02%)</title><rect x="11.9933%" y="437" width="0.0172%" height="15" fill="rgb(252,169,30)" fg:x="2086" fg:w="3"/><text x="12.2433%" y="447.50"></text></g><g><title>__read_nocancel (3 samples, 0.02%)</title><rect x="11.9933%" y="421" width="0.0172%" height="15" fill="rgb(206,32,51)" fg:x="2086" fg:w="3"/><text x="12.2433%" y="431.50"></text></g><g><title>_platform_memchr (2 samples, 0.01%)</title><rect x="12.0106%" y="469" width="0.0115%" height="15" fill="rgb(250,172,42)" fg:x="2089" fg:w="2"/><text x="12.2606%" y="479.50"></text></g><g><title>_platform_memmove (6 samples, 0.03%)</title><rect x="12.0221%" y="469" width="0.0345%" height="15" fill="rgb(209,34,43)" fg:x="2091" fg:w="6"/><text x="12.2721%" y="479.50"></text></g><g><title>flockfile (6 samples, 0.03%)</title><rect x="12.0566%" y="469" width="0.0345%" height="15" fill="rgb(223,11,35)" fg:x="2097" fg:w="6"/><text x="12.3066%" y="479.50"></text></g><g><title>pthread_mutex_lock (2 samples, 0.01%)</title><rect x="12.0796%" y="453" width="0.0115%" height="15" fill="rgb(251,219,26)" fg:x="2101" fg:w="2"/><text x="12.3296%" y="463.50"></text></g><g><title>DYLD-STUB$$__error (2 samples, 0.01%)</title><rect x="12.0911%" y="453" width="0.0115%" height="15" fill="rgb(231,119,3)" fg:x="2103" fg:w="2"/><text x="12.3411%" y="463.50"></text></g><g><title>_pthread_mutex_unlock_init_slow (2 samples, 0.01%)</title><rect x="12.1083%" y="453" width="0.0115%" height="15" fill="rgb(216,97,11)" fg:x="2106" fg:w="2"/><text x="12.3583%" y="463.50"></text></g><g><title>cv::FileStorage::Impl::gets(unsigned long) (50 samples, 0.29%)</title><rect x="11.8381%" y="501" width="0.2875%" height="15" fill="rgb(223,59,9)" fg:x="2059" fg:w="50"/><text x="12.0881%" y="511.50"></text></g><g><title>fgets (37 samples, 0.21%)</title><rect x="11.9128%" y="485" width="0.2127%" height="15" fill="rgb(233,93,31)" fg:x="2072" fg:w="37"/><text x="12.1628%" y="495.50"></text></g><g><title>funlockfile (6 samples, 0.03%)</title><rect x="12.0911%" y="469" width="0.0345%" height="15" fill="rgb(239,81,33)" fg:x="2103" fg:w="6"/><text x="12.3411%" y="479.50"></text></g><g><title>cv::FileStorage::Impl::gets() (56 samples, 0.32%)</title><rect x="11.8151%" y="517" width="0.3220%" height="15" fill="rgb(213,120,34)" fg:x="2055" fg:w="56"/><text x="12.0651%" y="527.50"></text></g><g><title>fgets (2 samples, 0.01%)</title><rect x="12.1256%" y="501" width="0.0115%" height="15" fill="rgb(243,49,53)" fg:x="2109" fg:w="2"/><text x="12.3756%" y="511.50"></text></g><g><title>cv::XMLParser::skipSpaces(char*, int) (70 samples, 0.40%)</title><rect x="11.7461%" y="533" width="0.4025%" height="15" fill="rgb(247,216,33)" fg:x="2043" fg:w="70"/><text x="11.9961%" y="543.50"></text></g><g><title>cv::FileStorage::Impl::gets(unsigned long) (2 samples, 0.01%)</title><rect x="12.1371%" y="517" width="0.0115%" height="15" fill="rgb(226,26,14)" fg:x="2111" fg:w="2"/><text x="12.3871%" y="527.50"></text></g><g><title>std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt;::basic_string[abi:ue170006](char const*, unsigned long) (2 samples, 0.01%)</title><rect x="12.1486%" y="533" width="0.0115%" height="15" fill="rgb(215,49,53)" fg:x="2113" fg:w="2"/><text x="12.3986%" y="543.50"></text></g><g><title>cv::XMLParser::parseValue(char*, cv::FileNode&amp;) (815 samples, 4.69%)</title><rect x="7.4915%" y="549" width="4.6858%" height="15" fill="rgb(245,162,40)" fg:x="1303" fg:w="815"/><text x="7.7415%" y="559.50">cv::X..</text></g><g><title>strtoll_l (2 samples, 0.01%)</title><rect x="12.1658%" y="533" width="0.0115%" height="15" fill="rgb(229,68,17)" fg:x="2116" fg:w="2"/><text x="12.4158%" y="543.50"></text></g><g><title>_platform_strlen (4 samples, 0.02%)</title><rect x="12.2118%" y="501" width="0.0230%" height="15" fill="rgb(213,182,10)" fg:x="2124" fg:w="4"/><text x="12.4618%" y="511.50"></text></g><g><title>flockfile (2 samples, 0.01%)</title><rect x="12.2693%" y="485" width="0.0115%" height="15" fill="rgb(245,125,30)" fg:x="2134" fg:w="2"/><text x="12.5193%" y="495.50"></text></g><g><title>_pthread_mutex_firstfit_unlock_slow (2 samples, 0.01%)</title><rect x="12.2866%" y="469" width="0.0115%" height="15" fill="rgb(232,202,2)" fg:x="2137" fg:w="2"/><text x="12.5366%" y="479.50"></text></g><g><title>cv::XMLParser::parseValue(char*, cv::FileNode&amp;) (875 samples, 5.03%)</title><rect x="7.2730%" y="565" width="5.0308%" height="15" fill="rgb(237,140,51)" fg:x="1265" fg:w="875"/><text x="7.5230%" y="575.50">cv::XM..</text></g><g><title>cv::XMLParser::skipSpaces(char*, int) (22 samples, 0.13%)</title><rect x="12.1773%" y="549" width="0.1265%" height="15" fill="rgb(236,157,25)" fg:x="2118" fg:w="22"/><text x="12.4273%" y="559.50"></text></g><g><title>cv::FileStorage::Impl::gets() (20 samples, 0.11%)</title><rect x="12.1888%" y="533" width="0.1150%" height="15" fill="rgb(219,209,0)" fg:x="2120" fg:w="20"/><text x="12.4388%" y="543.50"></text></g><g><title>cv::FileStorage::Impl::gets(unsigned long) (19 samples, 0.11%)</title><rect x="12.1946%" y="517" width="0.1092%" height="15" fill="rgb(240,116,54)" fg:x="2121" fg:w="19"/><text x="12.4446%" y="527.50"></text></g><g><title>fgets (12 samples, 0.07%)</title><rect x="12.2348%" y="501" width="0.0690%" height="15" fill="rgb(216,10,36)" fg:x="2128" fg:w="12"/><text x="12.4848%" y="511.50"></text></g><g><title>funlockfile (4 samples, 0.02%)</title><rect x="12.2808%" y="485" width="0.0230%" height="15" fill="rgb(222,72,44)" fg:x="2136" fg:w="4"/><text x="12.5308%" y="495.50"></text></g><g><title>_platform_memmove (4 samples, 0.02%)</title><rect x="12.3555%" y="517" width="0.0230%" height="15" fill="rgb(232,159,9)" fg:x="2149" fg:w="4"/><text x="12.6055%" y="527.50"></text></g><g><title>_platform_memmove (2 samples, 0.01%)</title><rect x="12.4188%" y="501" width="0.0115%" height="15" fill="rgb(210,39,32)" fg:x="2160" fg:w="2"/><text x="12.6688%" y="511.50"></text></g><g><title>flockfile (2 samples, 0.01%)</title><rect x="12.4418%" y="501" width="0.0115%" height="15" fill="rgb(216,194,45)" fg:x="2164" fg:w="2"/><text x="12.6918%" y="511.50"></text></g><g><title>cv::XMLParser::skipSpaces(char*, int) (27 samples, 0.16%)</title><rect x="12.3038%" y="565" width="0.1552%" height="15" fill="rgb(218,18,35)" fg:x="2140" fg:w="27"/><text x="12.5538%" y="575.50"></text></g><g><title>cv::FileStorage::Impl::gets() (25 samples, 0.14%)</title><rect x="12.3153%" y="549" width="0.1437%" height="15" fill="rgb(207,83,51)" fg:x="2142" fg:w="25"/><text x="12.5653%" y="559.50"></text></g><g><title>cv::FileStorage::Impl::gets(unsigned long) (20 samples, 0.11%)</title><rect x="12.3440%" y="533" width="0.1150%" height="15" fill="rgb(225,63,43)" fg:x="2147" fg:w="20"/><text x="12.5940%" y="543.50"></text></g><g><title>fgets (14 samples, 0.08%)</title><rect x="12.3785%" y="517" width="0.0805%" height="15" fill="rgb(207,57,36)" fg:x="2153" fg:w="14"/><text x="12.6285%" y="527.50"></text></g><g><title>cv::XMLParser::parseValue(char*, cv::FileNode&amp;) (923 samples, 5.31%)</title><rect x="7.1638%" y="581" width="5.3067%" height="15" fill="rgb(216,99,33)" fg:x="1246" fg:w="923"/><text x="7.4138%" y="591.50">cv::XM..</text></g><g><title>std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt;::basic_string[abi:ue170006](char const*, unsigned long) (2 samples, 0.01%)</title><rect x="12.4590%" y="565" width="0.0115%" height="15" fill="rgb(225,42,16)" fg:x="2167" fg:w="2"/><text x="12.7090%" y="575.50"></text></g><g><title>cv::XMLParser::parse(char*) (927 samples, 5.33%)</title><rect x="7.1581%" y="629" width="5.3297%" height="15" fill="rgb(220,201,45)" fg:x="1245" fg:w="927"/><text x="7.4081%" y="639.50">cv::XML..</text></g><g><title>cv::XMLParser::parseValue(char*, cv::FileNode&amp;) (926 samples, 5.32%)</title><rect x="7.1638%" y="613" width="5.3240%" height="15" fill="rgb(225,33,4)" fg:x="1246" fg:w="926"/><text x="7.4138%" y="623.50">cv::XML..</text></g><g><title>cv::XMLParser::parseValue(char*, cv::FileNode&amp;) (926 samples, 5.32%)</title><rect x="7.1638%" y="597" width="5.3240%" height="15" fill="rgb(224,33,50)" fg:x="1246" fg:w="926"/><text x="7.4138%" y="607.50">cv::XML..</text></g><g><title>cv::XMLParser::skipSpaces(char*, int) (3 samples, 0.02%)</title><rect x="12.4705%" y="581" width="0.0172%" height="15" fill="rgb(246,198,51)" fg:x="2169" fg:w="3"/><text x="12.7205%" y="591.50"></text></g><g><title>__open_nocancel (6 samples, 0.03%)</title><rect x="12.4878%" y="613" width="0.0345%" height="15" fill="rgb(205,22,4)" fg:x="2172" fg:w="6"/><text x="12.7378%" y="623.50"></text></g><g><title>cv::FileStorage::FileStorage(std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt; const&amp;, int, std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt; const&amp;) (937 samples, 5.39%)</title><rect x="7.1523%" y="661" width="5.3872%" height="15" fill="rgb(206,3,8)" fg:x="1244" fg:w="937"/><text x="7.4023%" y="671.50">cv::Fil..</text></g><g><title>cv::FileStorage::Impl::open(char const*, int, char const*) (937 samples, 5.39%)</title><rect x="7.1523%" y="645" width="5.3872%" height="15" fill="rgb(251,23,15)" fg:x="1244" fg:w="937"/><text x="7.4023%" y="655.50">cv::Fil..</text></g><g><title>fopen (9 samples, 0.05%)</title><rect x="12.4878%" y="629" width="0.0517%" height="15" fill="rgb(252,88,28)" fg:x="2172" fg:w="9"/><text x="12.7378%" y="639.50"></text></g><g><title>open$NOCANCEL (3 samples, 0.02%)</title><rect x="12.5223%" y="613" width="0.0172%" height="15" fill="rgb(212,127,14)" fg:x="2178" fg:w="3"/><text x="12.7723%" y="623.50"></text></g><g><title>__open_nocancel (3 samples, 0.02%)</title><rect x="12.5223%" y="597" width="0.0172%" height="15" fill="rgb(247,145,37)" fg:x="2178" fg:w="3"/><text x="12.7723%" y="607.50"></text></g><g><title>face_cropper::face_detect::FaceDetector::new (1,734 samples, 9.97%)</title><rect x="2.5815%" y="741" width="9.9695%" height="15" fill="rgb(209,117,53)" fg:x="449" fg:w="1734"/><text x="2.8315%" y="751.50">face_cropper::..</text></g><g><title>cv_CascadeClassifier_CascadeClassifier_const_StringR (1,734 samples, 9.97%)</title><rect x="2.5815%" y="725" width="9.9695%" height="15" fill="rgb(212,90,42)" fg:x="449" fg:w="1734"/><text x="2.8315%" y="735.50">cv_CascadeClas..</text></g><g><title>cv::CascadeClassifier::CascadeClassifier(std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt; const&amp;) (1,734 samples, 9.97%)</title><rect x="2.5815%" y="709" width="9.9695%" height="15" fill="rgb(218,164,37)" fg:x="449" fg:w="1734"/><text x="2.8315%" y="719.50">cv::CascadeCla..</text></g><g><title>cv::CascadeClassifier::load(std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt; const&amp;) (1,734 samples, 9.97%)</title><rect x="2.5815%" y="693" width="9.9695%" height="15" fill="rgb(246,65,34)" fg:x="449" fg:w="1734"/><text x="2.8315%" y="703.50">cv::CascadeCla..</text></g><g><title>cv::CascadeClassifierImpl::load(std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt; const&amp;) (1,734 samples, 9.97%)</title><rect x="2.5815%" y="677" width="9.9695%" height="15" fill="rgb(231,100,33)" fg:x="449" fg:w="1734"/><text x="2.8315%" y="687.50">cv::CascadeCla..</text></g><g><title>cv::FileStorage::~FileStorage() (2 samples, 0.01%)</title><rect x="12.5395%" y="661" width="0.0115%" height="15" fill="rgb(228,126,14)" fg:x="2181" fg:w="2"/><text x="12.7895%" y="671.50"></text></g><g><title>&lt;deduplicated_symbol&gt; (2 samples, 0.01%)</title><rect x="12.5395%" y="645" width="0.0115%" height="15" fill="rgb(215,173,21)" fg:x="2181" fg:w="2"/><text x="12.7895%" y="655.50"></text></g><g><title>cv::FileStorage::Impl::~Impl() (2 samples, 0.01%)</title><rect x="12.5395%" y="629" width="0.0115%" height="15" fill="rgb(210,6,40)" fg:x="2181" fg:w="2"/><text x="12.7895%" y="639.50"></text></g><g><title>cv::FileStorage::Impl::release(std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt;*) (2 samples, 0.01%)</title><rect x="12.5395%" y="613" width="0.0115%" height="15" fill="rgb(212,48,18)" fg:x="2181" fg:w="2"/><text x="12.7895%" y="623.50"></text></g><g><title>cv::FileStorage::Impl::init() (2 samples, 0.01%)</title><rect x="12.5395%" y="597" width="0.0115%" height="15" fill="rgb(230,214,11)" fg:x="2181" fg:w="2"/><text x="12.7895%" y="607.50"></text></g><g><title>&lt;deduplicated_symbol&gt; (2 samples, 0.01%)</title><rect x="12.5395%" y="581" width="0.0115%" height="15" fill="rgb(254,105,39)" fg:x="2181" fg:w="2"/><text x="12.7895%" y="591.50"></text></g><g><title>cv::hal::integral(int, int, int, unsigned char const*, unsigned long, unsigned char*, unsigned long, unsigned char*, unsigned long, unsigned char*, unsigned long, int, int, int) (225 samples, 1.29%)</title><rect x="12.5798%" y="581" width="1.2936%" height="15" fill="rgb(245,158,5)" fg:x="2188" fg:w="225"/><text x="12.8298%" y="591.50"></text></g><g><title>cv::HaarEvaluator::computeChannels(int, cv::_InputArray const&amp;) (228 samples, 1.31%)</title><rect x="12.5683%" y="613" width="1.3109%" height="15" fill="rgb(249,208,11)" fg:x="2186" fg:w="228"/><text x="12.8183%" y="623.50"></text></g><g><title>cv::integral(cv::_InputArray const&amp;, cv::_OutputArray const&amp;, cv::_OutputArray const&amp;, cv::_OutputArray const&amp;, int, int) (228 samples, 1.31%)</title><rect x="12.5683%" y="597" width="1.3109%" height="15" fill="rgb(210,39,28)" fg:x="2186" fg:w="228"/><text x="12.8183%" y="607.50"></text></g><g><title>std::__1::vector&lt;cv::HaarEvaluator::OptFeature, std::__1::allocator&lt;cv::HaarEvaluator::OptFeature&gt;&gt;::__append(unsigned long) (2 samples, 0.01%)</title><rect x="13.8906%" y="597" width="0.0115%" height="15" fill="rgb(211,56,53)" fg:x="2416" fg:w="2"/><text x="14.1406%" y="607.50"></text></g><g><title>IORegistryEntryCreateCFProperties (2 samples, 0.01%)</title><rect x="13.9021%" y="325" width="0.0115%" height="15" fill="rgb(226,201,30)" fg:x="2418" fg:w="2"/><text x="14.1521%" y="335.50"></text></g><g><title>_dispatch_once_callout (2 samples, 0.01%)</title><rect x="13.9136%" y="325" width="0.0115%" height="15" fill="rgb(239,101,34)" fg:x="2420" fg:w="2"/><text x="14.1636%" y="335.50"></text></g><g><title>_dispatch_client_callout (2 samples, 0.01%)</title><rect x="13.9136%" y="309" width="0.0115%" height="15" fill="rgb(226,209,5)" fg:x="2420" fg:w="2"/><text x="14.1636%" y="319.50"></text></g><g><title>__apply_selection_policy_block_invoke (2 samples, 0.01%)</title><rect x="13.9136%" y="293" width="0.0115%" height="15" fill="rgb(250,105,47)" fg:x="2420" fg:w="2"/><text x="14.1636%" y="303.50"></text></g><g><title>IOSurfaceClientCopyGPUPolicies (2 samples, 0.01%)</title><rect x="13.9136%" y="277" width="0.0115%" height="15" fill="rgb(230,72,3)" fg:x="2420" fg:w="2"/><text x="14.1636%" y="287.50"></text></g><g><title>_ioSurfaceConnectInternal (2 samples, 0.01%)</title><rect x="13.9136%" y="261" width="0.0115%" height="15" fill="rgb(232,218,39)" fg:x="2420" fg:w="2"/><text x="14.1636%" y="271.50"></text></g><g><title>_dispatch_once_callout (2 samples, 0.01%)</title><rect x="13.9136%" y="245" width="0.0115%" height="15" fill="rgb(248,166,6)" fg:x="2420" fg:w="2"/><text x="14.1636%" y="255.50"></text></g><g><title>_dispatch_client_callout (2 samples, 0.01%)</title><rect x="13.9136%" y="229" width="0.0115%" height="15" fill="rgb(247,89,20)" fg:x="2420" fg:w="2"/><text x="14.1636%" y="239.50"></text></g><g><title>___ioSurfaceConnectInternal_block_invoke (2 samples, 0.01%)</title><rect x="13.9136%" y="213" width="0.0115%" height="15" fill="rgb(248,130,54)" fg:x="2420" fg:w="2"/><text x="14.1636%" y="223.50"></text></g><g><title>dyld4::Loader::getLoader(Diagnostics&amp;, dyld4::RuntimeState&amp;, char const*, dyld4::Loader::LoadOptions const&amp;) (2 samples, 0.01%)</title><rect x="13.9309%" y="245" width="0.0115%" height="15" fill="rgb(234,196,4)" fg:x="2423" fg:w="2"/><text x="14.1809%" y="255.50"></text></g><g><title>AAREncoder::encode(ByteStream&amp;) const (2 samples, 0.01%)</title><rect x="13.9424%" y="197" width="0.0115%" height="15" fill="rgb(250,143,31)" fg:x="2425" fg:w="2"/><text x="14.1924%" y="207.50"></text></g><g><title>AAREncoder::encodeFile(AAREncoder::File const&amp;, ByteStream&amp;) const (2 samples, 0.01%)</title><rect x="13.9424%" y="181" width="0.0115%" height="15" fill="rgb(211,110,34)" fg:x="2425" fg:w="2"/><text x="14.1924%" y="191.50"></text></g><g><title>cksum(std::__1::span&lt;std::byte, 18446744073709551615ul&gt;) (2 samples, 0.01%)</title><rect x="13.9424%" y="165" width="0.0115%" height="15" fill="rgb(215,124,48)" fg:x="2425" fg:w="2"/><text x="14.1924%" y="175.50"></text></g><g><title>PropertyList::String::deallocate() (2 samples, 0.01%)</title><rect x="13.9596%" y="181" width="0.0115%" height="15" fill="rgb(216,46,13)" fg:x="2428" fg:w="2"/><text x="14.2096%" y="191.50"></text></g><g><title>PropertyList::encode(ByteStream&amp;) (6 samples, 0.03%)</title><rect x="13.9539%" y="197" width="0.0345%" height="15" fill="rgb(205,184,25)" fg:x="2427" fg:w="6"/><text x="14.2039%" y="207.50"></text></g><g><title>dyld4::ExternallyViewableState::atlasAddImage(PropertyList::Dictionary&amp;, unsigned long long, char const*) (2 samples, 0.01%)</title><rect x="13.9884%" y="197" width="0.0115%" height="15" fill="rgb(228,1,10)" fg:x="2433" fg:w="2"/><text x="14.2384%" y="207.50"></text></g><g><title>mach_o::Header::forEachSegment(void (mach_o::Header::SegmentInfo const&amp;, bool&amp;) block_pointer) const (2 samples, 0.01%)</title><rect x="13.9884%" y="181" width="0.0115%" height="15" fill="rgb(213,116,27)" fg:x="2433" fg:w="2"/><text x="14.2384%" y="191.50"></text></g><g><title>mach_o::Header::forEachLoadCommand(void (load_command const*, bool&amp;) block_pointer) const (2 samples, 0.01%)</title><rect x="13.9884%" y="165" width="0.0115%" height="15" fill="rgb(241,95,50)" fg:x="2433" fg:w="2"/><text x="14.2384%" y="175.50"></text></g><g><title>invocation function for block in mach_o::Header::forEachSegment(void (mach_o::Header::SegmentInfo const&amp;, bool&amp;) block_pointer) const (2 samples, 0.01%)</title><rect x="13.9884%" y="149" width="0.0115%" height="15" fill="rgb(238,48,32)" fg:x="2433" fg:w="2"/><text x="14.2384%" y="159.50"></text></g><g><title>invocation function for block in dyld4::ExternallyViewableState::atlasAddImage(PropertyList::Dictionary&amp;, unsigned long long, char const*) (2 samples, 0.01%)</title><rect x="13.9884%" y="133" width="0.0115%" height="15" fill="rgb(235,113,49)" fg:x="2433" fg:w="2"/><text x="14.2384%" y="143.50"></text></g><g><title>dyld4::APIs::dlopen(char const*, int) (14 samples, 0.08%)</title><rect x="13.9251%" y="325" width="0.0805%" height="15" fill="rgb(205,127,43)" fg:x="2422" fg:w="14"/><text x="14.1751%" y="335.50"></text></g><g><title>dyld4::APIs::dlopen_from(char const*, int, void*) (14 samples, 0.08%)</title><rect x="13.9251%" y="309" width="0.0805%" height="15" fill="rgb(250,162,2)" fg:x="2422" fg:w="14"/><text x="14.1751%" y="319.50"></text></g><g><title>dyld4::APIs::dlopen_from(char const*, int, void*)::$_0::operator()() const (14 samples, 0.08%)</title><rect x="13.9251%" y="293" width="0.0805%" height="15" fill="rgb(220,13,41)" fg:x="2422" fg:w="14"/><text x="14.1751%" y="303.50"></text></g><g><title>void dyld4::RuntimeLocks::withLoadersWriteLockAndProtectedStack&lt;dyld4::APIs::dlopen_from(char const*, int, void*)::$_0::operator()() const::&apos;lambda&apos;()&gt;(dyld4::APIs::dlopen_from(char const*, int, void*)::$_0::operator()() const::&apos;lambda&apos;())::&apos;lambda&apos;()::operator()() const (14 samples, 0.08%)</title><rect x="13.9251%" y="277" width="0.0805%" height="15" fill="rgb(249,221,25)" fg:x="2422" fg:w="14"/><text x="14.1751%" y="287.50"></text></g><g><title>dyld4::APIs::dlopen_from(char const*, int, void*)::$_0::operator()() const::&apos;lambda&apos;()::operator()() const (14 samples, 0.08%)</title><rect x="13.9251%" y="261" width="0.0805%" height="15" fill="rgb(215,208,19)" fg:x="2422" fg:w="14"/><text x="14.1751%" y="271.50"></text></g><g><title>dyld4::RuntimeState::notifyDebuggerLoad(std::__1::span&lt;dyld4::Loader const*, 18446744073709551615ul&gt; const&amp;) (11 samples, 0.06%)</title><rect x="13.9424%" y="245" width="0.0632%" height="15" fill="rgb(236,175,2)" fg:x="2425" fg:w="11"/><text x="14.1924%" y="255.50"></text></g><g><title>dyld4::ExternallyViewableState::addImages(lsl::Allocator&amp;, lsl::Allocator&amp;, std::__1::span&lt;dyld4::ExternallyViewableState::ImageInfo, 18446744073709551615ul&gt; const&amp;) (11 samples, 0.06%)</title><rect x="13.9424%" y="229" width="0.0632%" height="15" fill="rgb(241,52,2)" fg:x="2425" fg:w="11"/><text x="14.1924%" y="239.50"></text></g><g><title>dyld4::ExternallyViewableState::generateAtlas(lsl::Allocator&amp;) (11 samples, 0.06%)</title><rect x="13.9424%" y="213" width="0.0632%" height="15" fill="rgb(248,140,14)" fg:x="2425" fg:w="11"/><text x="14.1924%" y="223.50"></text></g><g><title>GLDPixelConverter::init(id&lt;MTLDevice&gt;) (2 samples, 0.01%)</title><rect x="14.0114%" y="293" width="0.0115%" height="15" fill="rgb(253,22,42)" fg:x="2437" fg:w="2"/><text x="14.2614%" y="303.50"></text></g><g><title>+[NSBundle bundleWithIdentifier:] (2 samples, 0.01%)</title><rect x="14.0114%" y="277" width="0.0115%" height="15" fill="rgb(234,61,47)" fg:x="2437" fg:w="2"/><text x="14.2614%" y="287.50"></text></g><g><title>_CFBundleGetBundleWithIdentifier (2 samples, 0.01%)</title><rect x="14.0114%" y="261" width="0.0115%" height="15" fill="rgb(208,226,15)" fg:x="2437" fg:w="2"/><text x="14.2614%" y="271.50"></text></g><g><title>_CFBundleEnsureBundlesUpToDateWithHint (2 samples, 0.01%)</title><rect x="14.0114%" y="245" width="0.0115%" height="15" fill="rgb(217,221,4)" fg:x="2437" fg:w="2"/><text x="14.2614%" y="255.50"></text></g><g><title>PropertyList::encode(ByteStream&amp;) (2 samples, 0.01%)</title><rect x="14.0516%" y="37" width="0.0115%" height="15" fill="rgb(212,174,34)" fg:x="2444" fg:w="2"/><text x="14.3016%" y="47.50"></text></g><g><title>-[MTLIOAccelServiceGlobalContext init] (9 samples, 0.05%)</title><rect x="14.0229%" y="261" width="0.0517%" height="15" fill="rgb(253,83,4)" fg:x="2439" fg:w="9"/><text x="14.2729%" y="271.50"></text></g><g><title>getMetalPluginClassForService (9 samples, 0.05%)</title><rect x="14.0229%" y="245" width="0.0517%" height="15" fill="rgb(250,195,49)" fg:x="2439" fg:w="9"/><text x="14.2729%" y="255.50"></text></g><g><title>-[NSBundle classNamed:] (9 samples, 0.05%)</title><rect x="14.0229%" y="229" width="0.0517%" height="15" fill="rgb(241,192,25)" fg:x="2439" fg:w="9"/><text x="14.2729%" y="239.50"></text></g><g><title>-[NSBundle loadAndReturnError:] (9 samples, 0.05%)</title><rect x="14.0229%" y="213" width="0.0517%" height="15" fill="rgb(208,124,10)" fg:x="2439" fg:w="9"/><text x="14.2729%" y="223.50"></text></g><g><title>_CFBundleLoadExecutableAndReturnError (8 samples, 0.05%)</title><rect x="14.0286%" y="197" width="0.0460%" height="15" fill="rgb(222,33,0)" fg:x="2440" fg:w="8"/><text x="14.2786%" y="207.50"></text></g><g><title>_CFBundleDlfcnLoadFramework (7 samples, 0.04%)</title><rect x="14.0344%" y="181" width="0.0402%" height="15" fill="rgb(234,209,28)" fg:x="2441" fg:w="7"/><text x="14.2844%" y="191.50"></text></g><g><title>dyld4::APIs::dlopen(char const*, int) (7 samples, 0.04%)</title><rect x="14.0344%" y="165" width="0.0402%" height="15" fill="rgb(224,11,23)" fg:x="2441" fg:w="7"/><text x="14.2844%" y="175.50"></text></g><g><title>dyld4::APIs::dlopen_from(char const*, int, void*) (7 samples, 0.04%)</title><rect x="14.0344%" y="149" width="0.0402%" height="15" fill="rgb(232,99,1)" fg:x="2441" fg:w="7"/><text x="14.2844%" y="159.50"></text></g><g><title>dyld4::APIs::dlopen_from(char const*, int, void*)::$_0::operator()() const (7 samples, 0.04%)</title><rect x="14.0344%" y="133" width="0.0402%" height="15" fill="rgb(237,95,45)" fg:x="2441" fg:w="7"/><text x="14.2844%" y="143.50"></text></g><g><title>void dyld4::RuntimeLocks::withLoadersWriteLockAndProtectedStack&lt;dyld4::APIs::dlopen_from(char const*, int, void*)::$_0::operator()() const::&apos;lambda&apos;()&gt;(dyld4::APIs::dlopen_from(char const*, int, void*)::$_0::operator()() const::&apos;lambda&apos;())::&apos;lambda&apos;()::operator()() const (6 samples, 0.03%)</title><rect x="14.0401%" y="117" width="0.0345%" height="15" fill="rgb(208,109,11)" fg:x="2442" fg:w="6"/><text x="14.2901%" y="127.50"></text></g><g><title>dyld4::APIs::dlopen_from(char const*, int, void*)::$_0::operator()() const::&apos;lambda&apos;()::operator()() const (6 samples, 0.03%)</title><rect x="14.0401%" y="101" width="0.0345%" height="15" fill="rgb(216,190,48)" fg:x="2442" fg:w="6"/><text x="14.2901%" y="111.50"></text></g><g><title>dyld4::RuntimeState::notifyDebuggerLoad(std::__1::span&lt;dyld4::Loader const*, 18446744073709551615ul&gt; const&amp;) (5 samples, 0.03%)</title><rect x="14.0459%" y="85" width="0.0287%" height="15" fill="rgb(251,171,36)" fg:x="2443" fg:w="5"/><text x="14.2959%" y="95.50"></text></g><g><title>dyld4::ExternallyViewableState::addImages(lsl::Allocator&amp;, lsl::Allocator&amp;, std::__1::span&lt;dyld4::ExternallyViewableState::ImageInfo, 18446744073709551615ul&gt; const&amp;) (5 samples, 0.03%)</title><rect x="14.0459%" y="69" width="0.0287%" height="15" fill="rgb(230,62,22)" fg:x="2443" fg:w="5"/><text x="14.2959%" y="79.50"></text></g><g><title>dyld4::ExternallyViewableState::generateAtlas(lsl::Allocator&amp;) (5 samples, 0.03%)</title><rect x="14.0459%" y="53" width="0.0287%" height="15" fill="rgb(225,114,35)" fg:x="2443" fg:w="5"/><text x="14.2959%" y="63.50"></text></g><g><title>gfxInitializeLibrary (32 samples, 0.18%)</title><rect x="13.9021%" y="341" width="0.1840%" height="15" fill="rgb(215,118,42)" fg:x="2418" fg:w="32"/><text x="14.1521%" y="351.50"></text></g><g><title>gldCreateDevice (14 samples, 0.08%)</title><rect x="14.0056%" y="325" width="0.0805%" height="15" fill="rgb(243,119,21)" fg:x="2436" fg:w="14"/><text x="14.2556%" y="335.50"></text></g><g><title>GLDDeviceRec::initWithDisplayMask(unsigned int) (14 samples, 0.08%)</title><rect x="14.0056%" y="309" width="0.0805%" height="15" fill="rgb(252,177,53)" fg:x="2436" fg:w="14"/><text x="14.2556%" y="319.50"></text></g><g><title>MTLCopyAllDevices (11 samples, 0.06%)</title><rect x="14.0229%" y="293" width="0.0632%" height="15" fill="rgb(237,209,29)" fg:x="2439" fg:w="11"/><text x="14.2729%" y="303.50"></text></g><g><title>MTLRegisterDevices (11 samples, 0.06%)</title><rect x="14.0229%" y="277" width="0.0632%" height="15" fill="rgb(212,65,23)" fg:x="2439" fg:w="11"/><text x="14.2729%" y="287.50"></text></g><g><title>-[MTLIOAccelServiceGlobalContext processPendingCreateIOAccelServiceRequests] (2 samples, 0.01%)</title><rect x="14.0746%" y="261" width="0.0115%" height="15" fill="rgb(230,222,46)" fg:x="2448" fg:w="2"/><text x="14.3246%" y="271.50"></text></g><g><title>_dispatch_lane_barrier_sync_invoke_and_complete (2 samples, 0.01%)</title><rect x="14.0746%" y="245" width="0.0115%" height="15" fill="rgb(215,135,32)" fg:x="2448" fg:w="2"/><text x="14.3246%" y="255.50"></text></g><g><title>_dispatch_client_callout (2 samples, 0.01%)</title><rect x="14.0746%" y="229" width="0.0115%" height="15" fill="rgb(246,101,22)" fg:x="2448" fg:w="2"/><text x="14.3246%" y="239.50"></text></g><g><title>-[MTLIOAccelServiceGlobalContext registerService:deviceClass:] (2 samples, 0.01%)</title><rect x="14.0746%" y="213" width="0.0115%" height="15" fill="rgb(206,107,13)" fg:x="2448" fg:w="2"/><text x="14.3246%" y="223.50"></text></g><g><title>-[MTLIOAccelService initWithAcceleratorPort:deviceClass:] (2 samples, 0.01%)</title><rect x="14.0746%" y="197" width="0.0115%" height="15" fill="rgb(250,100,44)" fg:x="2448" fg:w="2"/><text x="14.3246%" y="207.50"></text></g><g><title>-[AGXG14GDevice initWithAcceleratorPort:] (2 samples, 0.01%)</title><rect x="14.0746%" y="181" width="0.0115%" height="15" fill="rgb(231,147,38)" fg:x="2448" fg:w="2"/><text x="14.3246%" y="191.50"></text></g><g><title>clGetDeviceIDs (34 samples, 0.20%)</title><rect x="13.9021%" y="453" width="0.1955%" height="15" fill="rgb(229,8,40)" fg:x="2418" fg:w="34"/><text x="14.1521%" y="463.50"></text></g><g><title>0x1f346b370 (34 samples, 0.20%)</title><rect x="13.9021%" y="437" width="0.1955%" height="15" fill="rgb(221,135,30)" fg:x="2418" fg:w="34"/><text x="14.1521%" y="447.50"></text></g><g><title>pthread_once (34 samples, 0.20%)</title><rect x="13.9021%" y="421" width="0.1955%" height="15" fill="rgb(249,193,18)" fg:x="2418" fg:w="34"/><text x="14.1521%" y="431.50"></text></g><g><title>_os_once (34 samples, 0.20%)</title><rect x="13.9021%" y="405" width="0.1955%" height="15" fill="rgb(209,133,39)" fg:x="2418" fg:w="34"/><text x="14.1521%" y="415.50"></text></g><g><title>_os_once_callout (34 samples, 0.20%)</title><rect x="13.9021%" y="389" width="0.1955%" height="15" fill="rgb(232,100,14)" fg:x="2418" fg:w="34"/><text x="14.1521%" y="399.50"></text></g><g><title>__pthread_once_handler (34 samples, 0.20%)</title><rect x="13.9021%" y="373" width="0.1955%" height="15" fill="rgb(224,185,1)" fg:x="2418" fg:w="34"/><text x="14.1521%" y="383.50"></text></g><g><title>0x1f346b460 (34 samples, 0.20%)</title><rect x="13.9021%" y="357" width="0.1955%" height="15" fill="rgb(223,139,8)" fg:x="2418" fg:w="34"/><text x="14.1521%" y="367.50"></text></g><g><title>gfxLoadPluginData (2 samples, 0.01%)</title><rect x="14.0861%" y="341" width="0.0115%" height="15" fill="rgb(232,213,38)" fg:x="2450" fg:w="2"/><text x="14.3361%" y="351.50"></text></g><g><title>SLSMainConnectionID (2 samples, 0.01%)</title><rect x="14.0861%" y="325" width="0.0115%" height="15" fill="rgb(207,94,22)" fg:x="2450" fg:w="2"/><text x="14.3361%" y="335.50"></text></g><g><title>SLSMainConnection (2 samples, 0.01%)</title><rect x="14.0861%" y="309" width="0.0115%" height="15" fill="rgb(219,183,54)" fg:x="2450" fg:w="2"/><text x="14.3361%" y="319.50"></text></g><g><title>cv::UMat::getStdAllocator() (35 samples, 0.20%)</title><rect x="13.9021%" y="533" width="0.2012%" height="15" fill="rgb(216,185,54)" fg:x="2418" fg:w="35"/><text x="14.1521%" y="543.50"></text></g><g><title>cv::ocl::useOpenCL() (35 samples, 0.20%)</title><rect x="13.9021%" y="517" width="0.2012%" height="15" fill="rgb(254,217,39)" fg:x="2418" fg:w="35"/><text x="14.1521%" y="527.50"></text></g><g><title>cv::ocl::OpenCLExecutionContext::getCurrent() (35 samples, 0.20%)</title><rect x="13.9021%" y="501" width="0.2012%" height="15" fill="rgb(240,178,23)" fg:x="2418" fg:w="35"/><text x="14.1521%" y="511.50"></text></g><g><title>cv::ocl::OpenCLExecutionContext::Impl::getInitializedExecutionContext() (35 samples, 0.20%)</title><rect x="13.9021%" y="485" width="0.2012%" height="15" fill="rgb(218,11,47)" fg:x="2418" fg:w="35"/><text x="14.1521%" y="495.50"></text></g><g><title>cv::ocl::Context::Impl::findOrCreateContext(std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt; const&amp;) (35 samples, 0.20%)</title><rect x="13.9021%" y="469" width="0.2012%" height="15" fill="rgb(218,51,51)" fg:x="2418" fg:w="35"/><text x="14.1521%" y="479.50"></text></g><g><title>cv::_OutputArray::create(int, int const*, int, int, bool, cv::_OutputArray::DepthMask) const (36 samples, 0.21%)</title><rect x="13.9021%" y="565" width="0.2070%" height="15" fill="rgb(238,126,27)" fg:x="2418" fg:w="36"/><text x="14.1521%" y="575.50"></text></g><g><title>cv::UMat::create(int, int const*, int, cv::UMatUsageFlags) (36 samples, 0.21%)</title><rect x="13.9021%" y="549" width="0.2070%" height="15" fill="rgb(249,202,22)" fg:x="2418" fg:w="36"/><text x="14.1521%" y="559.50"></text></g><g><title>IOGPUCommandQueueSubmitCommandBuffers (4 samples, 0.02%)</title><rect x="14.1091%" y="261" width="0.0230%" height="15" fill="rgb(254,195,49)" fg:x="2454" fg:w="4"/><text x="14.3591%" y="271.50"></text></g><g><title>iokit_user_client_trap (4 samples, 0.02%)</title><rect x="14.1091%" y="245" width="0.0230%" height="15" fill="rgb(208,123,14)" fg:x="2454" fg:w="4"/><text x="14.3591%" y="255.50"></text></g><g><title>0x1f3448300 (8 samples, 0.05%)</title><rect x="14.1091%" y="421" width="0.0460%" height="15" fill="rgb(224,200,8)" fg:x="2454" fg:w="8"/><text x="14.3591%" y="431.50"></text></g><g><title>gldFinishQueue (8 samples, 0.05%)</title><rect x="14.1091%" y="405" width="0.0460%" height="15" fill="rgb(217,61,36)" fg:x="2454" fg:w="8"/><text x="14.3591%" y="415.50"></text></g><g><title>GLDQueueRec::flush(GLDQueueRec::FlushMode, bool) (8 samples, 0.05%)</title><rect x="14.1091%" y="389" width="0.0460%" height="15" fill="rgb(206,35,45)" fg:x="2454" fg:w="8"/><text x="14.3591%" y="399.50"></text></g><g><title>-[_MTLCommandQueue submitCommandBuffer:] (8 samples, 0.05%)</title><rect x="14.1091%" y="373" width="0.0460%" height="15" fill="rgb(217,65,33)" fg:x="2454" fg:w="8"/><text x="14.3591%" y="383.50"></text></g><g><title>_dispatch_lane_barrier_sync_invoke_and_complete (8 samples, 0.05%)</title><rect x="14.1091%" y="357" width="0.0460%" height="15" fill="rgb(222,158,48)" fg:x="2454" fg:w="8"/><text x="14.3591%" y="367.50"></text></g><g><title>_dispatch_client_callout (8 samples, 0.05%)</title><rect x="14.1091%" y="341" width="0.0460%" height="15" fill="rgb(254,2,54)" fg:x="2454" fg:w="8"/><text x="14.3591%" y="351.50"></text></g><g><title>__40-[_MTLCommandQueue submitCommandBuffer:]_block_invoke (8 samples, 0.05%)</title><rect x="14.1091%" y="325" width="0.0460%" height="15" fill="rgb(250,143,38)" fg:x="2454" fg:w="8"/><text x="14.3591%" y="335.50"></text></g><g><title>-[_MTLCommandQueue _submitAvailableCommandBuffers] (8 samples, 0.05%)</title><rect x="14.1091%" y="309" width="0.0460%" height="15" fill="rgb(248,25,0)" fg:x="2454" fg:w="8"/><text x="14.3591%" y="319.50"></text></g><g><title>-[IOGPUMetalCommandQueue submitCommandBuffers:count:] (8 samples, 0.05%)</title><rect x="14.1091%" y="293" width="0.0460%" height="15" fill="rgb(206,152,27)" fg:x="2454" fg:w="8"/><text x="14.3591%" y="303.50"></text></g><g><title>-[IOGPUMetalCommandQueue _submitCommandBuffers:count:] (8 samples, 0.05%)</title><rect x="14.1091%" y="277" width="0.0460%" height="15" fill="rgb(240,77,30)" fg:x="2454" fg:w="8"/><text x="14.3591%" y="287.50"></text></g><g><title>iokit_user_client_trap (4 samples, 0.02%)</title><rect x="14.1321%" y="261" width="0.0230%" height="15" fill="rgb(231,5,3)" fg:x="2458" fg:w="4"/><text x="14.3821%" y="271.50"></text></g><g><title>0x1f3449098 (11 samples, 0.06%)</title><rect x="14.1091%" y="437" width="0.0632%" height="15" fill="rgb(207,226,32)" fg:x="2454" fg:w="11"/><text x="14.3591%" y="447.50"></text></g><g><title>gldCopyBufferDataWithQueue (3 samples, 0.02%)</title><rect x="14.1551%" y="421" width="0.0172%" height="15" fill="rgb(222,207,47)" fg:x="2462" fg:w="3"/><text x="14.4051%" y="431.50"></text></g><g><title>GLDQueueRec::copyFromBufferToBuffer(GLDBufferRec*, GLDBufferRec*, GLDBufferImageRegionRec const*, GLDBufferImageRegionRec const*) (3 samples, 0.02%)</title><rect x="14.1551%" y="405" width="0.0172%" height="15" fill="rgb(229,115,45)" fg:x="2462" fg:w="3"/><text x="14.4051%" y="415.50"></text></g><g><title>_dispatch_lane_barrier_sync_invoke_and_complete (12 samples, 0.07%)</title><rect x="14.1091%" y="501" width="0.0690%" height="15" fill="rgb(224,191,6)" fg:x="2454" fg:w="12"/><text x="14.3591%" y="511.50"></text></g><g><title>_dispatch_client_callout (12 samples, 0.07%)</title><rect x="14.1091%" y="485" width="0.0690%" height="15" fill="rgb(230,227,24)" fg:x="2454" fg:w="12"/><text x="14.3591%" y="495.50"></text></g><g><title>0x1f346ccb0 (12 samples, 0.07%)</title><rect x="14.1091%" y="469" width="0.0690%" height="15" fill="rgb(228,80,19)" fg:x="2454" fg:w="12"/><text x="14.3591%" y="479.50"></text></g><g><title>0x1f346a758 (12 samples, 0.07%)</title><rect x="14.1091%" y="453" width="0.0690%" height="15" fill="rgb(247,229,0)" fg:x="2454" fg:w="12"/><text x="14.3591%" y="463.50"></text></g><g><title>0x1f3449098 (2 samples, 0.01%)</title><rect x="14.1781%" y="421" width="0.0115%" height="15" fill="rgb(237,194,15)" fg:x="2466" fg:w="2"/><text x="14.4281%" y="431.50"></text></g><g><title>0x1f346a758 (3 samples, 0.02%)</title><rect x="14.1781%" y="437" width="0.0172%" height="15" fill="rgb(219,203,20)" fg:x="2466" fg:w="3"/><text x="14.4281%" y="447.50"></text></g><g><title>0x1f346cb7c (16 samples, 0.09%)</title><rect x="14.1091%" y="517" width="0.0920%" height="15" fill="rgb(234,128,8)" fg:x="2454" fg:w="16"/><text x="14.3591%" y="527.50"></text></g><g><title>_dispatch_sync_f_slow (4 samples, 0.02%)</title><rect x="14.1781%" y="501" width="0.0230%" height="15" fill="rgb(248,202,8)" fg:x="2466" fg:w="4"/><text x="14.4281%" y="511.50"></text></g><g><title>_dispatch_sync_invoke_and_complete_recurse (4 samples, 0.02%)</title><rect x="14.1781%" y="485" width="0.0230%" height="15" fill="rgb(206,104,37)" fg:x="2466" fg:w="4"/><text x="14.4281%" y="495.50"></text></g><g><title>_dispatch_client_callout (4 samples, 0.02%)</title><rect x="14.1781%" y="469" width="0.0230%" height="15" fill="rgb(223,8,27)" fg:x="2466" fg:w="4"/><text x="14.4281%" y="479.50"></text></g><g><title>0x1f346ccb0 (4 samples, 0.02%)</title><rect x="14.1781%" y="453" width="0.0230%" height="15" fill="rgb(216,217,28)" fg:x="2466" fg:w="4"/><text x="14.4281%" y="463.50"></text></g><g><title>cv::HaarEvaluator::computeOptFeatures() (60 samples, 0.34%)</title><rect x="13.8791%" y="613" width="0.3450%" height="15" fill="rgb(249,199,1)" fg:x="2414" fg:w="60"/><text x="14.1291%" y="623.50"></text></g><g><title>void cv::copyVectorToUMat&lt;cv::HaarEvaluator::OptFeature&gt;(std::__1::vector&lt;cv::HaarEvaluator::OptFeature, std::__1::allocator&lt;cv::HaarEvaluator::OptFeature&gt;&gt; const&amp;, cv::UMat&amp;) (56 samples, 0.32%)</title><rect x="13.9021%" y="597" width="0.3220%" height="15" fill="rgb(240,85,17)" fg:x="2418" fg:w="56"/><text x="14.1521%" y="607.50"></text></g><g><title>cv::Mat::copyTo(cv::_OutputArray const&amp;) const (56 samples, 0.32%)</title><rect x="13.9021%" y="581" width="0.3220%" height="15" fill="rgb(206,108,45)" fg:x="2418" fg:w="56"/><text x="14.1521%" y="591.50"></text></g><g><title>cv::ocl::OpenCLAllocator::upload(cv::UMatData*, void const*, int, unsigned long const*, unsigned long const*, unsigned long const*, unsigned long const*) const (20 samples, 0.11%)</title><rect x="14.1091%" y="565" width="0.1150%" height="15" fill="rgb(245,210,41)" fg:x="2454" fg:w="20"/><text x="14.3591%" y="575.50"></text></g><g><title>clEnqueueWriteBuffer (20 samples, 0.11%)</title><rect x="14.1091%" y="549" width="0.1150%" height="15" fill="rgb(206,13,37)" fg:x="2454" fg:w="20"/><text x="14.3591%" y="559.50"></text></g><g><title>0x1f3469214 (20 samples, 0.11%)</title><rect x="14.1091%" y="533" width="0.1150%" height="15" fill="rgb(250,61,18)" fg:x="2454" fg:w="20"/><text x="14.3591%" y="543.50"></text></g><g><title>0x1f347d6a4 (4 samples, 0.02%)</title><rect x="14.2011%" y="517" width="0.0230%" height="15" fill="rgb(235,172,48)" fg:x="2470" fg:w="4"/><text x="14.4511%" y="527.50"></text></g><g><title>gldLoadBuffer (4 samples, 0.02%)</title><rect x="14.2011%" y="501" width="0.0230%" height="15" fill="rgb(249,201,17)" fg:x="2470" fg:w="4"/><text x="14.4511%" y="511.50"></text></g><g><title>GLDBufferRec::load() (4 samples, 0.02%)</title><rect x="14.2011%" y="485" width="0.0230%" height="15" fill="rgb(219,208,6)" fg:x="2470" fg:w="4"/><text x="14.4511%" y="495.50"></text></g><g><title>-[AGXBuffer initWithDevice:bytes:length:options:deallocator:pinnedGPUAddress:] (3 samples, 0.02%)</title><rect x="14.2069%" y="469" width="0.0172%" height="15" fill="rgb(248,31,23)" fg:x="2471" fg:w="3"/><text x="14.4569%" y="479.50"></text></g><g><title>-[AGXBuffer initWithDevice:bytes:length:alignment:options:deallocator:pinnedGPUAddress:] (3 samples, 0.02%)</title><rect x="14.2069%" y="453" width="0.0172%" height="15" fill="rgb(245,15,42)" fg:x="2471" fg:w="3"/><text x="14.4569%" y="463.50"></text></g><g><title>-[AGXBuffer initWithDevice:bytes:length:alignment:pointerTag:options:deallocator:pinnedGPUAddress:] (3 samples, 0.02%)</title><rect x="14.2069%" y="437" width="0.0172%" height="15" fill="rgb(222,217,39)" fg:x="2471" fg:w="3"/><text x="14.4569%" y="447.50"></text></g><g><title>-[IOGPUMetalBuffer initWithDevice:pointer:length:alignment:options:sysMemSize:gpuAddress:gpuTag:args:argsSize:deallocator:] (3 samples, 0.02%)</title><rect x="14.2069%" y="421" width="0.0172%" height="15" fill="rgb(210,219,27)" fg:x="2471" fg:w="3"/><text x="14.4569%" y="431.50"></text></g><g><title>-[IOGPUMetalResource initWithDevice:remoteStorageResource:options:args:argsSize:] (3 samples, 0.02%)</title><rect x="14.2069%" y="405" width="0.0172%" height="15" fill="rgb(252,166,36)" fg:x="2471" fg:w="3"/><text x="14.4569%" y="415.50"></text></g><g><title>IOGPUResourceCreate (3 samples, 0.02%)</title><rect x="14.2069%" y="389" width="0.0172%" height="15" fill="rgb(245,132,34)" fg:x="2471" fg:w="3"/><text x="14.4569%" y="399.50"></text></g><g><title>IOConnectCallMethod (3 samples, 0.02%)</title><rect x="14.2069%" y="373" width="0.0172%" height="15" fill="rgb(236,54,3)" fg:x="2471" fg:w="3"/><text x="14.4569%" y="383.50"></text></g><g><title>io_connect_method (3 samples, 0.02%)</title><rect x="14.2069%" y="357" width="0.0172%" height="15" fill="rgb(241,173,43)" fg:x="2471" fg:w="3"/><text x="14.4569%" y="367.50"></text></g><g><title>mach_msg2_internal (3 samples, 0.02%)</title><rect x="14.2069%" y="341" width="0.0172%" height="15" fill="rgb(215,190,9)" fg:x="2471" fg:w="3"/><text x="14.4569%" y="351.50"></text></g><g><title>mach_msg2_trap (3 samples, 0.02%)</title><rect x="14.2069%" y="325" width="0.0172%" height="15" fill="rgb(242,101,16)" fg:x="2471" fg:w="3"/><text x="14.4569%" y="335.50"></text></g><g><title>cv::softdouble::operator*(cv::softdouble const&amp;) const (2 samples, 0.01%)</title><rect x="14.2471%" y="549" width="0.0115%" height="15" fill="rgb(223,190,21)" fg:x="2478" fg:w="2"/><text x="14.4971%" y="559.50"></text></g><g><title>cv::softdouble::operator+(cv::softdouble const&amp;) const (2 samples, 0.01%)</title><rect x="14.2586%" y="549" width="0.0115%" height="15" fill="rgb(215,228,25)" fg:x="2480" fg:w="2"/><text x="14.5086%" y="559.50"></text></g><g><title>cv::softdouble::operator-(cv::softdouble const&amp;) const (7 samples, 0.04%)</title><rect x="14.2701%" y="549" width="0.0402%" height="15" fill="rgb(225,36,22)" fg:x="2482" fg:w="7"/><text x="14.5201%" y="559.50"></text></g><g><title>cv::softdouble::softdouble(int) (3 samples, 0.02%)</title><rect x="14.3104%" y="549" width="0.0172%" height="15" fill="rgb(251,106,46)" fg:x="2489" fg:w="3"/><text x="14.5604%" y="559.50"></text></g><g><title>cv::softfloat_addMagsF64(unsigned long long, unsigned long long, bool) (2 samples, 0.01%)</title><rect x="14.3276%" y="549" width="0.0115%" height="15" fill="rgb(208,90,1)" fg:x="2492" fg:w="2"/><text x="14.5776%" y="559.50"></text></g><g><title>cv::softfloat_normRoundPackToF64(bool, short, unsigned long long) (6 samples, 0.03%)</title><rect x="14.3391%" y="549" width="0.0345%" height="15" fill="rgb(243,10,4)" fg:x="2494" fg:w="6"/><text x="14.5891%" y="559.50"></text></g><g><title>cv::softfloat_roundPackToF64(bool, short, unsigned long long) (3 samples, 0.02%)</title><rect x="14.3736%" y="549" width="0.0172%" height="15" fill="rgb(212,137,27)" fg:x="2500" fg:w="3"/><text x="14.6236%" y="559.50"></text></g><g><title>cv::softfloat_roundToI32(bool, unsigned long long, unsigned char, bool) (4 samples, 0.02%)</title><rect x="14.3908%" y="549" width="0.0230%" height="15" fill="rgb(231,220,49)" fg:x="2503" fg:w="4"/><text x="14.6408%" y="559.50"></text></g><g><title>cv::softfloat_subMagsF64(unsigned long long, unsigned long long, bool) (5 samples, 0.03%)</title><rect x="14.4138%" y="549" width="0.0287%" height="15" fill="rgb(237,96,20)" fg:x="2507" fg:w="5"/><text x="14.6638%" y="559.50"></text></g><g><title>cvFloor(cv::softdouble const&amp;) (8 samples, 0.05%)</title><rect x="14.4426%" y="549" width="0.0460%" height="15" fill="rgb(239,229,30)" fg:x="2512" fg:w="8"/><text x="14.6926%" y="559.50"></text></g><g><title>cv::softfloat_roundToI32(bool, unsigned long long, unsigned char, bool) (7 samples, 0.04%)</title><rect x="14.4483%" y="533" width="0.0402%" height="15" fill="rgb(219,65,33)" fg:x="2513" fg:w="7"/><text x="14.6983%" y="543.50"></text></g><g><title>(anonymous namespace)::interpolationLinear&lt;unsigned char&gt;::getCoeffs(int, int*, (anonymous namespace)::ufixedpoint16*) (50 samples, 0.29%)</title><rect x="14.2414%" y="565" width="0.2875%" height="15" fill="rgb(243,134,7)" fg:x="2477" fg:w="50"/><text x="14.4914%" y="575.50"></text></g><g><title>cvRound(cv::softdouble const&amp;) (7 samples, 0.04%)</title><rect x="14.4886%" y="549" width="0.0402%" height="15" fill="rgb(216,177,54)" fg:x="2520" fg:w="7"/><text x="14.7386%" y="559.50"></text></g><g><title>cv::softfloat_roundToI32(bool, unsigned long long, unsigned char, bool) (7 samples, 0.04%)</title><rect x="14.4886%" y="533" width="0.0402%" height="15" fill="rgb(211,160,20)" fg:x="2520" fg:w="7"/><text x="14.7386%" y="543.50"></text></g><g><title>(anonymous namespace)::resize_bitExactInvoker&lt;unsigned char, (anonymous namespace)::ufixedpoint16, 2&gt;::operator()(cv::Range const&amp;) const (228 samples, 1.31%)</title><rect x="14.5288%" y="549" width="1.3109%" height="15" fill="rgb(239,85,39)" fg:x="2527" fg:w="228"/><text x="14.7788%" y="559.50"></text></g><g><title>void (anonymous namespace)::hlineResizeCn&lt;unsigned char, (anonymous namespace)::ufixedpoint16, 2, true, 1&gt;(unsigned char*, int, int*, (anonymous namespace)::ufixedpoint16*, (anonymous namespace)::ufixedpoint16*, int, int, int) (163 samples, 0.94%)</title><rect x="14.9025%" y="533" width="0.9372%" height="15" fill="rgb(232,125,22)" fg:x="2592" fg:w="163"/><text x="15.1525%" y="543.50"></text></g><g><title>cv::parallel_for_(cv::Range const&amp;, cv::ParallelLoopBody const&amp;, double) (272 samples, 1.56%)</title><rect x="14.5288%" y="565" width="1.5638%" height="15" fill="rgb(244,57,34)" fg:x="2527" fg:w="272"/><text x="14.7788%" y="575.50"></text></g><g><title>void (anonymous namespace)::hlineResizeCn&lt;unsigned char, (anonymous namespace)::ufixedpoint16, 2, true, 1&gt;(unsigned char*, int, int*, (anonymous namespace)::ufixedpoint16*, (anonymous namespace)::ufixedpoint16*, int, int, int) (44 samples, 0.25%)</title><rect x="15.8397%" y="549" width="0.2530%" height="15" fill="rgb(214,203,32)" fg:x="2755" fg:w="44"/><text x="16.0897%" y="559.50"></text></g><g><title>cv::softdouble::softdouble(int) (4 samples, 0.02%)</title><rect x="16.1042%" y="565" width="0.0230%" height="15" fill="rgb(207,58,43)" fg:x="2801" fg:w="4"/><text x="16.3542%" y="575.50"></text></g><g><title>cv::softfloat_roundPackToF64(bool, short, unsigned long long) (3 samples, 0.02%)</title><rect x="16.1387%" y="565" width="0.0172%" height="15" fill="rgb(215,193,15)" fg:x="2807" fg:w="3"/><text x="16.3887%" y="575.50"></text></g><g><title>cv::resize(cv::_InputArray const&amp;, cv::_OutputArray const&amp;, cv::Size_&lt;int&gt;, double, double, int) (340 samples, 1.95%)</title><rect x="14.2299%" y="613" width="1.9548%" height="15" fill="rgb(232,15,44)" fg:x="2475" fg:w="340"/><text x="14.4799%" y="623.50">c..</text></g><g><title>cv::hal::resize(int, unsigned char const*, unsigned long, int, int, unsigned char*, unsigned long, int, int, double, double, int) (339 samples, 1.95%)</title><rect x="14.2356%" y="597" width="1.9491%" height="15" fill="rgb(212,3,48)" fg:x="2476" fg:w="339"/><text x="14.4856%" y="607.50">c..</text></g><g><title>void (anonymous namespace)::resize_bitExact&lt;unsigned char, (anonymous namespace)::interpolationLinear&lt;unsigned char&gt;&gt;(unsigned char const*, unsigned long, int, int, unsigned char*, unsigned long, int, int, int, double, double) (339 samples, 1.95%)</title><rect x="14.2356%" y="581" width="1.9491%" height="15" fill="rgb(218,128,7)" fg:x="2476" fg:w="339"/><text x="14.4856%" y="591.50">v..</text></g><g><title>cv::softfloat_subMagsF64(unsigned long long, unsigned long long, bool) (5 samples, 0.03%)</title><rect x="16.1559%" y="565" width="0.0287%" height="15" fill="rgb(226,216,39)" fg:x="2810" fg:w="5"/><text x="16.4059%" y="575.50"></text></g><g><title>cv::_OutputArray::create(int, int const*, int, int, bool, cv::_OutputArray::DepthMask) const (2 samples, 0.01%)</title><rect x="16.1904%" y="581" width="0.0115%" height="15" fill="rgb(243,47,51)" fg:x="2816" fg:w="2"/><text x="16.4404%" y="591.50"></text></g><g><title>cv::UMat::create(int, int const*, int, cv::UMatUsageFlags) (2 samples, 0.01%)</title><rect x="16.1904%" y="565" width="0.0115%" height="15" fill="rgb(241,183,40)" fg:x="2816" fg:w="2"/><text x="16.4404%" y="575.50"></text></g><g><title>cv::ocl::OpenCLAllocator::allocate(int, int const*, int, void*, unsigned long*, cv::AccessFlag, cv::UMatUsageFlags) const (2 samples, 0.01%)</title><rect x="16.1904%" y="549" width="0.0115%" height="15" fill="rgb(231,217,32)" fg:x="2816" fg:w="2"/><text x="16.4404%" y="559.50"></text></g><g><title>cv::ocl::OpenCLBufferPoolBaseImpl&lt;cv::ocl::OpenCLBufferPoolImpl, cv::ocl::CLBufferEntry, _cl_mem*&gt;::allocate(unsigned long) (2 samples, 0.01%)</title><rect x="16.1904%" y="533" width="0.0115%" height="15" fill="rgb(229,61,38)" fg:x="2816" fg:w="2"/><text x="16.4404%" y="543.50"></text></g><g><title>cv::ocl::OpenCLBufferPoolImpl::_allocateBufferEntry(cv::ocl::CLBufferEntry&amp;, unsigned long) (2 samples, 0.01%)</title><rect x="16.1904%" y="517" width="0.0115%" height="15" fill="rgb(225,210,5)" fg:x="2816" fg:w="2"/><text x="16.4404%" y="527.50"></text></g><g><title>clCreateBuffer (2 samples, 0.01%)</title><rect x="16.1904%" y="501" width="0.0115%" height="15" fill="rgb(231,79,45)" fg:x="2816" fg:w="2"/><text x="16.4404%" y="511.50"></text></g><g><title>0x1f344e7d0 (2 samples, 0.01%)</title><rect x="16.1904%" y="485" width="0.0115%" height="15" fill="rgb(224,100,7)" fg:x="2816" fg:w="2"/><text x="16.4404%" y="495.50"></text></g><g><title>0x1f347e2c0 (2 samples, 0.01%)</title><rect x="16.1904%" y="469" width="0.0115%" height="15" fill="rgb(241,198,18)" fg:x="2816" fg:w="2"/><text x="16.4404%" y="479.50"></text></g><g><title>-[_MTLCommandBuffer commitAndWaitUntilSubmitted] (2 samples, 0.01%)</title><rect x="16.2077%" y="389" width="0.0115%" height="15" fill="rgb(252,97,53)" fg:x="2819" fg:w="2"/><text x="16.4577%" y="399.50"></text></g><g><title>-[_MTLCommandQueue submitCommandBuffer:] (3 samples, 0.02%)</title><rect x="16.2192%" y="389" width="0.0172%" height="15" fill="rgb(220,88,7)" fg:x="2821" fg:w="3"/><text x="16.4692%" y="399.50"></text></g><g><title>_dispatch_lane_barrier_sync_invoke_and_complete (3 samples, 0.02%)</title><rect x="16.2192%" y="373" width="0.0172%" height="15" fill="rgb(213,176,14)" fg:x="2821" fg:w="3"/><text x="16.4692%" y="383.50"></text></g><g><title>_dispatch_client_callout (3 samples, 0.02%)</title><rect x="16.2192%" y="357" width="0.0172%" height="15" fill="rgb(246,73,7)" fg:x="2821" fg:w="3"/><text x="16.4692%" y="367.50"></text></g><g><title>__40-[_MTLCommandQueue submitCommandBuffer:]_block_invoke (3 samples, 0.02%)</title><rect x="16.2192%" y="341" width="0.0172%" height="15" fill="rgb(245,64,36)" fg:x="2821" fg:w="3"/><text x="16.4692%" y="351.50"></text></g><g><title>-[_MTLCommandQueue _submitAvailableCommandBuffers] (3 samples, 0.02%)</title><rect x="16.2192%" y="325" width="0.0172%" height="15" fill="rgb(245,80,10)" fg:x="2821" fg:w="3"/><text x="16.4692%" y="335.50"></text></g><g><title>-[IOGPUMetalCommandQueue submitCommandBuffers:count:] (3 samples, 0.02%)</title><rect x="16.2192%" y="309" width="0.0172%" height="15" fill="rgb(232,107,50)" fg:x="2821" fg:w="3"/><text x="16.4692%" y="319.50"></text></g><g><title>-[IOGPUMetalCommandQueue _submitCommandBuffers:count:] (3 samples, 0.02%)</title><rect x="16.2192%" y="293" width="0.0172%" height="15" fill="rgb(253,3,0)" fg:x="2821" fg:w="3"/><text x="16.4692%" y="303.50"></text></g><g><title>IOGPUCommandQueueSubmitCommandBuffers (3 samples, 0.02%)</title><rect x="16.2192%" y="277" width="0.0172%" height="15" fill="rgb(212,99,53)" fg:x="2821" fg:w="3"/><text x="16.4692%" y="287.50"></text></g><g><title>iokit_user_client_trap (3 samples, 0.02%)</title><rect x="16.2192%" y="261" width="0.0172%" height="15" fill="rgb(249,111,54)" fg:x="2821" fg:w="3"/><text x="16.4692%" y="271.50"></text></g><g><title>0x1f3448300 (7 samples, 0.04%)</title><rect x="16.2019%" y="437" width="0.0402%" height="15" fill="rgb(249,55,30)" fg:x="2818" fg:w="7"/><text x="16.4519%" y="447.50"></text></g><g><title>gldFinishQueue (7 samples, 0.04%)</title><rect x="16.2019%" y="421" width="0.0402%" height="15" fill="rgb(237,47,42)" fg:x="2818" fg:w="7"/><text x="16.4519%" y="431.50"></text></g><g><title>GLDQueueRec::flush(GLDQueueRec::FlushMode, bool) (6 samples, 0.03%)</title><rect x="16.2077%" y="405" width="0.0345%" height="15" fill="rgb(211,20,18)" fg:x="2819" fg:w="6"/><text x="16.4577%" y="415.50"></text></g><g><title>0x1f3449098 (8 samples, 0.05%)</title><rect x="16.2019%" y="453" width="0.0460%" height="15" fill="rgb(231,203,46)" fg:x="2818" fg:w="8"/><text x="16.4519%" y="463.50"></text></g><g><title>_dispatch_lane_barrier_sync_invoke_and_complete (9 samples, 0.05%)</title><rect x="16.2019%" y="517" width="0.0517%" height="15" fill="rgb(237,142,3)" fg:x="2818" fg:w="9"/><text x="16.4519%" y="527.50"></text></g><g><title>_dispatch_client_callout (9 samples, 0.05%)</title><rect x="16.2019%" y="501" width="0.0517%" height="15" fill="rgb(241,107,1)" fg:x="2818" fg:w="9"/><text x="16.4519%" y="511.50"></text></g><g><title>0x1f346ccb0 (9 samples, 0.05%)</title><rect x="16.2019%" y="485" width="0.0517%" height="15" fill="rgb(229,83,13)" fg:x="2818" fg:w="9"/><text x="16.4519%" y="495.50"></text></g><g><title>0x1f346a758 (9 samples, 0.05%)</title><rect x="16.2019%" y="469" width="0.0517%" height="15" fill="rgb(241,91,40)" fg:x="2818" fg:w="9"/><text x="16.4519%" y="479.50"></text></g><g><title>cv::FeatureEvaluator::setImage(cv::_InputArray const&amp;, std::__1::vector&lt;float, std::__1::allocator&lt;float&gt;&gt; const&amp;) (645 samples, 3.71%)</title><rect x="12.5568%" y="629" width="3.7084%" height="15" fill="rgb(225,3,45)" fg:x="2184" fg:w="645"/><text x="12.8068%" y="639.50">cv::..</text></g><g><title>void cv::copyVectorToUMat&lt;cv::FeatureEvaluator::ScaleData&gt;(std::__1::vector&lt;cv::FeatureEvaluator::ScaleData, std::__1::allocator&lt;cv::FeatureEvaluator::ScaleData&gt;&gt; const&amp;, cv::UMat&amp;) (14 samples, 0.08%)</title><rect x="16.1847%" y="613" width="0.0805%" height="15" fill="rgb(244,223,14)" fg:x="2815" fg:w="14"/><text x="16.4347%" y="623.50"></text></g><g><title>cv::Mat::copyTo(cv::_OutputArray const&amp;) const (14 samples, 0.08%)</title><rect x="16.1847%" y="597" width="0.0805%" height="15" fill="rgb(224,124,37)" fg:x="2815" fg:w="14"/><text x="16.4347%" y="607.50"></text></g><g><title>cv::ocl::OpenCLAllocator::upload(cv::UMatData*, void const*, int, unsigned long const*, unsigned long const*, unsigned long const*, unsigned long const*) const (11 samples, 0.06%)</title><rect x="16.2019%" y="581" width="0.0632%" height="15" fill="rgb(251,171,30)" fg:x="2818" fg:w="11"/><text x="16.4519%" y="591.50"></text></g><g><title>clEnqueueWriteBuffer (11 samples, 0.06%)</title><rect x="16.2019%" y="565" width="0.0632%" height="15" fill="rgb(236,46,54)" fg:x="2818" fg:w="11"/><text x="16.4519%" y="575.50"></text></g><g><title>0x1f3469214 (11 samples, 0.06%)</title><rect x="16.2019%" y="549" width="0.0632%" height="15" fill="rgb(245,213,5)" fg:x="2818" fg:w="11"/><text x="16.4519%" y="559.50"></text></g><g><title>0x1f346cb7c (11 samples, 0.06%)</title><rect x="16.2019%" y="533" width="0.0632%" height="15" fill="rgb(230,144,27)" fg:x="2818" fg:w="11"/><text x="16.4519%" y="543.50"></text></g><g><title>_dispatch_sync_f_slow (2 samples, 0.01%)</title><rect x="16.2537%" y="517" width="0.0115%" height="15" fill="rgb(220,86,6)" fg:x="2827" fg:w="2"/><text x="16.5037%" y="527.50"></text></g><g><title>_dispatch_sync_invoke_and_complete_recurse (2 samples, 0.01%)</title><rect x="16.2537%" y="501" width="0.0115%" height="15" fill="rgb(240,20,13)" fg:x="2827" fg:w="2"/><text x="16.5037%" y="511.50"></text></g><g><title>_dispatch_client_callout (2 samples, 0.01%)</title><rect x="16.2537%" y="485" width="0.0115%" height="15" fill="rgb(217,89,34)" fg:x="2827" fg:w="2"/><text x="16.5037%" y="495.50"></text></g><g><title>0x1f346ccb0 (2 samples, 0.01%)</title><rect x="16.2537%" y="469" width="0.0115%" height="15" fill="rgb(229,13,5)" fg:x="2827" fg:w="2"/><text x="16.5037%" y="479.50"></text></g><g><title>0x1f346a758 (2 samples, 0.01%)</title><rect x="16.2537%" y="453" width="0.0115%" height="15" fill="rgb(244,67,35)" fg:x="2827" fg:w="2"/><text x="16.5037%" y="463.50"></text></g><g><title>cv::cvtColor(cv::_InputArray const&amp;, cv::_OutputArray const&amp;, int, int, cv::AlgorithmHint) (5 samples, 0.03%)</title><rect x="16.2709%" y="629" width="0.0287%" height="15" fill="rgb(221,40,2)" fg:x="2830" fg:w="5"/><text x="16.5209%" y="639.50"></text></g><g><title>cv::cvtColorBGR2Gray(cv::_InputArray const&amp;, cv::_OutputArray const&amp;, bool) (5 samples, 0.03%)</title><rect x="16.2709%" y="613" width="0.0287%" height="15" fill="rgb(237,157,21)" fg:x="2830" fg:w="5"/><text x="16.5209%" y="623.50"></text></g><g><title>cv::hal::cvtBGRtoGray(unsigned char const*, unsigned long, unsigned char*, unsigned long, int, int, int, int, bool) (5 samples, 0.03%)</title><rect x="16.2709%" y="597" width="0.0287%" height="15" fill="rgb(222,94,11)" fg:x="2830" fg:w="5"/><text x="16.5209%" y="607.50"></text></g><g><title>cv::parallel_for_(cv::Range const&amp;, cv::ParallelLoopBody const&amp;, double) (5 samples, 0.03%)</title><rect x="16.2709%" y="581" width="0.0287%" height="15" fill="rgb(249,113,6)" fg:x="2830" fg:w="5"/><text x="16.5209%" y="591.50"></text></g><g><title>TegraCvtColor_bgr2gray_Invoker::operator()(cv::Range const&amp;) const (5 samples, 0.03%)</title><rect x="16.2709%" y="565" width="0.0287%" height="15" fill="rgb(238,137,36)" fg:x="2830" fg:w="5"/><text x="16.5209%" y="575.50"></text></g><g><title>carotene_o4t::bgr2gray(carotene_o4t::Size2D const&amp;, carotene_o4t::COLOR_SPACE, unsigned char const*, long, unsigned char*, long) (5 samples, 0.03%)</title><rect x="16.2709%" y="549" width="0.0287%" height="15" fill="rgb(210,102,26)" fg:x="2830" fg:w="5"/><text x="16.5209%" y="559.50"></text></g><g><title>cv::CascadeClassifierImpl::runAt(cv::Ptr&lt;cv::FeatureEvaluator&gt;&amp;, cv::Point_&lt;int&gt;, int, double&amp;) (17 samples, 0.10%)</title><rect x="16.2997%" y="613" width="0.0977%" height="15" fill="rgb(218,30,30)" fg:x="2835" fg:w="17"/><text x="16.5497%" y="623.50"></text></g><g><title>DYLD-STUB$$cv::utils::trace::details::Region::Region(cv::utils::trace::details::Region::LocationStaticStorage const&amp;) (4 samples, 0.02%)</title><rect x="16.4549%" y="597" width="0.0230%" height="15" fill="rgb(214,67,26)" fg:x="2862" fg:w="4"/><text x="16.7049%" y="607.50"></text></g><g><title>DYLD-STUB$$cv::utils::trace::details::Region::Region(cv::utils::trace::details::Region::LocationStaticStorage const&amp;) (20 samples, 0.11%)</title><rect x="17.3058%" y="581" width="0.1150%" height="15" fill="rgb(251,9,53)" fg:x="3010" fg:w="20"/><text x="17.5558%" y="591.50"></text></g><g><title>cv::FeatureEvaluator::getScaleData(int) const (15 samples, 0.09%)</title><rect x="17.4208%" y="581" width="0.0862%" height="15" fill="rgb(228,204,25)" fg:x="3030" fg:w="15"/><text x="17.6708%" y="591.50"></text></g><g><title>cv::HaarEvaluator::operator()(int) const (1,528 samples, 8.79%)</title><rect x="17.5070%" y="581" width="8.7851%" height="15" fill="rgb(207,153,8)" fg:x="3045" fg:w="1528"/><text x="17.7570%" y="591.50">cv::HaarEval..</text></g><g><title>cv::HaarEvaluator::setWindow(cv::Point_&lt;int&gt;, int) (520 samples, 2.99%)</title><rect x="26.2922%" y="581" width="2.9897%" height="15" fill="rgb(242,9,16)" fg:x="4573" fg:w="520"/><text x="26.5422%" y="591.50">cv:..</text></g><g><title>cv::FeatureEvaluator::getScaleData(int) const (59 samples, 0.34%)</title><rect x="28.9427%" y="565" width="0.3392%" height="15" fill="rgb(217,211,10)" fg:x="5034" fg:w="59"/><text x="29.1927%" y="575.50"></text></g><g><title>cv::utils::trace::details::Region::Region(cv::utils::trace::details::Region::LocationStaticStorage const&amp;) (42 samples, 0.24%)</title><rect x="29.2819%" y="581" width="0.2415%" height="15" fill="rgb(219,228,52)" fg:x="5093" fg:w="42"/><text x="29.5319%" y="591.50"></text></g><g><title>DYLD-STUB$$cv::utils::trace::details::Region::Region(cv::utils::trace::details::Region::LocationStaticStorage const&amp;) (5 samples, 0.03%)</title><rect x="38.4063%" y="565" width="0.0287%" height="15" fill="rgb(231,92,29)" fg:x="6680" fg:w="5"/><text x="38.6563%" y="575.50"></text></g><g><title>cv::HaarEvaluator::operator()(int) const (5,684 samples, 32.68%)</title><rect x="38.4350%" y="565" width="32.6798%" height="15" fill="rgb(232,8,23)" fg:x="6685" fg:w="5684"/><text x="38.6850%" y="575.50">cv::HaarEvaluator::operator()(int) const</text></g><g><title>cv::CascadeClassifierImpl::runAt(cv::Ptr&lt;cv::FeatureEvaluator&gt;&amp;, cv::Point_&lt;int&gt;, int, double&amp;) (9,544 samples, 54.87%)</title><rect x="16.4779%" y="597" width="54.8726%" height="15" fill="rgb(216,211,34)" fg:x="2866" fg:w="9544"/><text x="16.7279%" y="607.50">cv::CascadeClassifierImpl::runAt(cv::Ptr&lt;cv::FeatureEvaluator&gt;&amp;, cv::Point_&lt;int&gt;, int, doub..</text></g><g><title>int cv::predictOrderedStump&lt;cv::HaarEvaluator&gt;(cv::CascadeClassifierImpl&amp;, cv::Ptr&lt;cv::FeatureEvaluator&gt;&amp;, double&amp;) (7,275 samples, 41.83%)</title><rect x="29.5234%" y="581" width="41.8272%" height="15" fill="rgb(236,151,0)" fg:x="5135" fg:w="7275"/><text x="29.7734%" y="591.50">int cv::predictOrderedStump&lt;cv::HaarEvaluator&gt;(cv::CascadeClassifier..</text></g><g><title>cv::utils::trace::details::Region::Region(cv::utils::trace::details::Region::LocationStaticStorage const&amp;) (41 samples, 0.24%)</title><rect x="71.1148%" y="565" width="0.2357%" height="15" fill="rgb(209,168,3)" fg:x="12369" fg:w="41"/><text x="71.3648%" y="575.50"></text></g><g><title>cv::CascadeClassifierInvoker::operator()(cv::Range const&amp;) const (31 samples, 0.18%)</title><rect x="71.3505%" y="597" width="0.1782%" height="15" fill="rgb(208,129,28)" fg:x="12410" fg:w="31"/><text x="71.6005%" y="607.50"></text></g><g><title>cv::HaarEvaluator::setWindow(cv::Point_&lt;int&gt;, int) (12 samples, 0.07%)</title><rect x="71.5288%" y="597" width="0.0690%" height="15" fill="rgb(229,78,22)" fg:x="12441" fg:w="12"/><text x="71.7788%" y="607.50"></text></g><g><title>cv::utils::trace::details::Region::Region(cv::utils::trace::details::Region::LocationStaticStorage const&amp;) (19 samples, 0.11%)</title><rect x="71.5978%" y="597" width="0.1092%" height="15" fill="rgb(228,187,13)" fg:x="12453" fg:w="19"/><text x="71.8478%" y="607.50"></text></g><g><title>cv::CascadeClassifierImpl::detectMultiScaleNoGrouping(cv::_InputArray const&amp;, std::__1::vector&lt;cv::Rect_&lt;int&gt;, std::__1::allocator&lt;cv::Rect_&lt;int&gt;&gt;&gt;&amp;, std::__1::vector&lt;int, std::__1::allocator&lt;int&gt;&gt;&amp;, std::__1::vector&lt;double, std::__1::allocator&lt;double&gt;&gt;&amp;, double, cv::Size_&lt;int&gt;, cv::Size_&lt;int&gt;, bool) (10,318 samples, 59.32%)</title><rect x="12.5568%" y="645" width="59.3227%" height="15" fill="rgb(240,119,24)" fg:x="2184" fg:w="10318"/><text x="12.8068%" y="655.50">cv::CascadeClassifierImpl::detectMultiScaleNoGrouping(cv::_InputArray const&amp;, std::__1::vector&lt;cv:..</text></g><g><title>cv::parallel_for_(cv::Range const&amp;, cv::ParallelLoopBody const&amp;, double) (9,667 samples, 55.58%)</title><rect x="16.2997%" y="629" width="55.5798%" height="15" fill="rgb(209,194,42)" fg:x="2835" fg:w="9667"/><text x="16.5497%" y="639.50">cv::parallel_for_(cv::Range const&amp;, cv::ParallelLoopBody const&amp;, double)</text></g><g><title>cv::CascadeClassifierInvoker::operator()(cv::Range const&amp;) const (9,650 samples, 55.48%)</title><rect x="16.3974%" y="613" width="55.4821%" height="15" fill="rgb(247,200,46)" fg:x="2852" fg:w="9650"/><text x="16.6474%" y="623.50">cv::CascadeClassifierInvoker::operator()(cv::Range const&amp;) const</text></g><g><title>int cv::predictOrderedStump&lt;cv::HaarEvaluator&gt;(cv::CascadeClassifierImpl&amp;, cv::Ptr&lt;cv::FeatureEvaluator&gt;&amp;, double&amp;) (30 samples, 0.17%)</title><rect x="71.7070%" y="597" width="0.1725%" height="15" fill="rgb(218,76,16)" fg:x="12472" fg:w="30"/><text x="71.9570%" y="607.50"></text></g><g><title>cv_CascadeClassifier_detectMultiScale_const__InputArrayR_vectorLRectGR (10,321 samples, 59.34%)</title><rect x="12.5568%" y="709" width="59.3400%" height="15" fill="rgb(225,21,48)" fg:x="2184" fg:w="10321"/><text x="12.8068%" y="719.50">cv_CascadeClassifier_detectMultiScale_const__InputArrayR_vectorLRectGR</text></g><g><title>cv::CascadeClassifier::detectMultiScale(cv::_InputArray const&amp;, std::__1::vector&lt;cv::Rect_&lt;int&gt;, std::__1::allocator&lt;cv::Rect_&lt;int&gt;&gt;&gt;&amp;, double, int, int, cv::Size_&lt;int&gt;, cv::Size_&lt;int&gt;) (10,321 samples, 59.34%)</title><rect x="12.5568%" y="693" width="59.3400%" height="15" fill="rgb(239,223,50)" fg:x="2184" fg:w="10321"/><text x="12.8068%" y="703.50">cv::CascadeClassifier::detectMultiScale(cv::_InputArray const&amp;, std::__1::vector&lt;cv::Rect_&lt;int&gt;, s..</text></g><g><title>cv::CascadeClassifierImpl::detectMultiScale(cv::_InputArray const&amp;, std::__1::vector&lt;cv::Rect_&lt;int&gt;, std::__1::allocator&lt;cv::Rect_&lt;int&gt;&gt;&gt;&amp;, double, int, int, cv::Size_&lt;int&gt;, cv::Size_&lt;int&gt;) (10,321 samples, 59.34%)</title><rect x="12.5568%" y="677" width="59.3400%" height="15" fill="rgb(244,45,21)" fg:x="2184" fg:w="10321"/><text x="12.8068%" y="687.50">cv::CascadeClassifierImpl::detectMultiScale(cv::_InputArray const&amp;, std::__1::vector&lt;cv::Rect_&lt;int..</text></g><g><title>cv::CascadeClassifierImpl::detectMultiScale(cv::_InputArray const&amp;, std::__1::vector&lt;cv::Rect_&lt;int&gt;, std::__1::allocator&lt;cv::Rect_&lt;int&gt;&gt;&gt;&amp;, std::__1::vector&lt;int, std::__1::allocator&lt;int&gt;&gt;&amp;, std::__1::vector&lt;double, std::__1::allocator&lt;double&gt;&gt;&amp;, double, int, int, cv::Size_&lt;int&gt;, cv::Size_&lt;int&gt;, bool) (10,321 samples, 59.34%)</title><rect x="12.5568%" y="661" width="59.3400%" height="15" fill="rgb(232,33,43)" fg:x="2184" fg:w="10321"/><text x="12.8068%" y="671.50">cv::CascadeClassifierImpl::detectMultiScale(cv::_InputArray const&amp;, std::__1::vector&lt;cv::Rect_&lt;int..</text></g><g><title>cv::groupRectangles(std::__1::vector&lt;cv::Rect_&lt;int&gt;, std::__1::allocator&lt;cv::Rect_&lt;int&gt;&gt;&gt;&amp;, int, double) (3 samples, 0.02%)</title><rect x="71.8795%" y="645" width="0.0172%" height="15" fill="rgb(209,8,3)" fg:x="12502" fg:w="3"/><text x="72.1295%" y="655.50"></text></g><g><title>cv::groupRectangles(std::__1::vector&lt;cv::Rect_&lt;int&gt;, std::__1::allocator&lt;cv::Rect_&lt;int&gt;&gt;&gt;&amp;, int, double, std::__1::vector&lt;int, std::__1::allocator&lt;int&gt;&gt;*, std::__1::vector&lt;double, std::__1::allocator&lt;double&gt;&gt;*) (3 samples, 0.02%)</title><rect x="71.8795%" y="629" width="0.0172%" height="15" fill="rgb(214,25,53)" fg:x="12502" fg:w="3"/><text x="72.1295%" y="639.50"></text></g><g><title>int cv::partition&lt;cv::Rect_&lt;int&gt;, cv::SimilarRects&gt;(std::__1::vector&lt;cv::Rect_&lt;int&gt;, std::__1::allocator&lt;cv::Rect_&lt;int&gt;&gt;&gt; const&amp;, std::__1::vector&lt;int, std::__1::allocator&lt;int&gt;&gt;&amp;, cv::SimilarRects) (3 samples, 0.02%)</title><rect x="71.8795%" y="613" width="0.0172%" height="15" fill="rgb(254,186,54)" fg:x="12502" fg:w="3"/><text x="72.1295%" y="623.50"></text></g><g><title>face_cropper::face_detect::FaceDetector::detect_and_crop_face (10,324 samples, 59.36%)</title><rect x="12.5568%" y="725" width="59.3572%" height="15" fill="rgb(208,174,49)" fg:x="2184" fg:w="10324"/><text x="12.8068%" y="735.50">face_cropper::face_detect::FaceDetector::detect_and_crop_face</text></g><g><title>cv_Mat_clone_const (3 samples, 0.02%)</title><rect x="71.8967%" y="709" width="0.0172%" height="15" fill="rgb(233,191,51)" fg:x="12505" fg:w="3"/><text x="72.1467%" y="719.50"></text></g><g><title>cv::Mat::clone() const (3 samples, 0.02%)</title><rect x="71.8967%" y="693" width="0.0172%" height="15" fill="rgb(222,134,10)" fg:x="12505" fg:w="3"/><text x="72.1467%" y="703.50"></text></g><g><title>cv::Mat::copyTo(cv::_OutputArray const&amp;) const (3 samples, 0.02%)</title><rect x="71.8967%" y="677" width="0.0172%" height="15" fill="rgb(230,226,20)" fg:x="12505" fg:w="3"/><text x="72.1467%" y="687.50"></text></g><g><title>_platform_memmove (3 samples, 0.02%)</title><rect x="71.8967%" y="661" width="0.0172%" height="15" fill="rgb(251,111,25)" fg:x="12505" fg:w="3"/><text x="72.1467%" y="671.50"></text></g><g><title>__close_nocancel (3 samples, 0.02%)</title><rect x="71.9140%" y="661" width="0.0172%" height="15" fill="rgb(224,40,46)" fg:x="12508" fg:w="3"/><text x="72.1640%" y="671.50"></text></g><g><title>fclose (5 samples, 0.03%)</title><rect x="71.9312%" y="661" width="0.0287%" height="15" fill="rgb(236,108,47)" fg:x="12511" fg:w="5"/><text x="72.1812%" y="671.50"></text></g><g><title>__close_nocancel (5 samples, 0.03%)</title><rect x="71.9312%" y="645" width="0.0287%" height="15" fill="rgb(234,93,0)" fg:x="12511" fg:w="5"/><text x="72.1812%" y="655.50"></text></g><g><title>__open_nocancel (2 samples, 0.01%)</title><rect x="71.9600%" y="645" width="0.0115%" height="15" fill="rgb(224,213,32)" fg:x="12516" fg:w="2"/><text x="72.2100%" y="655.50"></text></g><g><title>fopen (12 samples, 0.07%)</title><rect x="71.9600%" y="661" width="0.0690%" height="15" fill="rgb(251,11,48)" fg:x="12516" fg:w="12"/><text x="72.2100%" y="671.50"></text></g><g><title>open$NOCANCEL (10 samples, 0.06%)</title><rect x="71.9715%" y="645" width="0.0575%" height="15" fill="rgb(236,173,5)" fg:x="12518" fg:w="10"/><text x="72.2215%" y="655.50"></text></g><g><title>__open_nocancel (10 samples, 0.06%)</title><rect x="71.9715%" y="629" width="0.0575%" height="15" fill="rgb(230,95,12)" fg:x="12518" fg:w="10"/><text x="72.2215%" y="639.50"></text></g><g><title>png_do_bgr (4 samples, 0.02%)</title><rect x="72.0290%" y="629" width="0.0230%" height="15" fill="rgb(232,209,1)" fg:x="12528" fg:w="4"/><text x="72.2790%" y="639.50"></text></g><g><title>0x1a092b128 (10 samples, 0.06%)</title><rect x="72.3222%" y="565" width="0.0575%" height="15" fill="rgb(232,6,1)" fg:x="12579" fg:w="10"/><text x="72.5722%" y="575.50"></text></g><g><title>0x1a092cf10 (2 samples, 0.01%)</title><rect x="72.3682%" y="549" width="0.0115%" height="15" fill="rgb(210,224,50)" fg:x="12587" fg:w="2"/><text x="72.6182%" y="559.50"></text></g><g><title>0x1a092f954 (13 samples, 0.07%)</title><rect x="72.3797%" y="549" width="0.0747%" height="15" fill="rgb(228,127,35)" fg:x="12589" fg:w="13"/><text x="72.6297%" y="559.50"></text></g><g><title>0x1a09301a4 (9 samples, 0.05%)</title><rect x="72.4027%" y="533" width="0.0517%" height="15" fill="rgb(245,102,45)" fg:x="12593" fg:w="9"/><text x="72.6527%" y="543.50"></text></g><g><title>0x1a092fde8 (28 samples, 0.16%)</title><rect x="72.4544%" y="549" width="0.1610%" height="15" fill="rgb(214,1,49)" fg:x="12602" fg:w="28"/><text x="72.7044%" y="559.50"></text></g><g><title>0x1a09301a4 (4 samples, 0.02%)</title><rect x="72.6154%" y="549" width="0.0230%" height="15" fill="rgb(226,163,40)" fg:x="12630" fg:w="4"/><text x="72.8654%" y="559.50"></text></g><g><title>0x1a0930288 (2 samples, 0.01%)</title><rect x="72.6384%" y="549" width="0.0115%" height="15" fill="rgb(239,212,28)" fg:x="12634" fg:w="2"/><text x="72.8884%" y="559.50"></text></g><g><title>0x1a092f400 (49 samples, 0.28%)</title><rect x="72.3797%" y="565" width="0.2817%" height="15" fill="rgb(220,20,13)" fg:x="12589" fg:w="49"/><text x="72.6297%" y="575.50"></text></g><g><title>0x1a093038c (2 samples, 0.01%)</title><rect x="72.6499%" y="549" width="0.0115%" height="15" fill="rgb(210,164,35)" fg:x="12636" fg:w="2"/><text x="72.8999%" y="559.50"></text></g><g><title>deflate (104 samples, 0.60%)</title><rect x="72.1037%" y="597" width="0.5979%" height="15" fill="rgb(248,109,41)" fg:x="12541" fg:w="104"/><text x="72.3537%" y="607.50"></text></g><g><title>0x1a092be94 (104 samples, 0.60%)</title><rect x="72.1037%" y="581" width="0.5979%" height="15" fill="rgb(238,23,50)" fg:x="12541" fg:w="104"/><text x="72.3537%" y="591.50"></text></g><g><title>0x1a092fde8 (7 samples, 0.04%)</title><rect x="72.6614%" y="565" width="0.0402%" height="15" fill="rgb(211,48,49)" fg:x="12638" fg:w="7"/><text x="72.9114%" y="575.50"></text></g><g><title>__swrite (8 samples, 0.05%)</title><rect x="72.7017%" y="485" width="0.0460%" height="15" fill="rgb(223,36,21)" fg:x="12645" fg:w="8"/><text x="72.9517%" y="495.50"></text></g><g><title>__write_nocancel (8 samples, 0.05%)</title><rect x="72.7017%" y="469" width="0.0460%" height="15" fill="rgb(207,123,46)" fg:x="12645" fg:w="8"/><text x="72.9517%" y="479.50"></text></g><g><title>__sflush (9 samples, 0.05%)</title><rect x="72.7017%" y="517" width="0.0517%" height="15" fill="rgb(240,218,32)" fg:x="12645" fg:w="9"/><text x="72.9517%" y="527.50"></text></g><g><title>_swrite (9 samples, 0.05%)</title><rect x="72.7017%" y="501" width="0.0517%" height="15" fill="rgb(252,5,43)" fg:x="12645" fg:w="9"/><text x="72.9517%" y="511.50"></text></g><g><title>__swrite (4 samples, 0.02%)</title><rect x="72.7534%" y="501" width="0.0230%" height="15" fill="rgb(252,84,19)" fg:x="12654" fg:w="4"/><text x="73.0034%" y="511.50"></text></g><g><title>__write_nocancel (4 samples, 0.02%)</title><rect x="72.7534%" y="485" width="0.0230%" height="15" fill="rgb(243,152,39)" fg:x="12654" fg:w="4"/><text x="73.0034%" y="495.50"></text></g><g><title>png_write_image (132 samples, 0.76%)</title><rect x="72.0290%" y="661" width="0.7589%" height="15" fill="rgb(234,160,15)" fg:x="12528" fg:w="132"/><text x="72.2790%" y="671.50"></text></g><g><title>png_write_row (132 samples, 0.76%)</title><rect x="72.0290%" y="645" width="0.7589%" height="15" fill="rgb(237,34,20)" fg:x="12528" fg:w="132"/><text x="72.2790%" y="655.50"></text></g><g><title>png_write_find_filter (128 samples, 0.74%)</title><rect x="72.0520%" y="629" width="0.7359%" height="15" fill="rgb(229,97,13)" fg:x="12532" fg:w="128"/><text x="72.3020%" y="639.50"></text></g><g><title>png_compress_IDAT (119 samples, 0.68%)</title><rect x="72.1037%" y="613" width="0.6842%" height="15" fill="rgb(234,71,50)" fg:x="12541" fg:w="119"/><text x="72.3537%" y="623.50"></text></g><g><title>png_write_complete_chunk (15 samples, 0.09%)</title><rect x="72.7017%" y="597" width="0.0862%" height="15" fill="rgb(253,155,4)" fg:x="12645" fg:w="15"/><text x="72.9517%" y="607.50"></text></g><g><title>png_write_chunk_data (15 samples, 0.09%)</title><rect x="72.7017%" y="581" width="0.0862%" height="15" fill="rgb(222,185,37)" fg:x="12645" fg:w="15"/><text x="72.9517%" y="591.50"></text></g><g><title>png_default_write_data (15 samples, 0.09%)</title><rect x="72.7017%" y="565" width="0.0862%" height="15" fill="rgb(251,177,13)" fg:x="12645" fg:w="15"/><text x="72.9517%" y="575.50"></text></g><g><title>fwrite (15 samples, 0.09%)</title><rect x="72.7017%" y="549" width="0.0862%" height="15" fill="rgb(250,179,40)" fg:x="12645" fg:w="15"/><text x="72.9517%" y="559.50"></text></g><g><title>__sfvwrite (15 samples, 0.09%)</title><rect x="72.7017%" y="533" width="0.0862%" height="15" fill="rgb(242,44,2)" fg:x="12645" fg:w="15"/><text x="72.9517%" y="543.50"></text></g><g><title>_swrite (6 samples, 0.03%)</title><rect x="72.7534%" y="517" width="0.0345%" height="15" fill="rgb(216,177,13)" fg:x="12654" fg:w="6"/><text x="73.0034%" y="527.50"></text></g><g><title>__write_nocancel (2 samples, 0.01%)</title><rect x="72.7764%" y="501" width="0.0115%" height="15" fill="rgb(216,106,43)" fg:x="12658" fg:w="2"/><text x="73.0264%" y="511.50"></text></g><g><title>cv::PngEncoder::write(cv::Mat const&amp;, std::__1::vector&lt;int, std::__1::allocator&lt;int&gt;&gt; const&amp;) (153 samples, 0.88%)</title><rect x="71.9140%" y="677" width="0.8797%" height="15" fill="rgb(216,183,2)" fg:x="12508" fg:w="153"/><text x="72.1640%" y="687.50"></text></g><g><title>face_cropper::face_detect::FaceDetector::save_cropped (154 samples, 0.89%)</title><rect x="71.9140%" y="725" width="0.8854%" height="15" fill="rgb(249,75,3)" fg:x="12508" fg:w="154"/><text x="72.1640%" y="735.50"></text></g><g><title>cv_imwrite_const_StringR_const__InputArrayR (154 samples, 0.89%)</title><rect x="71.9140%" y="709" width="0.8854%" height="15" fill="rgb(219,67,39)" fg:x="12508" fg:w="154"/><text x="72.1640%" y="719.50"></text></g><g><title>cv::imwrite(std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt; const&amp;, cv::_InputArray const&amp;, std::__1::vector&lt;int, std::__1::allocator&lt;int&gt;&gt; const&amp;) (154 samples, 0.89%)</title><rect x="71.9140%" y="693" width="0.8854%" height="15" fill="rgb(253,228,2)" fg:x="12508" fg:w="154"/><text x="72.1640%" y="703.50"></text></g><g><title>png_read_filter_row_avg3_neon (18 samples, 0.10%)</title><rect x="72.8109%" y="629" width="0.1035%" height="15" fill="rgb(235,138,27)" fg:x="12664" fg:w="18"/><text x="73.0609%" y="639.50"></text></g><g><title>png_read_filter_row_paeth3_neon (42 samples, 0.24%)</title><rect x="72.9144%" y="629" width="0.2415%" height="15" fill="rgb(236,97,51)" fg:x="12682" fg:w="42"/><text x="73.1644%" y="639.50"></text></g><g><title>png_do_bgr (9 samples, 0.05%)</title><rect x="73.1789%" y="613" width="0.0517%" height="15" fill="rgb(240,80,30)" fg:x="12728" fg:w="9"/><text x="73.4289%" y="623.50"></text></g><g><title>0x1a092ada0 (2 samples, 0.01%)</title><rect x="73.2364%" y="597" width="0.0115%" height="15" fill="rgb(230,178,19)" fg:x="12738" fg:w="2"/><text x="73.4864%" y="607.50"></text></g><g><title>0x1a0932a3c (148 samples, 0.85%)</title><rect x="73.2479%" y="597" width="0.8509%" height="15" fill="rgb(210,190,27)" fg:x="12740" fg:w="148"/><text x="73.4979%" y="607.50"></text></g><g><title>0x1a092ab88 (8 samples, 0.05%)</title><rect x="74.9899%" y="581" width="0.0460%" height="15" fill="rgb(222,107,31)" fg:x="13043" fg:w="8"/><text x="75.2399%" y="591.50"></text></g><g><title>0x1a092e7fc (8 samples, 0.05%)</title><rect x="74.9899%" y="565" width="0.0460%" height="15" fill="rgb(216,127,34)" fg:x="13043" fg:w="8"/><text x="75.2399%" y="575.50"></text></g><g><title>0x1a092ada0 (3 samples, 0.02%)</title><rect x="75.0359%" y="581" width="0.0172%" height="15" fill="rgb(234,116,52)" fg:x="13051" fg:w="3"/><text x="75.2859%" y="591.50"></text></g><g><title>0x1a092e130 (4 samples, 0.02%)</title><rect x="75.0532%" y="581" width="0.0230%" height="15" fill="rgb(222,124,15)" fg:x="13054" fg:w="4"/><text x="75.3032%" y="591.50"></text></g><g><title>_platform_memmove (4 samples, 0.02%)</title><rect x="75.0532%" y="565" width="0.0230%" height="15" fill="rgb(231,179,28)" fg:x="13054" fg:w="4"/><text x="75.3032%" y="575.50"></text></g><g><title>inflate (172 samples, 0.99%)</title><rect x="74.0988%" y="597" width="0.9889%" height="15" fill="rgb(226,93,45)" fg:x="12888" fg:w="172"/><text x="74.3488%" y="607.50"></text></g><g><title>png_calculate_crc (2 samples, 0.01%)</title><rect x="75.0877%" y="597" width="0.0115%" height="15" fill="rgb(215,8,51)" fg:x="13060" fg:w="2"/><text x="75.3377%" y="607.50"></text></g><g><title>crc32_z (2 samples, 0.01%)</title><rect x="75.0877%" y="581" width="0.0115%" height="15" fill="rgb(223,106,5)" fg:x="13060" fg:w="2"/><text x="75.3377%" y="591.50"></text></g><g><title>0x1a0930820 (2 samples, 0.01%)</title><rect x="75.0877%" y="565" width="0.0115%" height="15" fill="rgb(250,191,5)" fg:x="13060" fg:w="2"/><text x="75.3377%" y="575.50"></text></g><g><title>__read_nocancel (4 samples, 0.02%)</title><rect x="75.1049%" y="501" width="0.0230%" height="15" fill="rgb(242,132,44)" fg:x="13063" fg:w="4"/><text x="75.3549%" y="511.50"></text></g><g><title>__srefill1 (10 samples, 0.06%)</title><rect x="75.1049%" y="533" width="0.0575%" height="15" fill="rgb(251,152,29)" fg:x="13063" fg:w="10"/><text x="75.3549%" y="543.50"></text></g><g><title>_sread (10 samples, 0.06%)</title><rect x="75.1049%" y="517" width="0.0575%" height="15" fill="rgb(218,179,5)" fg:x="13063" fg:w="10"/><text x="75.3549%" y="527.50"></text></g><g><title>__sread (6 samples, 0.03%)</title><rect x="75.1279%" y="501" width="0.0345%" height="15" fill="rgb(227,67,19)" fg:x="13067" fg:w="6"/><text x="75.3779%" y="511.50"></text></g><g><title>__read_nocancel (6 samples, 0.03%)</title><rect x="75.1279%" y="485" width="0.0345%" height="15" fill="rgb(233,119,31)" fg:x="13067" fg:w="6"/><text x="75.3779%" y="495.50"></text></g><g><title>cv::PngDecoder::readData(cv::Mat&amp;) (413 samples, 2.37%)</title><rect x="72.7994%" y="661" width="2.3745%" height="15" fill="rgb(241,120,22)" fg:x="12662" fg:w="413"/><text x="73.0494%" y="671.50">cv..</text></g><g><title>png_read_image (412 samples, 2.37%)</title><rect x="72.8052%" y="645" width="2.3688%" height="15" fill="rgb(224,102,30)" fg:x="12663" fg:w="412"/><text x="73.0552%" y="655.50">pn..</text></g><g><title>png_read_row (350 samples, 2.01%)</title><rect x="73.1616%" y="629" width="2.0123%" height="15" fill="rgb(210,164,37)" fg:x="12725" fg:w="350"/><text x="73.4116%" y="639.50">p..</text></g><g><title>png_read_IDAT_data (338 samples, 1.94%)</title><rect x="73.2306%" y="613" width="1.9433%" height="15" fill="rgb(226,191,16)" fg:x="12737" fg:w="338"/><text x="73.4806%" y="623.50">p..</text></g><g><title>png_crc_read (12 samples, 0.07%)</title><rect x="75.1049%" y="597" width="0.0690%" height="15" fill="rgb(214,40,45)" fg:x="13063" fg:w="12"/><text x="75.3549%" y="607.50"></text></g><g><title>png_default_read_data (12 samples, 0.07%)</title><rect x="75.1049%" y="581" width="0.0690%" height="15" fill="rgb(244,29,26)" fg:x="13063" fg:w="12"/><text x="75.3549%" y="591.50"></text></g><g><title>fread (12 samples, 0.07%)</title><rect x="75.1049%" y="565" width="0.0690%" height="15" fill="rgb(216,16,5)" fg:x="13063" fg:w="12"/><text x="75.3549%" y="575.50"></text></g><g><title>__fread (12 samples, 0.07%)</title><rect x="75.1049%" y="549" width="0.0690%" height="15" fill="rgb(249,76,35)" fg:x="13063" fg:w="12"/><text x="75.3549%" y="559.50"></text></g><g><title>_platform_memmove (2 samples, 0.01%)</title><rect x="75.1624%" y="533" width="0.0115%" height="15" fill="rgb(207,11,44)" fg:x="13073" fg:w="2"/><text x="75.4124%" y="543.50"></text></g><g><title>__read_nocancel (2 samples, 0.01%)</title><rect x="75.1739%" y="565" width="0.0115%" height="15" fill="rgb(228,190,49)" fg:x="13075" fg:w="2"/><text x="75.4239%" y="575.50"></text></g><g><title>cv::PngDecoder::read_chunk(cv::Chunk&amp;) (6 samples, 0.03%)</title><rect x="75.1739%" y="645" width="0.0345%" height="15" fill="rgb(214,173,12)" fg:x="13075" fg:w="6"/><text x="75.4239%" y="655.50"></text></g><g><title>fread (6 samples, 0.03%)</title><rect x="75.1739%" y="629" width="0.0345%" height="15" fill="rgb(218,26,35)" fg:x="13075" fg:w="6"/><text x="75.4239%" y="639.50"></text></g><g><title>__fread (6 samples, 0.03%)</title><rect x="75.1739%" y="613" width="0.0345%" height="15" fill="rgb(220,200,19)" fg:x="13075" fg:w="6"/><text x="75.4239%" y="623.50"></text></g><g><title>__srefill1 (6 samples, 0.03%)</title><rect x="75.1739%" y="597" width="0.0345%" height="15" fill="rgb(239,95,49)" fg:x="13075" fg:w="6"/><text x="75.4239%" y="607.50"></text></g><g><title>_sread (6 samples, 0.03%)</title><rect x="75.1739%" y="581" width="0.0345%" height="15" fill="rgb(235,85,53)" fg:x="13075" fg:w="6"/><text x="75.4239%" y="591.50"></text></g><g><title>__sread (4 samples, 0.02%)</title><rect x="75.1854%" y="565" width="0.0230%" height="15" fill="rgb(233,133,31)" fg:x="13077" fg:w="4"/><text x="75.4354%" y="575.50"></text></g><g><title>__read_nocancel (4 samples, 0.02%)</title><rect x="75.1854%" y="549" width="0.0230%" height="15" fill="rgb(218,25,20)" fg:x="13077" fg:w="4"/><text x="75.4354%" y="559.50"></text></g><g><title>cv::PngDecoder::readHeader() (7 samples, 0.04%)</title><rect x="75.1739%" y="661" width="0.0402%" height="15" fill="rgb(252,210,38)" fg:x="13075" fg:w="7"/><text x="75.4239%" y="671.50"></text></g><g><title>cv::PngDecoder::~PngDecoder() (2 samples, 0.01%)</title><rect x="75.2142%" y="661" width="0.0115%" height="15" fill="rgb(242,134,21)" fg:x="13082" fg:w="2"/><text x="75.4642%" y="671.50"></text></g><g><title>fclose (2 samples, 0.01%)</title><rect x="75.2142%" y="645" width="0.0115%" height="15" fill="rgb(213,28,48)" fg:x="13082" fg:w="2"/><text x="75.4642%" y="655.50"></text></g><g><title>__close_nocancel (2 samples, 0.01%)</title><rect x="75.2142%" y="629" width="0.0115%" height="15" fill="rgb(250,196,2)" fg:x="13082" fg:w="2"/><text x="75.4642%" y="639.50"></text></g><g><title>__close_nocancel (2 samples, 0.01%)</title><rect x="75.2257%" y="645" width="0.0115%" height="15" fill="rgb(227,5,17)" fg:x="13084" fg:w="2"/><text x="75.4757%" y="655.50"></text></g><g><title>fopen (3 samples, 0.02%)</title><rect x="75.2372%" y="645" width="0.0172%" height="15" fill="rgb(221,226,24)" fg:x="13086" fg:w="3"/><text x="75.4872%" y="655.50"></text></g><g><title>open$NOCANCEL (2 samples, 0.01%)</title><rect x="75.2429%" y="629" width="0.0115%" height="15" fill="rgb(211,5,48)" fg:x="13087" fg:w="2"/><text x="75.4929%" y="639.50"></text></g><g><title>__open_nocancel (2 samples, 0.01%)</title><rect x="75.2429%" y="613" width="0.0115%" height="15" fill="rgb(219,150,6)" fg:x="13087" fg:w="2"/><text x="75.4929%" y="623.50"></text></g><g><title>&lt;&amp;rayon::iter::par_bridge::IterParallelProducer&lt;Iter&gt; as rayon::iter::plumbing::UnindexedProducer&gt;::fold_with (12,663 samples, 72.81%)</title><rect x="2.4550%" y="773" width="72.8052%" height="15" fill="rgb(251,46,16)" fg:x="427" fg:w="12663"/><text x="2.7050%" y="783.50">&lt;&amp;rayon::iter::par_bridge::IterParallelProducer&lt;Iter&gt; as rayon::iter::plumbing::UnindexedProducer&gt;::fold_with</text></g><g><title>&lt;indicatif::rayon::ProgressFolder&lt;C&gt; as rayon::iter::plumbing::Folder&lt;T&gt;&gt;::consume (12,663 samples, 72.81%)</title><rect x="2.4550%" y="757" width="72.8052%" height="15" fill="rgb(220,204,40)" fg:x="427" fg:w="12663"/><text x="2.7050%" y="767.50">&lt;indicatif::rayon::ProgressFolder&lt;C&gt; as rayon::iter::plumbing::Folder&lt;T&gt;&gt;::consume</text></g><g><title>face_cropper::pipeline::detect_and_save (10,907 samples, 62.71%)</title><rect x="12.5510%" y="741" width="62.7091%" height="15" fill="rgb(211,85,2)" fg:x="2183" fg:w="10907"/><text x="12.8010%" y="751.50">face_cropper::pipeline::detect_and_save</text></g><g><title>face_cropper::face_detect::load_image (428 samples, 2.46%)</title><rect x="72.7994%" y="725" width="2.4608%" height="15" fill="rgb(229,17,7)" fg:x="12662" fg:w="428"/><text x="73.0494%" y="735.50">fa..</text></g><g><title>cv_imread_const_StringR_int (428 samples, 2.46%)</title><rect x="72.7994%" y="709" width="2.4608%" height="15" fill="rgb(239,72,28)" fg:x="12662" fg:w="428"/><text x="73.0494%" y="719.50">cv..</text></g><g><title>cv::imread(std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt; const&amp;, int) (428 samples, 2.46%)</title><rect x="72.7994%" y="693" width="2.4608%" height="15" fill="rgb(230,47,54)" fg:x="12662" fg:w="428"/><text x="73.0494%" y="703.50">cv..</text></g><g><title>cv::imread_(std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt; const&amp;, int, cv::_OutputArray const&amp;) (428 samples, 2.46%)</title><rect x="72.7994%" y="677" width="2.4608%" height="15" fill="rgb(214,50,8)" fg:x="12662" fg:w="428"/><text x="73.0494%" y="687.50">cv..</text></g><g><title>cv::findDecoder(std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt; const&amp;) (6 samples, 0.03%)</title><rect x="75.2257%" y="661" width="0.0345%" height="15" fill="rgb(216,198,43)" fg:x="13084" fg:w="6"/><text x="75.4757%" y="671.50"></text></g><g><title>&lt;deduplicated_symbol&gt; (3 samples, 0.02%)</title><rect x="75.2602%" y="597" width="0.0172%" height="15" fill="rgb(234,20,35)" fg:x="13090" fg:w="3"/><text x="75.5102%" y="607.50"></text></g><g><title>std::__1::__shared_ptr_pointer&lt;cv::HaarEvaluator*, std::__1::shared_ptr&lt;cv::FeatureEvaluator&gt;::__shared_ptr_default_delete&lt;cv::FeatureEvaluator, cv::HaarEvaluator&gt;, std::__1::allocator&lt;cv::HaarEvaluator&gt;&gt;::__on_zero_shared() (3 samples, 0.02%)</title><rect x="75.2602%" y="581" width="0.0172%" height="15" fill="rgb(254,45,19)" fg:x="13090" fg:w="3"/><text x="75.5102%" y="591.50"></text></g><g><title>cv::FeatureEvaluator::~FeatureEvaluator() (3 samples, 0.02%)</title><rect x="75.2602%" y="565" width="0.0172%" height="15" fill="rgb(219,14,44)" fg:x="13090" fg:w="3"/><text x="75.5102%" y="575.50"></text></g><g><title>cv::Mat::~Mat() (3 samples, 0.02%)</title><rect x="75.2602%" y="549" width="0.0172%" height="15" fill="rgb(217,220,26)" fg:x="13090" fg:w="3"/><text x="75.5102%" y="559.50"></text></g><g><title>cv::Mat::release() (3 samples, 0.02%)</title><rect x="75.2602%" y="533" width="0.0172%" height="15" fill="rgb(213,158,28)" fg:x="13090" fg:w="3"/><text x="75.5102%" y="543.50"></text></g><g><title>cv::StdMatAllocator::deallocate(cv::UMatData*) const (3 samples, 0.02%)</title><rect x="75.2602%" y="517" width="0.0172%" height="15" fill="rgb(252,51,52)" fg:x="13090" fg:w="3"/><text x="75.5102%" y="527.50"></text></g><g><title>_szone_free (3 samples, 0.02%)</title><rect x="75.2602%" y="501" width="0.0172%" height="15" fill="rgb(246,89,16)" fg:x="13090" fg:w="3"/><text x="75.5102%" y="511.50"></text></g><g><title>madvise (2 samples, 0.01%)</title><rect x="75.2659%" y="485" width="0.0115%" height="15" fill="rgb(216,158,49)" fg:x="13091" fg:w="2"/><text x="75.5159%" y="495.50"></text></g><g><title>cv_CascadeClassifier_delete (4 samples, 0.02%)</title><rect x="75.2602%" y="645" width="0.0230%" height="15" fill="rgb(236,107,19)" fg:x="13090" fg:w="4"/><text x="75.5102%" y="655.50"></text></g><g><title>&lt;deduplicated_symbol&gt; (4 samples, 0.02%)</title><rect x="75.2602%" y="629" width="0.0230%" height="15" fill="rgb(228,185,30)" fg:x="13090" fg:w="4"/><text x="75.5102%" y="639.50"></text></g><g><title>cv::CascadeClassifierImpl::~CascadeClassifierImpl() (4 samples, 0.02%)</title><rect x="75.2602%" y="613" width="0.0230%" height="15" fill="rgb(246,134,8)" fg:x="13090" fg:w="4"/><text x="75.5102%" y="623.50"></text></g><g><title>cv::FileNode::operator float() const (3 samples, 0.02%)</title><rect x="75.3004%" y="533" width="0.0172%" height="15" fill="rgb(214,143,50)" fg:x="13097" fg:w="3"/><text x="75.5504%" y="543.50"></text></g><g><title>cv::FileNode::type() const (2 samples, 0.01%)</title><rect x="75.3349%" y="485" width="0.0115%" height="15" fill="rgb(228,75,8)" fg:x="13103" fg:w="2"/><text x="75.5849%" y="495.50"></text></g><g><title>cv::FileNodeIterator::FileNodeIterator(cv::FileNode const&amp;, bool) (3 samples, 0.02%)</title><rect x="75.3349%" y="501" width="0.0172%" height="15" fill="rgb(207,175,4)" fg:x="13103" fg:w="3"/><text x="75.5849%" y="511.50"></text></g><g><title>cv::FileNode::operator[](std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt; const&amp;) const (7 samples, 0.04%)</title><rect x="75.3234%" y="517" width="0.0402%" height="15" fill="rgb(205,108,24)" fg:x="13101" fg:w="7"/><text x="75.5734%" y="527.50"></text></g><g><title>cv::FileNode::operator[](char const*) const (8 samples, 0.05%)</title><rect x="75.3234%" y="533" width="0.0460%" height="15" fill="rgb(244,120,49)" fg:x="13101" fg:w="8"/><text x="75.5734%" y="543.50"></text></g><g><title>cv::FileNode::size() const (4 samples, 0.02%)</title><rect x="75.3694%" y="533" width="0.0230%" height="15" fill="rgb(223,47,38)" fg:x="13109" fg:w="4"/><text x="75.6194%" y="543.50"></text></g><g><title>cv::FileStorage::Impl::getNodePtr(unsigned long, unsigned long) const (3 samples, 0.02%)</title><rect x="75.3752%" y="517" width="0.0172%" height="15" fill="rgb(229,179,11)" fg:x="13110" fg:w="3"/><text x="75.6252%" y="527.50"></text></g><g><title>cv::FileNode::size() const (2 samples, 0.01%)</title><rect x="75.3924%" y="517" width="0.0115%" height="15" fill="rgb(231,122,1)" fg:x="13113" fg:w="2"/><text x="75.6424%" y="527.50"></text></g><g><title>cv::FileNodeIterator::FileNodeIterator(cv::FileNode const&amp;, bool) (3 samples, 0.02%)</title><rect x="75.3924%" y="533" width="0.0172%" height="15" fill="rgb(245,119,9)" fg:x="13113" fg:w="3"/><text x="75.6424%" y="543.50"></text></g><g><title>cv::operator!=(cv::FileNodeIterator const&amp;, cv::FileNodeIterator const&amp;) (2 samples, 0.01%)</title><rect x="75.4096%" y="533" width="0.0115%" height="15" fill="rgb(241,163,25)" fg:x="13116" fg:w="2"/><text x="75.6596%" y="543.50"></text></g><g><title>free_small (2 samples, 0.01%)</title><rect x="75.4269%" y="533" width="0.0115%" height="15" fill="rgb(217,214,3)" fg:x="13119" fg:w="2"/><text x="75.6769%" y="543.50"></text></g><g><title>std::__1::vector&lt;cv::CascadeClassifierImpl::Data::DTreeNode, std::__1::allocator&lt;cv::CascadeClassifierImpl::Data::DTreeNode&gt;&gt;::reserve(unsigned long) (39 samples, 0.22%)</title><rect x="75.4441%" y="533" width="0.2242%" height="15" fill="rgb(240,86,28)" fg:x="13122" fg:w="39"/><text x="75.6941%" y="543.50"></text></g><g><title>&lt;deduplicated_symbol&gt; (2 samples, 0.01%)</title><rect x="75.6569%" y="517" width="0.0115%" height="15" fill="rgb(215,47,9)" fg:x="13159" fg:w="2"/><text x="75.9069%" y="527.50"></text></g><g><title>cv::CascadeClassifierImpl::Data::read(cv::FileNode const&amp;) (118 samples, 0.68%)</title><rect x="75.2889%" y="549" width="0.6784%" height="15" fill="rgb(252,25,45)" fg:x="13095" fg:w="118"/><text x="75.5389%" y="559.50"></text></g><g><title>std::__1::vector&lt;float, std::__1::allocator&lt;float&gt;&gt;::reserve(unsigned long) (52 samples, 0.30%)</title><rect x="75.6684%" y="533" width="0.2990%" height="15" fill="rgb(251,164,9)" fg:x="13161" fg:w="52"/><text x="75.9184%" y="543.50"></text></g><g><title>cv::FileNodeIterator::FileNodeIterator(cv::FileNode const&amp;, bool) (3 samples, 0.02%)</title><rect x="75.9903%" y="485" width="0.0172%" height="15" fill="rgb(233,194,0)" fg:x="13217" fg:w="3"/><text x="76.2403%" y="495.50"></text></g><g><title>cv::FileNode::type() const (2 samples, 0.01%)</title><rect x="75.9961%" y="469" width="0.0115%" height="15" fill="rgb(249,111,24)" fg:x="13218" fg:w="2"/><text x="76.2461%" y="479.50"></text></g><g><title>cv::FileNode::operator[](std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt; const&amp;) const (5 samples, 0.03%)</title><rect x="75.9903%" y="501" width="0.0287%" height="15" fill="rgb(250,223,3)" fg:x="13217" fg:w="5"/><text x="76.2403%" y="511.50"></text></g><g><title>cv::FileNodeIterator::operator++() (2 samples, 0.01%)</title><rect x="76.0076%" y="485" width="0.0115%" height="15" fill="rgb(236,178,37)" fg:x="13220" fg:w="2"/><text x="76.2576%" y="495.50"></text></g><g><title>cv::FileNode::operator[](char const*) const (7 samples, 0.04%)</title><rect x="75.9846%" y="517" width="0.0402%" height="15" fill="rgb(241,158,50)" fg:x="13216" fg:w="7"/><text x="76.2346%" y="527.50"></text></g><g><title>cv::FileNodeIterator::FileNodeIterator(cv::FileNode const&amp;, bool) (2 samples, 0.01%)</title><rect x="76.0248%" y="517" width="0.0115%" height="15" fill="rgb(213,121,41)" fg:x="13223" fg:w="2"/><text x="76.2748%" y="527.50"></text></g><g><title>cv::FileNodeIterator::operator*() const (2 samples, 0.01%)</title><rect x="76.0363%" y="517" width="0.0115%" height="15" fill="rgb(240,92,3)" fg:x="13225" fg:w="2"/><text x="76.2863%" y="527.50"></text></g><g><title>cv::FileNodeIterator::operator++() (2 samples, 0.01%)</title><rect x="76.0478%" y="517" width="0.0115%" height="15" fill="rgb(205,123,3)" fg:x="13227" fg:w="2"/><text x="76.2978%" y="527.50"></text></g><g><title>cv::FileNode::rawSize() const (2 samples, 0.01%)</title><rect x="76.0478%" y="501" width="0.0115%" height="15" fill="rgb(205,97,47)" fg:x="13227" fg:w="2"/><text x="76.2978%" y="511.50"></text></g><g><title>cv::HaarEvaluator::read(cv::FileNode const&amp;, cv::Size_&lt;int&gt;) (16 samples, 0.09%)</title><rect x="75.9788%" y="549" width="0.0920%" height="15" fill="rgb(247,152,14)" fg:x="13215" fg:w="16"/><text x="76.2288%" y="559.50"></text></g><g><title>cv::HaarEvaluator::Feature::read(cv::FileNode const&amp;, cv::Size_&lt;int&gt; const&amp;) (15 samples, 0.09%)</title><rect x="75.9846%" y="533" width="0.0862%" height="15" fill="rgb(248,195,53)" fg:x="13216" fg:w="15"/><text x="76.2346%" y="543.50"></text></g><g><title>cv::CascadeClassifierImpl::read_(cv::FileNode const&amp;) (138 samples, 0.79%)</title><rect x="75.2832%" y="565" width="0.7934%" height="15" fill="rgb(226,201,16)" fg:x="13094" fg:w="138"/><text x="75.5332%" y="575.50"></text></g><g><title>cv::FileStorage::Impl::closeFile() (2 samples, 0.01%)</title><rect x="76.0766%" y="533" width="0.0115%" height="15" fill="rgb(205,98,0)" fg:x="13232" fg:w="2"/><text x="76.3266%" y="543.50"></text></g><g><title>cv::FileStorage::Impl::addNode(cv::FileNode&amp;, std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt; const&amp;, int, void const*, int) (2 samples, 0.01%)</title><rect x="76.0881%" y="469" width="0.0115%" height="15" fill="rgb(214,191,48)" fg:x="13234" fg:w="2"/><text x="76.3381%" y="479.50"></text></g><g><title>cv::FileStorage::Impl::convertToCollection(int, cv::FileNode&amp;) (2 samples, 0.01%)</title><rect x="76.1111%" y="437" width="0.0115%" height="15" fill="rgb(237,112,39)" fg:x="13238" fg:w="2"/><text x="76.3611%" y="447.50"></text></g><g><title>cv::FileStorage::Impl::addNode(cv::FileNode&amp;, std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt; const&amp;, int, void const*, int) (3 samples, 0.02%)</title><rect x="76.1111%" y="453" width="0.0172%" height="15" fill="rgb(247,203,27)" fg:x="13238" fg:w="3"/><text x="76.3611%" y="463.50"></text></g><g><title>cv::XMLParser::parseTag(char*, std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt;&amp;, std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt;&amp;, int&amp;) (5 samples, 0.03%)</title><rect x="76.1341%" y="453" width="0.0287%" height="15" fill="rgb(235,124,28)" fg:x="13242" fg:w="5"/><text x="76.3841%" y="463.50"></text></g><g><title>cv::FileStorage::Impl::addNode(cv::FileNode&amp;, std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt; const&amp;, int, void const*, int) (4 samples, 0.02%)</title><rect x="76.1686%" y="437" width="0.0230%" height="15" fill="rgb(208,207,46)" fg:x="13248" fg:w="4"/><text x="76.4186%" y="447.50"></text></g><g><title>cv::XMLParser::parseTag(char*, std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt;&amp;, std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt;&amp;, int&amp;) (5 samples, 0.03%)</title><rect x="76.1973%" y="437" width="0.0287%" height="15" fill="rgb(234,176,4)" fg:x="13253" fg:w="5"/><text x="76.4473%" y="447.50"></text></g><g><title>std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt;::basic_string[abi:ue170006](char const*, unsigned long) (3 samples, 0.02%)</title><rect x="76.2088%" y="421" width="0.0172%" height="15" fill="rgb(230,133,28)" fg:x="13255" fg:w="3"/><text x="76.4588%" y="431.50"></text></g><g><title>cv::FileNode::setValue(int, void const*, int) (7 samples, 0.04%)</title><rect x="76.2491%" y="421" width="0.0402%" height="15" fill="rgb(211,137,40)" fg:x="13262" fg:w="7"/><text x="76.4991%" y="431.50"></text></g><g><title>cv::FileStorage::Impl::reserveNodeSpace(cv::FileNode&amp;, unsigned long) (3 samples, 0.02%)</title><rect x="76.2721%" y="405" width="0.0172%" height="15" fill="rgb(254,35,13)" fg:x="13266" fg:w="3"/><text x="76.5221%" y="415.50"></text></g><g><title>cv::FileNode::type() const (3 samples, 0.02%)</title><rect x="76.2893%" y="421" width="0.0172%" height="15" fill="rgb(225,49,51)" fg:x="13269" fg:w="3"/><text x="76.5393%" y="431.50"></text></g><g><title>cv::FileNode::type() const (3 samples, 0.02%)</title><rect x="76.3411%" y="405" width="0.0172%" height="15" fill="rgb(251,10,15)" fg:x="13278" fg:w="3"/><text x="76.5911%" y="415.50"></text></g><g><title>cv::FileStorage::Impl::getNodePtr(unsigned long, unsigned long) const (2 samples, 0.01%)</title><rect x="76.3468%" y="389" width="0.0115%" height="15" fill="rgb(228,207,15)" fg:x="13279" fg:w="2"/><text x="76.5968%" y="399.50"></text></g><g><title>cv::FileStorage::Impl::addNode(cv::FileNode&amp;, std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt; const&amp;, int, void const*, int) (12 samples, 0.07%)</title><rect x="76.3066%" y="421" width="0.0690%" height="15" fill="rgb(241,99,19)" fg:x="13272" fg:w="12"/><text x="76.5566%" y="431.50"></text></g><g><title>cv::FileStorage::Impl::reserveNodeSpace(cv::FileNode&amp;, unsigned long) (2 samples, 0.01%)</title><rect x="76.3641%" y="405" width="0.0115%" height="15" fill="rgb(207,104,49)" fg:x="13282" fg:w="2"/><text x="76.6141%" y="415.50"></text></g><g><title>cv::FileNode::setValue(int, void const*, int) (2 samples, 0.01%)</title><rect x="76.3871%" y="389" width="0.0115%" height="15" fill="rgb(234,99,18)" fg:x="13286" fg:w="2"/><text x="76.6371%" y="399.50"></text></g><g><title>cv::FileStorage::Impl::addNode(cv::FileNode&amp;, std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt; const&amp;, int, void const*, int) (4 samples, 0.02%)</title><rect x="76.3813%" y="405" width="0.0230%" height="15" fill="rgb(213,191,49)" fg:x="13285" fg:w="4"/><text x="76.6313%" y="415.50"></text></g><g><title>cv::FileStorage::Impl::convertToCollection(int, cv::FileNode&amp;) (6 samples, 0.03%)</title><rect x="76.3756%" y="421" width="0.0345%" height="15" fill="rgb(210,226,19)" fg:x="13284" fg:w="6"/><text x="76.6256%" y="431.50"></text></g><g><title>cv::FileStorage::Impl::strtod(char*, char**) (5 samples, 0.03%)</title><rect x="76.4330%" y="421" width="0.0287%" height="15" fill="rgb(229,97,18)" fg:x="13294" fg:w="5"/><text x="76.6830%" y="431.50"></text></g><g><title>strtod (5 samples, 0.03%)</title><rect x="76.4330%" y="405" width="0.0287%" height="15" fill="rgb(211,167,15)" fg:x="13294" fg:w="5"/><text x="76.6830%" y="415.50"></text></g><g><title>_ffpp_strtoencf64_l (5 samples, 0.03%)</title><rect x="76.4330%" y="389" width="0.0287%" height="15" fill="rgb(210,169,34)" fg:x="13294" fg:w="5"/><text x="76.6830%" y="399.50"></text></g><g><title>fastParse64 (5 samples, 0.03%)</title><rect x="76.4330%" y="373" width="0.0287%" height="15" fill="rgb(241,121,31)" fg:x="13294" fg:w="5"/><text x="76.6830%" y="383.50"></text></g><g><title>os_unfair_lock_unlock (3 samples, 0.02%)</title><rect x="76.4445%" y="357" width="0.0172%" height="15" fill="rgb(232,40,11)" fg:x="13296" fg:w="3"/><text x="76.6945%" y="367.50"></text></g><g><title>cv::XMLParser::parseTag(char*, std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt;&amp;, std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt;&amp;, int&amp;) (3 samples, 0.02%)</title><rect x="76.4618%" y="421" width="0.0172%" height="15" fill="rgb(205,86,26)" fg:x="13299" fg:w="3"/><text x="76.7118%" y="431.50"></text></g><g><title>cv::FileNode::type() const (2 samples, 0.01%)</title><rect x="76.5193%" y="405" width="0.0115%" height="15" fill="rgb(231,126,28)" fg:x="13309" fg:w="2"/><text x="76.7693%" y="415.50"></text></g><g><title>cv::FileStorage::Impl::addNode(cv::FileNode&amp;, std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt; const&amp;, int, void const*, int) (2 samples, 0.01%)</title><rect x="76.5308%" y="405" width="0.0115%" height="15" fill="rgb(219,221,18)" fg:x="13311" fg:w="2"/><text x="76.7808%" y="415.50"></text></g><g><title>cv::FileStorage::Impl::convertToCollection(int, cv::FileNode&amp;) (3 samples, 0.02%)</title><rect x="76.5423%" y="405" width="0.0172%" height="15" fill="rgb(211,40,0)" fg:x="13313" fg:w="3"/><text x="76.7923%" y="415.50"></text></g><g><title>cv::FileStorage::Impl::addNode(cv::FileNode&amp;, std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt; const&amp;, int, void const*, int) (2 samples, 0.01%)</title><rect x="76.5480%" y="389" width="0.0115%" height="15" fill="rgb(239,85,43)" fg:x="13314" fg:w="2"/><text x="76.7980%" y="399.50"></text></g><g><title>cv::FileStorage::Impl::finalizeCollection(cv::FileNode&amp;) (2 samples, 0.01%)</title><rect x="76.5595%" y="405" width="0.0115%" height="15" fill="rgb(231,55,21)" fg:x="13316" fg:w="2"/><text x="76.8095%" y="415.50"></text></g><g><title>cv::FileStorage::Impl::reserveNodeSpace(cv::FileNode&amp;, unsigned long) (2 samples, 0.01%)</title><rect x="76.5710%" y="405" width="0.0115%" height="15" fill="rgb(225,184,43)" fg:x="13318" fg:w="2"/><text x="76.8210%" y="415.50"></text></g><g><title>localeconv_l (3 samples, 0.02%)</title><rect x="76.6285%" y="341" width="0.0172%" height="15" fill="rgb(251,158,41)" fg:x="13328" fg:w="3"/><text x="76.8785%" y="351.50"></text></g><g><title>os_unfair_lock_lock (3 samples, 0.02%)</title><rect x="76.6458%" y="341" width="0.0172%" height="15" fill="rgb(234,159,37)" fg:x="13331" fg:w="3"/><text x="76.8958%" y="351.50"></text></g><g><title>_ffpp_strtoencf64_l (17 samples, 0.10%)</title><rect x="76.5825%" y="373" width="0.0977%" height="15" fill="rgb(216,204,22)" fg:x="13320" fg:w="17"/><text x="76.8325%" y="383.50"></text></g><g><title>fastParse64 (12 samples, 0.07%)</title><rect x="76.6113%" y="357" width="0.0690%" height="15" fill="rgb(214,17,3)" fg:x="13325" fg:w="12"/><text x="76.8613%" y="367.50"></text></g><g><title>os_unfair_lock_unlock (3 samples, 0.02%)</title><rect x="76.6630%" y="341" width="0.0172%" height="15" fill="rgb(212,111,17)" fg:x="13334" fg:w="3"/><text x="76.9130%" y="351.50"></text></g><g><title>cv::FileStorage::Impl::strtod(char*, char**) (18 samples, 0.10%)</title><rect x="76.5825%" y="405" width="0.1035%" height="15" fill="rgb(221,157,24)" fg:x="13320" fg:w="18"/><text x="76.8325%" y="415.50"></text></g><g><title>strtod (18 samples, 0.10%)</title><rect x="76.5825%" y="389" width="0.1035%" height="15" fill="rgb(252,16,13)" fg:x="13320" fg:w="18"/><text x="76.8325%" y="399.50"></text></g><g><title>cv::XMLParser::skipSpaces(char*, int) (13 samples, 0.07%)</title><rect x="76.6860%" y="405" width="0.0747%" height="15" fill="rgb(221,62,2)" fg:x="13338" fg:w="13"/><text x="76.9360%" y="415.50"></text></g><g><title>cv::FileStorage::Impl::gets() (11 samples, 0.06%)</title><rect x="76.6975%" y="389" width="0.0632%" height="15" fill="rgb(247,87,22)" fg:x="13340" fg:w="11"/><text x="76.9475%" y="399.50"></text></g><g><title>cv::FileStorage::Impl::gets(unsigned long) (10 samples, 0.06%)</title><rect x="76.7033%" y="373" width="0.0575%" height="15" fill="rgb(215,73,9)" fg:x="13341" fg:w="10"/><text x="76.9533%" y="383.50"></text></g><g><title>fgets (6 samples, 0.03%)</title><rect x="76.7263%" y="357" width="0.0345%" height="15" fill="rgb(207,175,33)" fg:x="13345" fg:w="6"/><text x="76.9763%" y="367.50"></text></g><g><title>cv::XMLParser::parseValue(char*, cv::FileNode&amp;) (52 samples, 0.30%)</title><rect x="76.4790%" y="421" width="0.2990%" height="15" fill="rgb(243,129,54)" fg:x="13302" fg:w="52"/><text x="76.7290%" y="431.50"></text></g><g><title>strtoll_l (2 samples, 0.01%)</title><rect x="76.7665%" y="405" width="0.0115%" height="15" fill="rgb(227,119,45)" fg:x="13352" fg:w="2"/><text x="77.0165%" y="415.50"></text></g><g><title>__srefill1 (3 samples, 0.02%)</title><rect x="76.8010%" y="357" width="0.0172%" height="15" fill="rgb(205,109,36)" fg:x="13358" fg:w="3"/><text x="77.0510%" y="367.50"></text></g><g><title>_sread (3 samples, 0.02%)</title><rect x="76.8010%" y="341" width="0.0172%" height="15" fill="rgb(205,6,39)" fg:x="13358" fg:w="3"/><text x="77.0510%" y="351.50"></text></g><g><title>__read_nocancel (3 samples, 0.02%)</title><rect x="76.8010%" y="325" width="0.0172%" height="15" fill="rgb(221,32,16)" fg:x="13358" fg:w="3"/><text x="77.0510%" y="335.50"></text></g><g><title>cv::XMLParser::skipSpaces(char*, int) (13 samples, 0.07%)</title><rect x="76.7780%" y="421" width="0.0747%" height="15" fill="rgb(228,144,50)" fg:x="13354" fg:w="13"/><text x="77.0280%" y="431.50"></text></g><g><title>cv::FileStorage::Impl::gets() (11 samples, 0.06%)</title><rect x="76.7895%" y="405" width="0.0632%" height="15" fill="rgb(229,201,53)" fg:x="13356" fg:w="11"/><text x="77.0395%" y="415.50"></text></g><g><title>cv::FileStorage::Impl::gets(unsigned long) (10 samples, 0.06%)</title><rect x="76.7953%" y="389" width="0.0575%" height="15" fill="rgb(249,153,27)" fg:x="13357" fg:w="10"/><text x="77.0453%" y="399.50"></text></g><g><title>fgets (9 samples, 0.05%)</title><rect x="76.8010%" y="373" width="0.0517%" height="15" fill="rgb(227,106,25)" fg:x="13358" fg:w="9"/><text x="77.0510%" y="383.50"></text></g><g><title>funlockfile (3 samples, 0.02%)</title><rect x="76.8355%" y="357" width="0.0172%" height="15" fill="rgb(230,65,29)" fg:x="13364" fg:w="3"/><text x="77.0855%" y="367.50"></text></g><g><title>_pthread_mutex_firstfit_unlock_slow (3 samples, 0.02%)</title><rect x="76.8355%" y="341" width="0.0172%" height="15" fill="rgb(221,57,46)" fg:x="13364" fg:w="3"/><text x="77.0855%" y="351.50"></text></g><g><title>cv::XMLParser::parseValue(char*, cv::FileNode&amp;) (115 samples, 0.66%)</title><rect x="76.2261%" y="437" width="0.6612%" height="15" fill="rgb(229,161,17)" fg:x="13258" fg:w="115"/><text x="76.4761%" y="447.50"></text></g><g><title>strtoll_l (6 samples, 0.03%)</title><rect x="76.8528%" y="421" width="0.0345%" height="15" fill="rgb(222,213,11)" fg:x="13367" fg:w="6"/><text x="77.1028%" y="431.50"></text></g><g><title>cv::XMLParser::parseValue(char*, cv::FileNode&amp;) (134 samples, 0.77%)</title><rect x="76.1628%" y="453" width="0.7704%" height="15" fill="rgb(235,35,13)" fg:x="13247" fg:w="134"/><text x="76.4128%" y="463.50"></text></g><g><title>cv::XMLParser::skipSpaces(char*, int) (8 samples, 0.05%)</title><rect x="76.8873%" y="437" width="0.0460%" height="15" fill="rgb(233,158,34)" fg:x="13373" fg:w="8"/><text x="77.1373%" y="447.50"></text></g><g><title>cv::FileStorage::Impl::gets() (5 samples, 0.03%)</title><rect x="76.9045%" y="421" width="0.0287%" height="15" fill="rgb(215,151,48)" fg:x="13376" fg:w="5"/><text x="77.1545%" y="431.50"></text></g><g><title>cv::FileStorage::Impl::gets(unsigned long) (4 samples, 0.02%)</title><rect x="76.9103%" y="405" width="0.0230%" height="15" fill="rgb(229,84,14)" fg:x="13377" fg:w="4"/><text x="77.1603%" y="415.50"></text></g><g><title>cv::XMLParser::parseValue(char*, cv::FileNode&amp;) (147 samples, 0.85%)</title><rect x="76.1053%" y="469" width="0.8452%" height="15" fill="rgb(229,68,14)" fg:x="13237" fg:w="147"/><text x="76.3553%" y="479.50"></text></g><g><title>cv::XMLParser::skipSpaces(char*, int) (3 samples, 0.02%)</title><rect x="76.9332%" y="453" width="0.0172%" height="15" fill="rgb(243,106,26)" fg:x="13381" fg:w="3"/><text x="77.1832%" y="463.50"></text></g><g><title>cv::FileStorage::Impl::gets() (2 samples, 0.01%)</title><rect x="76.9390%" y="437" width="0.0115%" height="15" fill="rgb(206,45,38)" fg:x="13382" fg:w="2"/><text x="77.1890%" y="447.50"></text></g><g><title>cv::FileStorage::Impl::gets(unsigned long) (2 samples, 0.01%)</title><rect x="76.9390%" y="421" width="0.0115%" height="15" fill="rgb(226,6,15)" fg:x="13382" fg:w="2"/><text x="77.1890%" y="431.50"></text></g><g><title>cv::XMLParser::parse(char*) (151 samples, 0.87%)</title><rect x="76.0881%" y="533" width="0.8682%" height="15" fill="rgb(232,22,54)" fg:x="13234" fg:w="151"/><text x="76.3381%" y="543.50"></text></g><g><title>cv::XMLParser::parseValue(char*, cv::FileNode&amp;) (151 samples, 0.87%)</title><rect x="76.0881%" y="517" width="0.8682%" height="15" fill="rgb(229,222,32)" fg:x="13234" fg:w="151"/><text x="76.3381%" y="527.50"></text></g><g><title>cv::XMLParser::parseValue(char*, cv::FileNode&amp;) (151 samples, 0.87%)</title><rect x="76.0881%" y="501" width="0.8682%" height="15" fill="rgb(228,62,29)" fg:x="13234" fg:w="151"/><text x="76.3381%" y="511.50"></text></g><g><title>cv::XMLParser::parseValue(char*, cv::FileNode&amp;) (151 samples, 0.87%)</title><rect x="76.0881%" y="485" width="0.8682%" height="15" fill="rgb(251,103,34)" fg:x="13234" fg:w="151"/><text x="76.3381%" y="495.50"></text></g><g><title>face_cropper::face_detect::FaceDetector::new (293 samples, 1.68%)</title><rect x="75.2832%" y="645" width="1.6846%" height="15" fill="rgb(233,12,30)" fg:x="13094" fg:w="293"/><text x="75.5332%" y="655.50"></text></g><g><title>cv_CascadeClassifier_CascadeClassifier_const_StringR (293 samples, 1.68%)</title><rect x="75.2832%" y="629" width="1.6846%" height="15" fill="rgb(238,52,0)" fg:x="13094" fg:w="293"/><text x="75.5332%" y="639.50"></text></g><g><title>cv::CascadeClassifier::CascadeClassifier(std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt; const&amp;) (293 samples, 1.68%)</title><rect x="75.2832%" y="613" width="1.6846%" height="15" fill="rgb(223,98,5)" fg:x="13094" fg:w="293"/><text x="75.5332%" y="623.50"></text></g><g><title>cv::CascadeClassifier::load(std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt; const&amp;) (293 samples, 1.68%)</title><rect x="75.2832%" y="597" width="1.6846%" height="15" fill="rgb(228,75,37)" fg:x="13094" fg:w="293"/><text x="75.5332%" y="607.50"></text></g><g><title>cv::CascadeClassifierImpl::load(std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt; const&amp;) (293 samples, 1.68%)</title><rect x="75.2832%" y="581" width="1.6846%" height="15" fill="rgb(205,115,49)" fg:x="13094" fg:w="293"/><text x="75.5332%" y="591.50"></text></g><g><title>cv::FileStorage::FileStorage(std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt; const&amp;, int, std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt; const&amp;) (155 samples, 0.89%)</title><rect x="76.0766%" y="565" width="0.8912%" height="15" fill="rgb(250,154,43)" fg:x="13232" fg:w="155"/><text x="76.3266%" y="575.50"></text></g><g><title>cv::FileStorage::Impl::open(char const*, int, char const*) (155 samples, 0.89%)</title><rect x="76.0766%" y="549" width="0.8912%" height="15" fill="rgb(226,43,29)" fg:x="13232" fg:w="155"/><text x="76.3266%" y="559.50"></text></g><g><title>fopen (2 samples, 0.01%)</title><rect x="76.9562%" y="533" width="0.0115%" height="15" fill="rgb(249,228,39)" fg:x="13385" fg:w="2"/><text x="77.2062%" y="543.50"></text></g><g><title>cv::HaarEvaluator::computeChannels(int, cv::_InputArray const&amp;) (33 samples, 0.19%)</title><rect x="76.9735%" y="517" width="0.1897%" height="15" fill="rgb(216,79,43)" fg:x="13388" fg:w="33"/><text x="77.2235%" y="527.50"></text></g><g><title>cv::integral(cv::_InputArray const&amp;, cv::_OutputArray const&amp;, cv::_OutputArray const&amp;, cv::_OutputArray const&amp;, int, int) (33 samples, 0.19%)</title><rect x="76.9735%" y="501" width="0.1897%" height="15" fill="rgb(228,95,12)" fg:x="13388" fg:w="33"/><text x="77.2235%" y="511.50"></text></g><g><title>cv::hal::integral(int, int, int, unsigned char const*, unsigned long, unsigned char*, unsigned long, unsigned char*, unsigned long, unsigned char*, unsigned long, int, int, int) (33 samples, 0.19%)</title><rect x="76.9735%" y="485" width="0.1897%" height="15" fill="rgb(249,221,15)" fg:x="13388" fg:w="33"/><text x="77.2235%" y="495.50"></text></g><g><title>cv::HaarEvaluator::OptFeature::setOffsets(cv::HaarEvaluator::Feature const&amp;, int, int) (2 samples, 0.01%)</title><rect x="77.1632%" y="501" width="0.0115%" height="15" fill="rgb(233,34,13)" fg:x="13421" fg:w="2"/><text x="77.4132%" y="511.50"></text></g><g><title>cv::HaarEvaluator::computeOptFeatures() (3 samples, 0.02%)</title><rect x="77.1632%" y="517" width="0.0172%" height="15" fill="rgb(214,103,39)" fg:x="13421" fg:w="3"/><text x="77.4132%" y="527.50"></text></g><g><title>cv::softfloat_roundToI32(bool, unsigned long long, unsigned char, bool) (2 samples, 0.01%)</title><rect x="77.2092%" y="453" width="0.0115%" height="15" fill="rgb(251,126,39)" fg:x="13429" fg:w="2"/><text x="77.4592%" y="463.50"></text></g><g><title>cv::softfloat_subMagsF64(unsigned long long, unsigned long long, bool) (3 samples, 0.02%)</title><rect x="77.2207%" y="453" width="0.0172%" height="15" fill="rgb(214,216,36)" fg:x="13431" fg:w="3"/><text x="77.4707%" y="463.50"></text></g><g><title>cvFloor(cv::softdouble const&amp;) (3 samples, 0.02%)</title><rect x="77.2380%" y="453" width="0.0172%" height="15" fill="rgb(220,221,8)" fg:x="13434" fg:w="3"/><text x="77.4880%" y="463.50"></text></g><g><title>cv::softfloat_roundToI32(bool, unsigned long long, unsigned char, bool) (3 samples, 0.02%)</title><rect x="77.2380%" y="437" width="0.0172%" height="15" fill="rgb(240,216,3)" fg:x="13434" fg:w="3"/><text x="77.4880%" y="447.50"></text></g><g><title>(anonymous namespace)::interpolationLinear&lt;unsigned char&gt;::getCoeffs(int, int*, (anonymous namespace)::ufixedpoint16*) (15 samples, 0.09%)</title><rect x="77.1805%" y="469" width="0.0862%" height="15" fill="rgb(232,218,17)" fg:x="13424" fg:w="15"/><text x="77.4305%" y="479.50"></text></g><g><title>cvRound(cv::softdouble const&amp;) (2 samples, 0.01%)</title><rect x="77.2552%" y="453" width="0.0115%" height="15" fill="rgb(229,163,45)" fg:x="13437" fg:w="2"/><text x="77.5052%" y="463.50"></text></g><g><title>cv::softfloat_roundToI32(bool, unsigned long long, unsigned char, bool) (2 samples, 0.01%)</title><rect x="77.2552%" y="437" width="0.0115%" height="15" fill="rgb(231,110,42)" fg:x="13437" fg:w="2"/><text x="77.5052%" y="447.50"></text></g><g><title>(anonymous namespace)::resize_bitExactInvoker&lt;unsigned char, (anonymous namespace)::ufixedpoint16, 2&gt;::operator()(cv::Range const&amp;) const (32 samples, 0.18%)</title><rect x="77.2667%" y="453" width="0.1840%" height="15" fill="rgb(208,170,48)" fg:x="13439" fg:w="32"/><text x="77.5167%" y="463.50"></text></g><g><title>void (anonymous namespace)::hlineResizeCn&lt;unsigned char, (anonymous namespace)::ufixedpoint16, 2, true, 1&gt;(unsigned char*, int, int*, (anonymous namespace)::ufixedpoint16*, (anonymous namespace)::ufixedpoint16*, int, int, int) (20 samples, 0.11%)</title><rect x="77.3357%" y="437" width="0.1150%" height="15" fill="rgb(239,116,25)" fg:x="13451" fg:w="20"/><text x="77.5857%" y="447.50"></text></g><g><title>cv::parallel_for_(cv::Range const&amp;, cv::ParallelLoopBody const&amp;, double) (39 samples, 0.22%)</title><rect x="77.2667%" y="469" width="0.2242%" height="15" fill="rgb(219,200,50)" fg:x="13439" fg:w="39"/><text x="77.5167%" y="479.50"></text></g><g><title>void (anonymous namespace)::hlineResizeCn&lt;unsigned char, (anonymous namespace)::ufixedpoint16, 2, true, 1&gt;(unsigned char*, int, int*, (anonymous namespace)::ufixedpoint16*, (anonymous namespace)::ufixedpoint16*, int, int, int) (7 samples, 0.04%)</title><rect x="77.4507%" y="453" width="0.0402%" height="15" fill="rgb(245,200,0)" fg:x="13471" fg:w="7"/><text x="77.7007%" y="463.50"></text></g><g><title>cv::resize(cv::_InputArray const&amp;, cv::_OutputArray const&amp;, cv::Size_&lt;int&gt;, double, double, int) (58 samples, 0.33%)</title><rect x="77.1805%" y="517" width="0.3335%" height="15" fill="rgb(245,119,33)" fg:x="13424" fg:w="58"/><text x="77.4305%" y="527.50"></text></g><g><title>cv::hal::resize(int, unsigned char const*, unsigned long, int, int, unsigned char*, unsigned long, int, int, double, double, int) (58 samples, 0.33%)</title><rect x="77.1805%" y="501" width="0.3335%" height="15" fill="rgb(231,125,12)" fg:x="13424" fg:w="58"/><text x="77.4305%" y="511.50"></text></g><g><title>void (anonymous namespace)::resize_bitExact&lt;unsigned char, (anonymous namespace)::interpolationLinear&lt;unsigned char&gt;&gt;(unsigned char const*, unsigned long, int, int, unsigned char*, unsigned long, int, int, int, double, double) (58 samples, 0.33%)</title><rect x="77.1805%" y="485" width="0.3335%" height="15" fill="rgb(216,96,41)" fg:x="13424" fg:w="58"/><text x="77.4305%" y="495.50"></text></g><g><title>cv::softfloat_subMagsF64(unsigned long long, unsigned long long, bool) (3 samples, 0.02%)</title><rect x="77.4967%" y="469" width="0.0172%" height="15" fill="rgb(248,43,45)" fg:x="13479" fg:w="3"/><text x="77.7467%" y="479.50"></text></g><g><title>cv::FeatureEvaluator::setImage(cv::_InputArray const&amp;, std::__1::vector&lt;float, std::__1::allocator&lt;float&gt;&gt; const&amp;) (97 samples, 0.56%)</title><rect x="76.9677%" y="533" width="0.5577%" height="15" fill="rgb(217,222,7)" fg:x="13387" fg:w="97"/><text x="77.2177%" y="543.50"></text></g><g><title>void cv::copyVectorToUMat&lt;cv::FeatureEvaluator::ScaleData&gt;(std::__1::vector&lt;cv::FeatureEvaluator::ScaleData, std::__1::allocator&lt;cv::FeatureEvaluator::ScaleData&gt;&gt; const&amp;, cv::UMat&amp;) (2 samples, 0.01%)</title><rect x="77.5139%" y="517" width="0.0115%" height="15" fill="rgb(233,28,6)" fg:x="13482" fg:w="2"/><text x="77.7639%" y="527.50"></text></g><g><title>cv::Mat::copyTo(cv::_OutputArray const&amp;) const (2 samples, 0.01%)</title><rect x="77.5139%" y="501" width="0.0115%" height="15" fill="rgb(231,218,15)" fg:x="13482" fg:w="2"/><text x="77.7639%" y="511.50"></text></g><g><title>cv::ocl::OpenCLAllocator::upload(cv::UMatData*, void const*, int, unsigned long const*, unsigned long const*, unsigned long const*, unsigned long const*) const (2 samples, 0.01%)</title><rect x="77.5139%" y="485" width="0.0115%" height="15" fill="rgb(226,171,48)" fg:x="13482" fg:w="2"/><text x="77.7639%" y="495.50"></text></g><g><title>clEnqueueWriteBuffer (2 samples, 0.01%)</title><rect x="77.5139%" y="469" width="0.0115%" height="15" fill="rgb(235,201,9)" fg:x="13482" fg:w="2"/><text x="77.7639%" y="479.50"></text></g><g><title>0x1f3469214 (2 samples, 0.01%)</title><rect x="77.5139%" y="453" width="0.0115%" height="15" fill="rgb(217,80,15)" fg:x="13482" fg:w="2"/><text x="77.7639%" y="463.50"></text></g><g><title>0x1f346cb7c (2 samples, 0.01%)</title><rect x="77.5139%" y="437" width="0.0115%" height="15" fill="rgb(219,152,8)" fg:x="13482" fg:w="2"/><text x="77.7639%" y="447.50"></text></g><g><title>_dispatch_lane_barrier_sync_invoke_and_complete (2 samples, 0.01%)</title><rect x="77.5139%" y="421" width="0.0115%" height="15" fill="rgb(243,107,38)" fg:x="13482" fg:w="2"/><text x="77.7639%" y="431.50"></text></g><g><title>_dispatch_client_callout (2 samples, 0.01%)</title><rect x="77.5139%" y="405" width="0.0115%" height="15" fill="rgb(231,17,5)" fg:x="13482" fg:w="2"/><text x="77.7639%" y="415.50"></text></g><g><title>0x1f346ccb0 (2 samples, 0.01%)</title><rect x="77.5139%" y="389" width="0.0115%" height="15" fill="rgb(209,25,54)" fg:x="13482" fg:w="2"/><text x="77.7639%" y="399.50"></text></g><g><title>0x1f346a758 (2 samples, 0.01%)</title><rect x="77.5139%" y="373" width="0.0115%" height="15" fill="rgb(219,0,2)" fg:x="13482" fg:w="2"/><text x="77.7639%" y="383.50"></text></g><g><title>0x1f3449098 (2 samples, 0.01%)</title><rect x="77.5139%" y="357" width="0.0115%" height="15" fill="rgb(246,9,5)" fg:x="13482" fg:w="2"/><text x="77.7639%" y="367.50"></text></g><g><title>cv::CascadeClassifierImpl::runAt(cv::Ptr&lt;cv::FeatureEvaluator&gt;&amp;, cv::Point_&lt;int&gt;, int, double&amp;) (3 samples, 0.02%)</title><rect x="77.5312%" y="517" width="0.0172%" height="15" fill="rgb(226,159,4)" fg:x="13485" fg:w="3"/><text x="77.7812%" y="527.50"></text></g><g><title>cv::HaarEvaluator::operator()(int) const (240 samples, 1.38%)</title><rect x="77.6232%" y="485" width="1.3799%" height="15" fill="rgb(219,175,34)" fg:x="13501" fg:w="240"/><text x="77.8732%" y="495.50"></text></g><g><title>cv::HaarEvaluator::setWindow(cv::Point_&lt;int&gt;, int) (88 samples, 0.51%)</title><rect x="79.0030%" y="485" width="0.5060%" height="15" fill="rgb(236,10,46)" fg:x="13741" fg:w="88"/><text x="79.2530%" y="495.50"></text></g><g><title>cv::FeatureEvaluator::getScaleData(int) const (7 samples, 0.04%)</title><rect x="79.4688%" y="469" width="0.0402%" height="15" fill="rgb(240,211,16)" fg:x="13822" fg:w="7"/><text x="79.7188%" y="479.50"></text></g><g><title>cv::utils::trace::details::Region::Region(cv::utils::trace::details::Region::LocationStaticStorage const&amp;) (13 samples, 0.07%)</title><rect x="79.5090%" y="485" width="0.0747%" height="15" fill="rgb(205,3,43)" fg:x="13829" fg:w="13"/><text x="79.7590%" y="495.50"></text></g><g><title>DYLD-STUB$$cv::utils::trace::details::Region::Region(cv::utils::trace::details::Region::LocationStaticStorage const&amp;) (3 samples, 0.02%)</title><rect x="81.1131%" y="469" width="0.0172%" height="15" fill="rgb(245,7,22)" fg:x="14108" fg:w="3"/><text x="81.3631%" y="479.50"></text></g><g><title>cv::HaarEvaluator::operator()(int) const (926 samples, 5.32%)</title><rect x="81.1303%" y="469" width="5.3240%" height="15" fill="rgb(239,132,32)" fg:x="14111" fg:w="926"/><text x="81.3803%" y="479.50">cv::Haa..</text></g><g><title>cv::CascadeClassifierImpl::runAt(cv::Ptr&lt;cv::FeatureEvaluator&gt;&amp;, cv::Point_&lt;int&gt;, int, double&amp;) (1,552 samples, 8.92%)</title><rect x="77.5484%" y="501" width="8.9231%" height="15" fill="rgb(228,202,34)" fg:x="13488" fg:w="1552"/><text x="77.7984%" y="511.50">cv::CascadeCl..</text></g><g><title>int cv::predictOrderedStump&lt;cv::HaarEvaluator&gt;(cv::CascadeClassifierImpl&amp;, cv::Ptr&lt;cv::FeatureEvaluator&gt;&amp;, double&amp;) (1,198 samples, 6.89%)</title><rect x="79.5837%" y="485" width="6.8878%" height="15" fill="rgb(254,200,22)" fg:x="13842" fg:w="1198"/><text x="79.8337%" y="495.50">int cv::p..</text></g><g><title>cv::utils::trace::details::Region::Region(cv::utils::trace::details::Region::LocationStaticStorage const&amp;) (3 samples, 0.02%)</title><rect x="86.4543%" y="469" width="0.0172%" height="15" fill="rgb(219,10,39)" fg:x="15037" fg:w="3"/><text x="86.7043%" y="479.50"></text></g><g><title>cv::CascadeClassifierInvoker::operator()(cv::Range const&amp;) const (7 samples, 0.04%)</title><rect x="86.4716%" y="501" width="0.0402%" height="15" fill="rgb(226,210,39)" fg:x="15040" fg:w="7"/><text x="86.7216%" y="511.50"></text></g><g><title>cv::HaarEvaluator::setWindow(cv::Point_&lt;int&gt;, int) (4 samples, 0.02%)</title><rect x="86.5118%" y="501" width="0.0230%" height="15" fill="rgb(208,219,16)" fg:x="15047" fg:w="4"/><text x="86.7618%" y="511.50"></text></g><g><title>cv::utils::trace::details::Region::Region(cv::utils::trace::details::Region::LocationStaticStorage const&amp;) (7 samples, 0.04%)</title><rect x="86.5348%" y="501" width="0.0402%" height="15" fill="rgb(216,158,51)" fg:x="15051" fg:w="7"/><text x="86.7848%" y="511.50"></text></g><g><title>face_cropper::face_detect::FaceDetector::detect_and_crop_face (1,672 samples, 9.61%)</title><rect x="76.9677%" y="629" width="9.6131%" height="15" fill="rgb(233,14,44)" fg:x="13387" fg:w="1672"/><text x="77.2177%" y="639.50">face_cropper::..</text></g><g><title>cv_CascadeClassifier_detectMultiScale_const__InputArrayR_vectorLRectGR (1,672 samples, 9.61%)</title><rect x="76.9677%" y="613" width="9.6131%" height="15" fill="rgb(237,97,39)" fg:x="13387" fg:w="1672"/><text x="77.2177%" y="623.50">cv_CascadeClas..</text></g><g><title>cv::CascadeClassifier::detectMultiScale(cv::_InputArray const&amp;, std::__1::vector&lt;cv::Rect_&lt;int&gt;, std::__1::allocator&lt;cv::Rect_&lt;int&gt;&gt;&gt;&amp;, double, int, int, cv::Size_&lt;int&gt;, cv::Size_&lt;int&gt;) (1,672 samples, 9.61%)</title><rect x="76.9677%" y="597" width="9.6131%" height="15" fill="rgb(218,198,43)" fg:x="13387" fg:w="1672"/><text x="77.2177%" y="607.50">cv::CascadeCla..</text></g><g><title>cv::CascadeClassifierImpl::detectMultiScale(cv::_InputArray const&amp;, std::__1::vector&lt;cv::Rect_&lt;int&gt;, std::__1::allocator&lt;cv::Rect_&lt;int&gt;&gt;&gt;&amp;, double, int, int, cv::Size_&lt;int&gt;, cv::Size_&lt;int&gt;) (1,672 samples, 9.61%)</title><rect x="76.9677%" y="581" width="9.6131%" height="15" fill="rgb(231,104,20)" fg:x="13387" fg:w="1672"/><text x="77.2177%" y="591.50">cv::CascadeCla..</text></g><g><title>cv::CascadeClassifierImpl::detectMultiScale(cv::_InputArray const&amp;, std::__1::vector&lt;cv::Rect_&lt;int&gt;, std::__1::allocator&lt;cv::Rect_&lt;int&gt;&gt;&gt;&amp;, std::__1::vector&lt;int, std::__1::allocator&lt;int&gt;&gt;&amp;, std::__1::vector&lt;double, std::__1::allocator&lt;double&gt;&gt;&amp;, double, int, int, cv::Size_&lt;int&gt;, cv::Size_&lt;int&gt;, bool) (1,672 samples, 9.61%)</title><rect x="76.9677%" y="565" width="9.6131%" height="15" fill="rgb(254,36,13)" fg:x="13387" fg:w="1672"/><text x="77.2177%" y="575.50">cv::CascadeCla..</text></g><g><title>cv::CascadeClassifierImpl::detectMultiScaleNoGrouping(cv::_InputArray const&amp;, std::__1::vector&lt;cv::Rect_&lt;int&gt;, std::__1::allocator&lt;cv::Rect_&lt;int&gt;&gt;&gt;&amp;, std::__1::vector&lt;int, std::__1::allocator&lt;int&gt;&gt;&amp;, std::__1::vector&lt;double, std::__1::allocator&lt;double&gt;&gt;&amp;, double, cv::Size_&lt;int&gt;, cv::Size_&lt;int&gt;, bool) (1,672 samples, 9.61%)</title><rect x="76.9677%" y="549" width="9.6131%" height="15" fill="rgb(248,14,50)" fg:x="13387" fg:w="1672"/><text x="77.2177%" y="559.50">cv::CascadeCla..</text></g><g><title>cv::parallel_for_(cv::Range const&amp;, cv::ParallelLoopBody const&amp;, double) (1,574 samples, 9.05%)</title><rect x="77.5312%" y="533" width="9.0496%" height="15" fill="rgb(217,107,29)" fg:x="13485" fg:w="1574"/><text x="77.7812%" y="543.50">cv::parallel_..</text></g><g><title>cv::CascadeClassifierInvoker::operator()(cv::Range const&amp;) const (1,571 samples, 9.03%)</title><rect x="77.5484%" y="517" width="9.0324%" height="15" fill="rgb(251,169,33)" fg:x="13488" fg:w="1571"/><text x="77.7984%" y="527.50">cv::CascadeCl..</text></g><g><title>fclose (2 samples, 0.01%)</title><rect x="86.5808%" y="565" width="0.0115%" height="15" fill="rgb(217,108,32)" fg:x="15059" fg:w="2"/><text x="86.8308%" y="575.50"></text></g><g><title>__close_nocancel (2 samples, 0.01%)</title><rect x="86.5808%" y="549" width="0.0115%" height="15" fill="rgb(219,66,42)" fg:x="15059" fg:w="2"/><text x="86.8308%" y="559.50"></text></g><g><title>fopen (2 samples, 0.01%)</title><rect x="86.5923%" y="565" width="0.0115%" height="15" fill="rgb(206,180,7)" fg:x="15061" fg:w="2"/><text x="86.8423%" y="575.50"></text></g><g><title>open$NOCANCEL (2 samples, 0.01%)</title><rect x="86.5923%" y="549" width="0.0115%" height="15" fill="rgb(208,226,31)" fg:x="15061" fg:w="2"/><text x="86.8423%" y="559.50"></text></g><g><title>__open_nocancel (2 samples, 0.01%)</title><rect x="86.5923%" y="533" width="0.0115%" height="15" fill="rgb(218,26,49)" fg:x="15061" fg:w="2"/><text x="86.8423%" y="543.50"></text></g><g><title>0x1a092f954 (2 samples, 0.01%)</title><rect x="86.6498%" y="453" width="0.0115%" height="15" fill="rgb(233,197,48)" fg:x="15071" fg:w="2"/><text x="86.8998%" y="463.50"></text></g><g><title>0x1a092fde8 (7 samples, 0.04%)</title><rect x="86.6613%" y="453" width="0.0402%" height="15" fill="rgb(252,181,51)" fg:x="15073" fg:w="7"/><text x="86.9113%" y="463.50"></text></g><g><title>0x1a092f400 (10 samples, 0.06%)</title><rect x="86.6498%" y="469" width="0.0575%" height="15" fill="rgb(253,90,19)" fg:x="15071" fg:w="10"/><text x="86.8998%" y="479.50"></text></g><g><title>deflate (20 samples, 0.11%)</title><rect x="86.6096%" y="501" width="0.1150%" height="15" fill="rgb(215,171,30)" fg:x="15064" fg:w="20"/><text x="86.8596%" y="511.50"></text></g><g><title>0x1a092be94 (20 samples, 0.11%)</title><rect x="86.6096%" y="485" width="0.1150%" height="15" fill="rgb(214,222,9)" fg:x="15064" fg:w="20"/><text x="86.8596%" y="495.50"></text></g><g><title>0x1a092fde8 (3 samples, 0.02%)</title><rect x="86.7073%" y="469" width="0.0172%" height="15" fill="rgb(223,3,22)" fg:x="15081" fg:w="3"/><text x="86.9573%" y="479.50"></text></g><g><title>face_cropper::face_detect::FaceDetector::save_cropped (26 samples, 0.15%)</title><rect x="86.5808%" y="629" width="0.1495%" height="15" fill="rgb(225,196,46)" fg:x="15059" fg:w="26"/><text x="86.8308%" y="639.50"></text></g><g><title>cv_imwrite_const_StringR_const__InputArrayR (26 samples, 0.15%)</title><rect x="86.5808%" y="613" width="0.1495%" height="15" fill="rgb(209,110,37)" fg:x="15059" fg:w="26"/><text x="86.8308%" y="623.50"></text></g><g><title>cv::imwrite(std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt; const&amp;, cv::_InputArray const&amp;, std::__1::vector&lt;int, std::__1::allocator&lt;int&gt;&gt; const&amp;) (26 samples, 0.15%)</title><rect x="86.5808%" y="597" width="0.1495%" height="15" fill="rgb(249,89,12)" fg:x="15059" fg:w="26"/><text x="86.8308%" y="607.50"></text></g><g><title>cv::PngEncoder::write(cv::Mat const&amp;, std::__1::vector&lt;int, std::__1::allocator&lt;int&gt;&gt; const&amp;) (26 samples, 0.15%)</title><rect x="86.5808%" y="581" width="0.1495%" height="15" fill="rgb(226,27,33)" fg:x="15059" fg:w="26"/><text x="86.8308%" y="591.50"></text></g><g><title>png_write_image (22 samples, 0.13%)</title><rect x="86.6038%" y="565" width="0.1265%" height="15" fill="rgb(213,82,22)" fg:x="15063" fg:w="22"/><text x="86.8538%" y="575.50"></text></g><g><title>png_write_row (22 samples, 0.13%)</title><rect x="86.6038%" y="549" width="0.1265%" height="15" fill="rgb(248,140,0)" fg:x="15063" fg:w="22"/><text x="86.8538%" y="559.50"></text></g><g><title>png_write_find_filter (21 samples, 0.12%)</title><rect x="86.6096%" y="533" width="0.1207%" height="15" fill="rgb(228,106,3)" fg:x="15064" fg:w="21"/><text x="86.8596%" y="543.50"></text></g><g><title>png_compress_IDAT (21 samples, 0.12%)</title><rect x="86.6096%" y="517" width="0.1207%" height="15" fill="rgb(209,23,37)" fg:x="15064" fg:w="21"/><text x="86.8596%" y="527.50"></text></g><g><title>png_read_filter_row_avg3_neon (8 samples, 0.05%)</title><rect x="86.7360%" y="533" width="0.0460%" height="15" fill="rgb(241,93,50)" fg:x="15086" fg:w="8"/><text x="86.9860%" y="543.50"></text></g><g><title>png_read_filter_row_paeth3_neon (6 samples, 0.03%)</title><rect x="86.7820%" y="533" width="0.0345%" height="15" fill="rgb(253,46,43)" fg:x="15094" fg:w="6"/><text x="87.0320%" y="543.50"></text></g><g><title>png_combine_row (3 samples, 0.02%)</title><rect x="86.8223%" y="517" width="0.0172%" height="15" fill="rgb(226,206,43)" fg:x="15101" fg:w="3"/><text x="87.0723%" y="527.50"></text></g><g><title>_platform_memmove (2 samples, 0.01%)</title><rect x="86.8280%" y="501" width="0.0115%" height="15" fill="rgb(217,54,7)" fg:x="15102" fg:w="2"/><text x="87.0780%" y="511.50"></text></g><g><title>png_do_bgr (2 samples, 0.01%)</title><rect x="86.8395%" y="517" width="0.0115%" height="15" fill="rgb(223,5,52)" fg:x="15104" fg:w="2"/><text x="87.0895%" y="527.50"></text></g><g><title>0x1a0932a3c (21 samples, 0.12%)</title><rect x="86.8568%" y="501" width="0.1207%" height="15" fill="rgb(206,52,46)" fg:x="15107" fg:w="21"/><text x="87.1068%" y="511.50"></text></g><g><title>inflate (21 samples, 0.12%)</title><rect x="86.9775%" y="501" width="0.1207%" height="15" fill="rgb(253,136,11)" fg:x="15128" fg:w="21"/><text x="87.2275%" y="511.50"></text></g><g><title>cv::PngDecoder::readData(cv::Mat&amp;) (65 samples, 0.37%)</title><rect x="86.7303%" y="565" width="0.3737%" height="15" fill="rgb(208,106,33)" fg:x="15085" fg:w="65"/><text x="86.9803%" y="575.50"></text></g><g><title>png_read_image (65 samples, 0.37%)</title><rect x="86.7303%" y="549" width="0.3737%" height="15" fill="rgb(206,54,4)" fg:x="15085" fg:w="65"/><text x="86.9803%" y="559.50"></text></g><g><title>png_read_row (50 samples, 0.29%)</title><rect x="86.8165%" y="533" width="0.2875%" height="15" fill="rgb(213,3,15)" fg:x="15100" fg:w="50"/><text x="87.0665%" y="543.50"></text></g><g><title>png_read_IDAT_data (44 samples, 0.25%)</title><rect x="86.8510%" y="517" width="0.2530%" height="15" fill="rgb(252,211,39)" fg:x="15106" fg:w="44"/><text x="87.1010%" y="527.50"></text></g><g><title>&lt;indicatif::rayon::ProgressFolder&lt;C&gt; as rayon::iter::plumbing::Folder&lt;T&gt;&gt;::consume (2,064 samples, 11.87%)</title><rect x="75.2602%" y="661" width="11.8668%" height="15" fill="rgb(223,6,36)" fg:x="13090" fg:w="2064"/><text x="75.5102%" y="671.50">&lt;indicatif::rayon:..</text></g><g><title>face_cropper::pipeline::detect_and_save (1,767 samples, 10.16%)</title><rect x="76.9677%" y="645" width="10.1593%" height="15" fill="rgb(252,169,45)" fg:x="13387" fg:w="1767"/><text x="77.2177%" y="655.50">face_cropper::p..</text></g><g><title>face_cropper::face_detect::load_image (69 samples, 0.40%)</title><rect x="86.7303%" y="629" width="0.3967%" height="15" fill="rgb(212,48,26)" fg:x="15085" fg:w="69"/><text x="86.9803%" y="639.50"></text></g><g><title>cv_imread_const_StringR_int (69 samples, 0.40%)</title><rect x="86.7303%" y="613" width="0.3967%" height="15" fill="rgb(251,102,48)" fg:x="15085" fg:w="69"/><text x="86.9803%" y="623.50"></text></g><g><title>cv::imread(std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt; const&amp;, int) (69 samples, 0.40%)</title><rect x="86.7303%" y="597" width="0.3967%" height="15" fill="rgb(243,208,16)" fg:x="15085" fg:w="69"/><text x="86.9803%" y="607.50"></text></g><g><title>cv::imread_(std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt; const&amp;, int, cv::_OutputArray const&amp;) (69 samples, 0.40%)</title><rect x="86.7303%" y="581" width="0.3967%" height="15" fill="rgb(219,96,24)" fg:x="15085" fg:w="69"/><text x="86.9803%" y="591.50"></text></g><g><title>cv::findDecoder(std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt; const&amp;) (2 samples, 0.01%)</title><rect x="87.1155%" y="565" width="0.0115%" height="15" fill="rgb(219,33,29)" fg:x="15152" fg:w="2"/><text x="87.3655%" y="575.50"></text></g><g><title>&lt;rayon_core::job::StackJob&lt;L,F,R&gt; as rayon_core::job::Job&gt;::execute (14,728 samples, 84.68%)</title><rect x="2.4550%" y="805" width="84.6777%" height="15" fill="rgb(223,176,5)" fg:x="427" fg:w="14728"/><text x="2.7050%" y="815.50">&lt;rayon_core::job::StackJob&lt;L,F,R&gt; as rayon_core::job::Job&gt;::execute</text></g><g><title>rayon::iter::plumbing::bridge_unindexed_producer_consumer (14,728 samples, 84.68%)</title><rect x="2.4550%" y="789" width="84.6777%" height="15" fill="rgb(228,140,14)" fg:x="427" fg:w="14728"/><text x="2.7050%" y="799.50">rayon::iter::plumbing::bridge_unindexed_producer_consumer</text></g><g><title>rayon_core::registry::in_worker (2,065 samples, 11.87%)</title><rect x="75.2602%" y="773" width="11.8726%" height="15" fill="rgb(217,179,31)" fg:x="13090" fg:w="2065"/><text x="75.5102%" y="783.50">rayon_core::regist..</text></g><g><title>rayon_core::join::join_context::_$u7b$$u7b$closure$u7d$$u7d$::h70fe2b414aee72d8 (.llvm.14482711468325970259) (2,065 samples, 11.87%)</title><rect x="75.2602%" y="757" width="11.8726%" height="15" fill="rgb(230,9,30)" fg:x="13090" fg:w="2065"/><text x="75.5102%" y="767.50">rayon_core::join::..</text></g><g><title>rayon::iter::plumbing::bridge_unindexed_producer_consumer (2,065 samples, 11.87%)</title><rect x="75.2602%" y="741" width="11.8726%" height="15" fill="rgb(230,136,20)" fg:x="13090" fg:w="2065"/><text x="75.5102%" y="751.50">rayon::iter::plumb..</text></g><g><title>rayon_core::registry::in_worker (2,065 samples, 11.87%)</title><rect x="75.2602%" y="725" width="11.8726%" height="15" fill="rgb(215,210,22)" fg:x="13090" fg:w="2065"/><text x="75.5102%" y="735.50">rayon_core::regist..</text></g><g><title>rayon_core::join::join_context::_$u7b$$u7b$closure$u7d$$u7d$::h70fe2b414aee72d8 (.llvm.14482711468325970259) (2,065 samples, 11.87%)</title><rect x="75.2602%" y="709" width="11.8726%" height="15" fill="rgb(218,43,5)" fg:x="13090" fg:w="2065"/><text x="75.5102%" y="719.50">rayon_core::join::..</text></g><g><title>rayon::iter::plumbing::bridge_unindexed_producer_consumer (2,065 samples, 11.87%)</title><rect x="75.2602%" y="693" width="11.8726%" height="15" fill="rgb(216,11,5)" fg:x="13090" fg:w="2065"/><text x="75.5102%" y="703.50">rayon::iter::plumb..</text></g><g><title>&lt;&amp;rayon::iter::par_bridge::IterParallelProducer&lt;Iter&gt; as rayon::iter::plumbing::UnindexedProducer&gt;::fold_with (2,065 samples, 11.87%)</title><rect x="75.2602%" y="677" width="11.8726%" height="15" fill="rgb(209,82,29)" fg:x="13090" fg:w="2065"/><text x="75.5102%" y="687.50">&lt;&amp;rayon::iter::par..</text></g><g><title>_szone_free (2 samples, 0.01%)</title><rect x="87.1328%" y="341" width="0.0115%" height="15" fill="rgb(244,115,12)" fg:x="15155" fg:w="2"/><text x="87.3828%" y="351.50"></text></g><g><title>cv::Mat::~Mat() (3 samples, 0.02%)</title><rect x="87.1328%" y="389" width="0.0172%" height="15" fill="rgb(222,82,18)" fg:x="15155" fg:w="3"/><text x="87.3828%" y="399.50"></text></g><g><title>cv::Mat::release() (3 samples, 0.02%)</title><rect x="87.1328%" y="373" width="0.0172%" height="15" fill="rgb(249,227,8)" fg:x="15155" fg:w="3"/><text x="87.3828%" y="383.50"></text></g><g><title>cv::StdMatAllocator::deallocate(cv::UMatData*) const (3 samples, 0.02%)</title><rect x="87.1328%" y="357" width="0.0172%" height="15" fill="rgb(253,141,45)" fg:x="15155" fg:w="3"/><text x="87.3828%" y="367.50"></text></g><g><title>cv_CascadeClassifier_delete (4 samples, 0.02%)</title><rect x="87.1328%" y="485" width="0.0230%" height="15" fill="rgb(234,184,4)" fg:x="15155" fg:w="4"/><text x="87.3828%" y="495.50"></text></g><g><title>&lt;deduplicated_symbol&gt; (4 samples, 0.02%)</title><rect x="87.1328%" y="469" width="0.0230%" height="15" fill="rgb(218,194,23)" fg:x="15155" fg:w="4"/><text x="87.3828%" y="479.50"></text></g><g><title>cv::CascadeClassifierImpl::~CascadeClassifierImpl() (4 samples, 0.02%)</title><rect x="87.1328%" y="453" width="0.0230%" height="15" fill="rgb(235,66,41)" fg:x="15155" fg:w="4"/><text x="87.3828%" y="463.50"></text></g><g><title>&lt;deduplicated_symbol&gt; (4 samples, 0.02%)</title><rect x="87.1328%" y="437" width="0.0230%" height="15" fill="rgb(245,217,1)" fg:x="15155" fg:w="4"/><text x="87.3828%" y="447.50"></text></g><g><title>std::__1::__shared_ptr_pointer&lt;cv::HaarEvaluator*, std::__1::shared_ptr&lt;cv::FeatureEvaluator&gt;::__shared_ptr_default_delete&lt;cv::FeatureEvaluator, cv::HaarEvaluator&gt;, std::__1::allocator&lt;cv::HaarEvaluator&gt;&gt;::__on_zero_shared() (4 samples, 0.02%)</title><rect x="87.1328%" y="421" width="0.0230%" height="15" fill="rgb(229,91,1)" fg:x="15155" fg:w="4"/><text x="87.3828%" y="431.50"></text></g><g><title>cv::FeatureEvaluator::~FeatureEvaluator() (4 samples, 0.02%)</title><rect x="87.1328%" y="405" width="0.0230%" height="15" fill="rgb(207,101,30)" fg:x="15155" fg:w="4"/><text x="87.3828%" y="415.50"></text></g><g><title>DYLD-STUB$$cv::FileNode::begin() const (2 samples, 0.01%)</title><rect x="87.1730%" y="373" width="0.0115%" height="15" fill="rgb(223,82,49)" fg:x="15162" fg:w="2"/><text x="87.4230%" y="383.50"></text></g><g><title>cv::FileNodeIterator::FileNodeIterator(cv::FileNode const&amp;, bool) (2 samples, 0.01%)</title><rect x="87.2190%" y="341" width="0.0115%" height="15" fill="rgb(218,167,17)" fg:x="15170" fg:w="2"/><text x="87.4690%" y="351.50"></text></g><g><title>cv::FileNode::size() const (2 samples, 0.01%)</title><rect x="87.2190%" y="325" width="0.0115%" height="15" fill="rgb(208,103,14)" fg:x="15170" fg:w="2"/><text x="87.4690%" y="335.50"></text></g><g><title>cv::FileNode::operator[](std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt; const&amp;) const (6 samples, 0.03%)</title><rect x="87.2075%" y="357" width="0.0345%" height="15" fill="rgb(238,20,8)" fg:x="15168" fg:w="6"/><text x="87.4575%" y="367.50"></text></g><g><title>cv::FileNode::operator[](char const*) const (8 samples, 0.05%)</title><rect x="87.2017%" y="373" width="0.0460%" height="15" fill="rgb(218,80,54)" fg:x="15167" fg:w="8"/><text x="87.4517%" y="383.50"></text></g><g><title>cv::FileNodeIterator::FileNodeIterator(cv::FileNode const&amp;, bool) (2 samples, 0.01%)</title><rect x="87.2535%" y="373" width="0.0115%" height="15" fill="rgb(240,144,17)" fg:x="15176" fg:w="2"/><text x="87.5035%" y="383.50"></text></g><g><title>cv::FileNodeIterator::operator++() (2 samples, 0.01%)</title><rect x="87.2650%" y="373" width="0.0115%" height="15" fill="rgb(245,27,50)" fg:x="15178" fg:w="2"/><text x="87.5150%" y="383.50"></text></g><g><title>cv::FileNode::rawSize() const (2 samples, 0.01%)</title><rect x="87.2650%" y="357" width="0.0115%" height="15" fill="rgb(251,51,7)" fg:x="15178" fg:w="2"/><text x="87.5150%" y="367.50"></text></g><g><title>std::__1::vector&lt;cv::CascadeClassifierImpl::Data::DTreeNode, std::__1::allocator&lt;cv::CascadeClassifierImpl::Data::DTreeNode&gt;&gt;::reserve(unsigned long) (36 samples, 0.21%)</title><rect x="87.3052%" y="373" width="0.2070%" height="15" fill="rgb(245,217,29)" fg:x="15185" fg:w="36"/><text x="87.5552%" y="383.50"></text></g><g><title>&lt;deduplicated_symbol&gt; (2 samples, 0.01%)</title><rect x="87.5007%" y="357" width="0.0115%" height="15" fill="rgb(221,176,29)" fg:x="15219" fg:w="2"/><text x="87.7507%" y="367.50"></text></g><g><title>operator new(unsigned long) (2 samples, 0.01%)</title><rect x="87.5007%" y="341" width="0.0115%" height="15" fill="rgb(212,180,24)" fg:x="15219" fg:w="2"/><text x="87.7507%" y="351.50"></text></g><g><title>szone_malloc_should_clear (2 samples, 0.01%)</title><rect x="87.5007%" y="325" width="0.0115%" height="15" fill="rgb(254,24,2)" fg:x="15219" fg:w="2"/><text x="87.7507%" y="335.50"></text></g><g><title>cv::CascadeClassifierImpl::Data::read(cv::FileNode const&amp;) (118 samples, 0.68%)</title><rect x="87.1673%" y="389" width="0.6784%" height="15" fill="rgb(230,100,2)" fg:x="15161" fg:w="118"/><text x="87.4173%" y="399.50"></text></g><g><title>std::__1::vector&lt;float, std::__1::allocator&lt;float&gt;&gt;::reserve(unsigned long) (58 samples, 0.33%)</title><rect x="87.5122%" y="373" width="0.3335%" height="15" fill="rgb(219,142,25)" fg:x="15221" fg:w="58"/><text x="87.7622%" y="383.50"></text></g><g><title>&lt;deduplicated_symbol&gt; (2 samples, 0.01%)</title><rect x="87.8342%" y="357" width="0.0115%" height="15" fill="rgb(240,73,43)" fg:x="15277" fg:w="2"/><text x="88.0842%" y="367.50"></text></g><g><title>operator new(unsigned long) (2 samples, 0.01%)</title><rect x="87.8342%" y="341" width="0.0115%" height="15" fill="rgb(214,114,15)" fg:x="15277" fg:w="2"/><text x="88.0842%" y="351.50"></text></g><g><title>DYLD-STUB$$cv::FileNode::begin() const (2 samples, 0.01%)</title><rect x="87.8572%" y="357" width="0.0115%" height="15" fill="rgb(207,130,4)" fg:x="15281" fg:w="2"/><text x="88.1072%" y="367.50"></text></g><g><title>cv::FileNode::operator[](std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt; const&amp;) const (3 samples, 0.02%)</title><rect x="87.8687%" y="341" width="0.0172%" height="15" fill="rgb(221,25,40)" fg:x="15283" fg:w="3"/><text x="88.1187%" y="351.50"></text></g><g><title>cv::FileNodeIterator::FileNodeIterator(cv::FileNode const&amp;, bool) (2 samples, 0.01%)</title><rect x="87.8744%" y="325" width="0.0115%" height="15" fill="rgb(241,184,7)" fg:x="15284" fg:w="2"/><text x="88.1244%" y="335.50"></text></g><g><title>cv::FileNode::operator[](char const*) const (5 samples, 0.03%)</title><rect x="87.8687%" y="357" width="0.0287%" height="15" fill="rgb(235,159,4)" fg:x="15283" fg:w="5"/><text x="88.1187%" y="367.50"></text></g><g><title>std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt;::basic_string[abi:ue170006]&lt;0&gt;(char const*) (2 samples, 0.01%)</title><rect x="87.8859%" y="341" width="0.0115%" height="15" fill="rgb(214,87,48)" fg:x="15286" fg:w="2"/><text x="88.1359%" y="351.50"></text></g><g><title>cv::FileNode::size() const (2 samples, 0.01%)</title><rect x="87.8974%" y="341" width="0.0115%" height="15" fill="rgb(246,198,24)" fg:x="15288" fg:w="2"/><text x="88.1474%" y="351.50"></text></g><g><title>cv::FileNodeIterator::FileNodeIterator(cv::FileNode const&amp;, bool) (3 samples, 0.02%)</title><rect x="87.8974%" y="357" width="0.0172%" height="15" fill="rgb(209,66,40)" fg:x="15288" fg:w="3"/><text x="88.1474%" y="367.50"></text></g><g><title>cv::operator!=(cv::FileNodeIterator const&amp;, cv::FileNodeIterator const&amp;) (2 samples, 0.01%)</title><rect x="87.9147%" y="357" width="0.0115%" height="15" fill="rgb(233,147,39)" fg:x="15291" fg:w="2"/><text x="88.1647%" y="367.50"></text></g><g><title>cv::FileNodeIterator::equalTo(cv::FileNodeIterator const&amp;) const (2 samples, 0.01%)</title><rect x="87.9147%" y="341" width="0.0115%" height="15" fill="rgb(231,145,52)" fg:x="15291" fg:w="2"/><text x="88.1647%" y="351.50"></text></g><g><title>cv::read(cv::FileNode const&amp;, float&amp;, float) (2 samples, 0.01%)</title><rect x="87.9262%" y="357" width="0.0115%" height="15" fill="rgb(206,20,26)" fg:x="15293" fg:w="2"/><text x="88.1762%" y="367.50"></text></g><g><title>cv::CascadeClassifierImpl::read_(cv::FileNode const&amp;) (137 samples, 0.79%)</title><rect x="87.1615%" y="405" width="0.7877%" height="15" fill="rgb(238,220,4)" fg:x="15160" fg:w="137"/><text x="87.4115%" y="415.50"></text></g><g><title>cv::HaarEvaluator::read(cv::FileNode const&amp;, cv::Size_&lt;int&gt;) (17 samples, 0.10%)</title><rect x="87.8514%" y="389" width="0.0977%" height="15" fill="rgb(252,195,42)" fg:x="15280" fg:w="17"/><text x="88.1014%" y="399.50"></text></g><g><title>cv::HaarEvaluator::Feature::read(cv::FileNode const&amp;, cv::Size_&lt;int&gt; const&amp;) (16 samples, 0.09%)</title><rect x="87.8572%" y="373" width="0.0920%" height="15" fill="rgb(209,10,6)" fg:x="15281" fg:w="16"/><text x="88.1072%" y="383.50"></text></g><g><title>cv::FileStorage::Impl::addNode(cv::FileNode&amp;, std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt; const&amp;, int, void const*, int) (3 samples, 0.02%)</title><rect x="87.9779%" y="293" width="0.0172%" height="15" fill="rgb(229,3,52)" fg:x="15302" fg:w="3"/><text x="88.2279%" y="303.50"></text></g><g><title>cv::XMLParser::parseTag(char*, std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt;&amp;, std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt;&amp;, int&amp;) (4 samples, 0.02%)</title><rect x="88.0009%" y="293" width="0.0230%" height="15" fill="rgb(253,49,37)" fg:x="15306" fg:w="4"/><text x="88.2509%" y="303.50"></text></g><g><title>std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt;::basic_string[abi:ue170006](char const*, unsigned long) (2 samples, 0.01%)</title><rect x="88.0124%" y="277" width="0.0115%" height="15" fill="rgb(240,103,49)" fg:x="15308" fg:w="2"/><text x="88.2624%" y="287.50"></text></g><g><title>cv::FileStorage::Impl::addNode(cv::FileNode&amp;, std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt; const&amp;, int, void const*, int) (3 samples, 0.02%)</title><rect x="88.0354%" y="277" width="0.0172%" height="15" fill="rgb(250,182,30)" fg:x="15312" fg:w="3"/><text x="88.2854%" y="287.50"></text></g><g><title>cv::FileStorage::Impl::convertToCollection(int, cv::FileNode&amp;) (2 samples, 0.01%)</title><rect x="88.0412%" y="261" width="0.0115%" height="15" fill="rgb(248,8,30)" fg:x="15313" fg:w="2"/><text x="88.2912%" y="271.50"></text></g><g><title>cv::XMLParser::parseTag(char*, std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt;&amp;, std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt;&amp;, int&amp;) (4 samples, 0.02%)</title><rect x="88.0527%" y="277" width="0.0230%" height="15" fill="rgb(237,120,30)" fg:x="15315" fg:w="4"/><text x="88.3027%" y="287.50"></text></g><g><title>cv::FileNode::setValue(int, void const*, int) (3 samples, 0.02%)</title><rect x="88.1274%" y="261" width="0.0172%" height="15" fill="rgb(221,146,34)" fg:x="15328" fg:w="3"/><text x="88.3774%" y="271.50"></text></g><g><title>cv::FileStorage::Impl::convertToCollection(int, cv::FileNode&amp;) (4 samples, 0.02%)</title><rect x="88.1734%" y="245" width="0.0230%" height="15" fill="rgb(242,55,13)" fg:x="15336" fg:w="4"/><text x="88.4234%" y="255.50"></text></g><g><title>cv::FileNode::type() const (2 samples, 0.01%)</title><rect x="88.1849%" y="229" width="0.0115%" height="15" fill="rgb(242,112,31)" fg:x="15338" fg:w="2"/><text x="88.4349%" y="239.50"></text></g><g><title>cv::FileStorage::Impl::reserveNodeSpace(cv::FileNode&amp;, unsigned long) (2 samples, 0.01%)</title><rect x="88.1964%" y="245" width="0.0115%" height="15" fill="rgb(249,192,27)" fg:x="15340" fg:w="2"/><text x="88.4464%" y="255.50"></text></g><g><title>cv::FileStorage::Impl::addNode(cv::FileNode&amp;, std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt; const&amp;, int, void const*, int) (15 samples, 0.09%)</title><rect x="88.1447%" y="261" width="0.0862%" height="15" fill="rgb(208,204,44)" fg:x="15331" fg:w="15"/><text x="88.3947%" y="271.50"></text></g><g><title>std::__1::__hash_const_iterator&lt;std::__1::__hash_node&lt;std::__1::__hash_value_type&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt;, unsigned int&gt;, void*&gt;*&gt; std::__1::__hash_table&lt;std::__1::__hash_value_type&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt;, unsigned int&gt;, std::__1::__unordered_map_hasher&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt;, std::__1::__hash_value_type&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt;, unsigned int&gt;, std::__1::hash&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt;&gt;, std::__1::equal_to&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt;&gt;, true&gt;, std::__1::__unordered_map_equal&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt;, std::__1::__hash_value_type&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt;, unsigned int&gt;, std::__1::equal_to&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt;&gt;, std::__1::hash&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt;&gt;, true&gt;, std::__1::allocator&lt;std::__1::__hash_value_type&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt;, unsigned int&gt;&gt;&gt;::find&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt;&gt;(std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt; const&amp;) const (4 samples, 0.02%)</title><rect x="88.2079%" y="245" width="0.0230%" height="15" fill="rgb(208,93,54)" fg:x="15342" fg:w="4"/><text x="88.4579%" y="255.50"></text></g><g><title>std::__1::__string_hash&lt;char, std::__1::allocator&lt;char&gt;&gt;::operator()[abi:ue170006](std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt; const&amp;) const (2 samples, 0.01%)</title><rect x="88.2194%" y="229" width="0.0115%" height="15" fill="rgb(242,1,31)" fg:x="15344" fg:w="2"/><text x="88.4694%" y="239.50"></text></g><g><title>cv::FileStorage::Impl::addNode(cv::FileNode&amp;, std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt; const&amp;, int, void const*, int) (2 samples, 0.01%)</title><rect x="88.2424%" y="245" width="0.0115%" height="15" fill="rgb(241,83,25)" fg:x="15348" fg:w="2"/><text x="88.4924%" y="255.50"></text></g><g><title>cv::FileStorage::Impl::convertToCollection(int, cv::FileNode&amp;) (5 samples, 0.03%)</title><rect x="88.2309%" y="261" width="0.0287%" height="15" fill="rgb(205,169,50)" fg:x="15346" fg:w="5"/><text x="88.4809%" y="271.50"></text></g><g><title>cv::FileStorage::Impl::reserveNodeSpace(cv::FileNode&amp;, unsigned long) (4 samples, 0.02%)</title><rect x="88.2654%" y="261" width="0.0230%" height="15" fill="rgb(239,186,37)" fg:x="15352" fg:w="4"/><text x="88.5154%" y="271.50"></text></g><g><title>_os_unfair_lock_lock_slow (2 samples, 0.01%)</title><rect x="88.3229%" y="181" width="0.0115%" height="15" fill="rgb(205,221,10)" fg:x="15362" fg:w="2"/><text x="88.5729%" y="191.50"></text></g><g><title>__ulock_wait2 (2 samples, 0.01%)</title><rect x="88.3229%" y="165" width="0.0115%" height="15" fill="rgb(218,196,15)" fg:x="15362" fg:w="2"/><text x="88.5729%" y="175.50"></text></g><g><title>localeconv_l (5 samples, 0.03%)</title><rect x="88.3114%" y="197" width="0.0287%" height="15" fill="rgb(218,196,35)" fg:x="15360" fg:w="5"/><text x="88.5614%" y="207.50"></text></g><g><title>_ffpp_strtoencf64_l (8 samples, 0.05%)</title><rect x="88.2999%" y="229" width="0.0460%" height="15" fill="rgb(233,63,24)" fg:x="15358" fg:w="8"/><text x="88.5499%" y="239.50"></text></g><g><title>fastParse64 (8 samples, 0.05%)</title><rect x="88.2999%" y="213" width="0.0460%" height="15" fill="rgb(225,8,4)" fg:x="15358" fg:w="8"/><text x="88.5499%" y="223.50"></text></g><g><title>cv::FileStorage::Impl::strtod(char*, char**) (11 samples, 0.06%)</title><rect x="88.2884%" y="261" width="0.0632%" height="15" fill="rgb(234,105,35)" fg:x="15356" fg:w="11"/><text x="88.5384%" y="271.50"></text></g><g><title>strtod (9 samples, 0.05%)</title><rect x="88.2999%" y="245" width="0.0517%" height="15" fill="rgb(236,21,32)" fg:x="15358" fg:w="9"/><text x="88.5499%" y="255.50"></text></g><g><title>cv::XMLParser::parseTag(char*, std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt;&amp;, std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt;&amp;, int&amp;) (4 samples, 0.02%)</title><rect x="88.3516%" y="261" width="0.0230%" height="15" fill="rgb(228,109,6)" fg:x="15367" fg:w="4"/><text x="88.6016%" y="271.50"></text></g><g><title>cv::FileNode::setValue(int, void const*, int) (2 samples, 0.01%)</title><rect x="88.3919%" y="245" width="0.0115%" height="15" fill="rgb(229,215,31)" fg:x="15374" fg:w="2"/><text x="88.6419%" y="255.50"></text></g><g><title>cv::FileStorage::Impl::getNodePtr(unsigned long, unsigned long) const (2 samples, 0.01%)</title><rect x="88.3919%" y="229" width="0.0115%" height="15" fill="rgb(221,52,54)" fg:x="15374" fg:w="2"/><text x="88.6419%" y="239.50"></text></g><g><title>cv::FileStorage::Impl::addNode(cv::FileNode&amp;, std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt; const&amp;, int, void const*, int) (3 samples, 0.02%)</title><rect x="88.4091%" y="245" width="0.0172%" height="15" fill="rgb(252,129,43)" fg:x="15377" fg:w="3"/><text x="88.6591%" y="255.50"></text></g><g><title>cv::FileStorage::Impl::addNode(cv::FileNode&amp;, std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt; const&amp;, int, void const*, int) (2 samples, 0.01%)</title><rect x="88.4321%" y="229" width="0.0115%" height="15" fill="rgb(248,183,27)" fg:x="15381" fg:w="2"/><text x="88.6821%" y="239.50"></text></g><g><title>cv::FileStorage::Impl::convertToCollection(int, cv::FileNode&amp;) (4 samples, 0.02%)</title><rect x="88.4264%" y="245" width="0.0230%" height="15" fill="rgb(250,0,22)" fg:x="15380" fg:w="4"/><text x="88.6764%" y="255.50"></text></g><g><title>cv::FileStorage::Impl::finalizeCollection(cv::FileNode&amp;) (3 samples, 0.02%)</title><rect x="88.4494%" y="245" width="0.0172%" height="15" fill="rgb(213,166,10)" fg:x="15384" fg:w="3"/><text x="88.6994%" y="255.50"></text></g><g><title>cv::FileNode::type() const (2 samples, 0.01%)</title><rect x="88.4551%" y="229" width="0.0115%" height="15" fill="rgb(207,163,36)" fg:x="15385" fg:w="2"/><text x="88.7051%" y="239.50"></text></g><g><title>__ulock_wait2 (4 samples, 0.02%)</title><rect x="88.4896%" y="165" width="0.0230%" height="15" fill="rgb(208,122,22)" fg:x="15391" fg:w="4"/><text x="88.7396%" y="175.50"></text></g><g><title>_os_unfair_lock_lock_slow (2 samples, 0.01%)</title><rect x="88.5184%" y="165" width="0.0115%" height="15" fill="rgb(207,104,49)" fg:x="15396" fg:w="2"/><text x="88.7684%" y="175.50"></text></g><g><title>cv::FileStorage::Impl::strtod(char*, char**) (13 samples, 0.07%)</title><rect x="88.4724%" y="245" width="0.0747%" height="15" fill="rgb(248,211,50)" fg:x="15388" fg:w="13"/><text x="88.7224%" y="255.50"></text></g><g><title>strtod (13 samples, 0.07%)</title><rect x="88.4724%" y="229" width="0.0747%" height="15" fill="rgb(217,13,45)" fg:x="15388" fg:w="13"/><text x="88.7224%" y="239.50"></text></g><g><title>_ffpp_strtoencf64_l (13 samples, 0.07%)</title><rect x="88.4724%" y="213" width="0.0747%" height="15" fill="rgb(211,216,49)" fg:x="15388" fg:w="13"/><text x="88.7224%" y="223.50"></text></g><g><title>fastParse64 (11 samples, 0.06%)</title><rect x="88.4839%" y="197" width="0.0632%" height="15" fill="rgb(221,58,53)" fg:x="15390" fg:w="11"/><text x="88.7339%" y="207.50"></text></g><g><title>localeconv_l (10 samples, 0.06%)</title><rect x="88.4896%" y="181" width="0.0575%" height="15" fill="rgb(220,112,41)" fg:x="15391" fg:w="10"/><text x="88.7396%" y="191.50"></text></g><g><title>os_unfair_lock_lock (3 samples, 0.02%)</title><rect x="88.5299%" y="165" width="0.0172%" height="15" fill="rgb(236,38,28)" fg:x="15398" fg:w="3"/><text x="88.7799%" y="175.50"></text></g><g><title>__read_nocancel (2 samples, 0.01%)</title><rect x="88.5816%" y="149" width="0.0115%" height="15" fill="rgb(227,195,22)" fg:x="15407" fg:w="2"/><text x="88.8316%" y="159.50"></text></g><g><title>__srefill1 (4 samples, 0.02%)</title><rect x="88.5816%" y="181" width="0.0230%" height="15" fill="rgb(214,55,33)" fg:x="15407" fg:w="4"/><text x="88.8316%" y="191.50"></text></g><g><title>_sread (4 samples, 0.02%)</title><rect x="88.5816%" y="165" width="0.0230%" height="15" fill="rgb(248,80,13)" fg:x="15407" fg:w="4"/><text x="88.8316%" y="175.50"></text></g><g><title>__sread (2 samples, 0.01%)</title><rect x="88.5931%" y="149" width="0.0115%" height="15" fill="rgb(238,52,6)" fg:x="15409" fg:w="2"/><text x="88.8431%" y="159.50"></text></g><g><title>__read_nocancel (2 samples, 0.01%)</title><rect x="88.5931%" y="133" width="0.0115%" height="15" fill="rgb(224,198,47)" fg:x="15409" fg:w="2"/><text x="88.8431%" y="143.50"></text></g><g><title>cv::XMLParser::skipSpaces(char*, int) (13 samples, 0.07%)</title><rect x="88.5471%" y="245" width="0.0747%" height="15" fill="rgb(233,171,20)" fg:x="15401" fg:w="13"/><text x="88.7971%" y="255.50"></text></g><g><title>cv::FileStorage::Impl::gets() (12 samples, 0.07%)</title><rect x="88.5529%" y="229" width="0.0690%" height="15" fill="rgb(241,30,25)" fg:x="15402" fg:w="12"/><text x="88.8029%" y="239.50"></text></g><g><title>cv::FileStorage::Impl::gets(unsigned long) (9 samples, 0.05%)</title><rect x="88.5701%" y="213" width="0.0517%" height="15" fill="rgb(207,171,38)" fg:x="15405" fg:w="9"/><text x="88.8201%" y="223.50"></text></g><g><title>fgets (7 samples, 0.04%)</title><rect x="88.5816%" y="197" width="0.0402%" height="15" fill="rgb(234,70,1)" fg:x="15407" fg:w="7"/><text x="88.8316%" y="207.50"></text></g><g><title>cv::XMLParser::parseValue(char*, cv::FileNode&amp;) (44 samples, 0.25%)</title><rect x="88.3746%" y="261" width="0.2530%" height="15" fill="rgb(232,178,18)" fg:x="15371" fg:w="44"/><text x="88.6246%" y="271.50"></text></g><g><title>_platform_strlen (2 samples, 0.01%)</title><rect x="88.6736%" y="213" width="0.0115%" height="15" fill="rgb(241,78,40)" fg:x="15423" fg:w="2"/><text x="88.9236%" y="223.50"></text></g><g><title>__read_nocancel (2 samples, 0.01%)</title><rect x="88.6966%" y="165" width="0.0115%" height="15" fill="rgb(222,35,25)" fg:x="15427" fg:w="2"/><text x="88.9466%" y="175.50"></text></g><g><title>__srefill1 (3 samples, 0.02%)</title><rect x="88.6966%" y="197" width="0.0172%" height="15" fill="rgb(207,92,16)" fg:x="15427" fg:w="3"/><text x="88.9466%" y="207.50"></text></g><g><title>_sread (3 samples, 0.02%)</title><rect x="88.6966%" y="181" width="0.0172%" height="15" fill="rgb(216,59,51)" fg:x="15427" fg:w="3"/><text x="88.9466%" y="191.50"></text></g><g><title>_pthread_mutex_firstfit_lock_slow (2 samples, 0.01%)</title><rect x="88.7311%" y="181" width="0.0115%" height="15" fill="rgb(213,80,28)" fg:x="15433" fg:w="2"/><text x="88.9811%" y="191.50"></text></g><g><title>_pthread_mutex_lock_init_slow (2 samples, 0.01%)</title><rect x="88.7426%" y="181" width="0.0115%" height="15" fill="rgb(220,93,7)" fg:x="15435" fg:w="2"/><text x="88.9926%" y="191.50"></text></g><g><title>cv::XMLParser::skipSpaces(char*, int) (23 samples, 0.13%)</title><rect x="88.6276%" y="261" width="0.1322%" height="15" fill="rgb(225,24,44)" fg:x="15415" fg:w="23"/><text x="88.8776%" y="271.50"></text></g><g><title>cv::FileStorage::Impl::gets() (23 samples, 0.13%)</title><rect x="88.6276%" y="245" width="0.1322%" height="15" fill="rgb(243,74,40)" fg:x="15415" fg:w="23"/><text x="88.8776%" y="255.50"></text></g><g><title>cv::FileStorage::Impl::gets(unsigned long) (20 samples, 0.11%)</title><rect x="88.6449%" y="229" width="0.1150%" height="15" fill="rgb(228,39,7)" fg:x="15418" fg:w="20"/><text x="88.8949%" y="239.50"></text></g><g><title>fgets (13 samples, 0.07%)</title><rect x="88.6851%" y="213" width="0.0747%" height="15" fill="rgb(227,79,8)" fg:x="15425" fg:w="13"/><text x="88.9351%" y="223.50"></text></g><g><title>flockfile (6 samples, 0.03%)</title><rect x="88.7253%" y="197" width="0.0345%" height="15" fill="rgb(236,58,11)" fg:x="15432" fg:w="6"/><text x="88.9753%" y="207.50"></text></g><g><title>cv::XMLParser::parseValue(char*, cv::FileNode&amp;) (123 samples, 0.71%)</title><rect x="88.0757%" y="277" width="0.7072%" height="15" fill="rgb(249,63,35)" fg:x="15319" fg:w="123"/><text x="88.3257%" y="287.50"></text></g><g><title>strtoll_l (4 samples, 0.02%)</title><rect x="88.7598%" y="261" width="0.0230%" height="15" fill="rgb(252,114,16)" fg:x="15438" fg:w="4"/><text x="89.0098%" y="271.50"></text></g><g><title>_platform_memchr (2 samples, 0.01%)</title><rect x="88.8058%" y="213" width="0.0115%" height="15" fill="rgb(254,151,24)" fg:x="15446" fg:w="2"/><text x="89.0558%" y="223.50"></text></g><g><title>cv::FileStorage::Impl::gets(unsigned long) (5 samples, 0.03%)</title><rect x="88.8001%" y="245" width="0.0287%" height="15" fill="rgb(253,54,39)" fg:x="15445" fg:w="5"/><text x="89.0501%" y="255.50"></text></g><g><title>fgets (4 samples, 0.02%)</title><rect x="88.8058%" y="229" width="0.0230%" height="15" fill="rgb(243,25,45)" fg:x="15446" fg:w="4"/><text x="89.0558%" y="239.50"></text></g><g><title>flockfile (2 samples, 0.01%)</title><rect x="88.8173%" y="213" width="0.0115%" height="15" fill="rgb(234,134,9)" fg:x="15448" fg:w="2"/><text x="89.0673%" y="223.50"></text></g><g><title>cv::XMLParser::parseValue(char*, cv::FileNode&amp;) (141 samples, 0.81%)</title><rect x="88.0239%" y="293" width="0.8107%" height="15" fill="rgb(227,166,31)" fg:x="15310" fg:w="141"/><text x="88.2739%" y="303.50"></text></g><g><title>cv::XMLParser::skipSpaces(char*, int) (9 samples, 0.05%)</title><rect x="88.7828%" y="277" width="0.0517%" height="15" fill="rgb(245,143,41)" fg:x="15442" fg:w="9"/><text x="89.0328%" y="287.50"></text></g><g><title>cv::FileStorage::Impl::gets() (6 samples, 0.03%)</title><rect x="88.8001%" y="261" width="0.0345%" height="15" fill="rgb(238,181,32)" fg:x="15445" fg:w="6"/><text x="89.0501%" y="271.50"></text></g><g><title>cv::XMLParser::parseValue(char*, cv::FileNode&amp;) (153 samples, 0.88%)</title><rect x="87.9722%" y="309" width="0.8797%" height="15" fill="rgb(224,113,18)" fg:x="15301" fg:w="153"/><text x="88.2222%" y="319.50"></text></g><g><title>cv::XMLParser::skipSpaces(char*, int) (3 samples, 0.02%)</title><rect x="88.8346%" y="293" width="0.0172%" height="15" fill="rgb(240,229,28)" fg:x="15451" fg:w="3"/><text x="89.0846%" y="303.50"></text></g><g><title>cv::FileStorage::Impl::gets() (3 samples, 0.02%)</title><rect x="88.8346%" y="277" width="0.0172%" height="15" fill="rgb(250,185,3)" fg:x="15451" fg:w="3"/><text x="89.0846%" y="287.50"></text></g><g><title>cv::FileStorage::Impl::gets(unsigned long) (3 samples, 0.02%)</title><rect x="88.8346%" y="261" width="0.0172%" height="15" fill="rgb(212,59,25)" fg:x="15451" fg:w="3"/><text x="89.0846%" y="271.50"></text></g><g><title>fgets (3 samples, 0.02%)</title><rect x="88.8346%" y="245" width="0.0172%" height="15" fill="rgb(221,87,20)" fg:x="15451" fg:w="3"/><text x="89.0846%" y="255.50"></text></g><g><title>funlockfile (2 samples, 0.01%)</title><rect x="88.8403%" y="229" width="0.0115%" height="15" fill="rgb(213,74,28)" fg:x="15452" fg:w="2"/><text x="89.0903%" y="239.50"></text></g><g><title>cv::XMLParser::parse(char*) (159 samples, 0.91%)</title><rect x="87.9549%" y="373" width="0.9142%" height="15" fill="rgb(224,132,34)" fg:x="15298" fg:w="159"/><text x="88.2049%" y="383.50"></text></g><g><title>cv::XMLParser::parseValue(char*, cv::FileNode&amp;) (159 samples, 0.91%)</title><rect x="87.9549%" y="357" width="0.9142%" height="15" fill="rgb(222,101,24)" fg:x="15298" fg:w="159"/><text x="88.2049%" y="367.50"></text></g><g><title>cv::XMLParser::parseValue(char*, cv::FileNode&amp;) (159 samples, 0.91%)</title><rect x="87.9549%" y="341" width="0.9142%" height="15" fill="rgb(254,142,4)" fg:x="15298" fg:w="159"/><text x="88.2049%" y="351.50"></text></g><g><title>cv::XMLParser::parseValue(char*, cv::FileNode&amp;) (158 samples, 0.91%)</title><rect x="87.9607%" y="325" width="0.9084%" height="15" fill="rgb(230,229,49)" fg:x="15299" fg:w="158"/><text x="88.2107%" y="335.50"></text></g><g><title>cv::XMLParser::skipSpaces(char*, int) (3 samples, 0.02%)</title><rect x="88.8518%" y="309" width="0.0172%" height="15" fill="rgb(238,70,47)" fg:x="15454" fg:w="3"/><text x="89.1018%" y="319.50"></text></g><g><title>cv::FileStorage::Impl::gets() (3 samples, 0.02%)</title><rect x="88.8518%" y="293" width="0.0172%" height="15" fill="rgb(231,160,17)" fg:x="15454" fg:w="3"/><text x="89.1018%" y="303.50"></text></g><g><title>cv::FileStorage::Impl::gets(unsigned long) (3 samples, 0.02%)</title><rect x="88.8518%" y="277" width="0.0172%" height="15" fill="rgb(218,68,53)" fg:x="15454" fg:w="3"/><text x="89.1018%" y="287.50"></text></g><g><title>fgets (3 samples, 0.02%)</title><rect x="88.8518%" y="261" width="0.0172%" height="15" fill="rgb(236,111,10)" fg:x="15454" fg:w="3"/><text x="89.1018%" y="271.50"></text></g><g><title>face_cropper::face_detect::FaceDetector::new (300 samples, 1.72%)</title><rect x="87.1558%" y="485" width="1.7248%" height="15" fill="rgb(224,34,41)" fg:x="15159" fg:w="300"/><text x="87.4058%" y="495.50"></text></g><g><title>cv_CascadeClassifier_CascadeClassifier_const_StringR (299 samples, 1.72%)</title><rect x="87.1615%" y="469" width="1.7191%" height="15" fill="rgb(241,118,19)" fg:x="15160" fg:w="299"/><text x="87.4115%" y="479.50"></text></g><g><title>cv::CascadeClassifier::CascadeClassifier(std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt; const&amp;) (299 samples, 1.72%)</title><rect x="87.1615%" y="453" width="1.7191%" height="15" fill="rgb(238,129,25)" fg:x="15160" fg:w="299"/><text x="87.4115%" y="463.50"></text></g><g><title>cv::CascadeClassifier::load(std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt; const&amp;) (299 samples, 1.72%)</title><rect x="87.1615%" y="437" width="1.7191%" height="15" fill="rgb(238,22,31)" fg:x="15160" fg:w="299"/><text x="87.4115%" y="447.50"></text></g><g><title>cv::CascadeClassifierImpl::load(std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt; const&amp;) (299 samples, 1.72%)</title><rect x="87.1615%" y="421" width="1.7191%" height="15" fill="rgb(222,174,48)" fg:x="15160" fg:w="299"/><text x="87.4115%" y="431.50"></text></g><g><title>cv::FileStorage::FileStorage(std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt; const&amp;, int, std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt; const&amp;) (162 samples, 0.93%)</title><rect x="87.9492%" y="405" width="0.9314%" height="15" fill="rgb(206,152,40)" fg:x="15297" fg:w="162"/><text x="88.1992%" y="415.50"></text></g><g><title>cv::FileStorage::Impl::open(char const*, int, char const*) (162 samples, 0.93%)</title><rect x="87.9492%" y="389" width="0.9314%" height="15" fill="rgb(218,99,54)" fg:x="15297" fg:w="162"/><text x="88.1992%" y="399.50"></text></g><g><title>fopen (2 samples, 0.01%)</title><rect x="88.8691%" y="373" width="0.0115%" height="15" fill="rgb(220,174,26)" fg:x="15457" fg:w="2"/><text x="89.1191%" y="383.50"></text></g><g><title>cv::HaarEvaluator::computeChannels(int, cv::_InputArray const&amp;) (43 samples, 0.25%)</title><rect x="88.8806%" y="357" width="0.2472%" height="15" fill="rgb(245,116,9)" fg:x="15459" fg:w="43"/><text x="89.1306%" y="367.50"></text></g><g><title>cv::integral(cv::_InputArray const&amp;, cv::_OutputArray const&amp;, cv::_OutputArray const&amp;, cv::_OutputArray const&amp;, int, int) (43 samples, 0.25%)</title><rect x="88.8806%" y="341" width="0.2472%" height="15" fill="rgb(209,72,35)" fg:x="15459" fg:w="43"/><text x="89.1306%" y="351.50"></text></g><g><title>cv::hal::integral(int, int, int, unsigned char const*, unsigned long, unsigned char*, unsigned long, unsigned char*, unsigned long, unsigned char*, unsigned long, int, int, int) (43 samples, 0.25%)</title><rect x="88.8806%" y="325" width="0.2472%" height="15" fill="rgb(226,126,21)" fg:x="15459" fg:w="43"/><text x="89.1306%" y="335.50"></text></g><g><title>cv::HaarEvaluator::computeOptFeatures() (3 samples, 0.02%)</title><rect x="89.1278%" y="357" width="0.0172%" height="15" fill="rgb(227,192,1)" fg:x="15502" fg:w="3"/><text x="89.3778%" y="367.50"></text></g><g><title>cv::softfloat_roundPackToF64(bool, short, unsigned long long) (5 samples, 0.03%)</title><rect x="89.1623%" y="293" width="0.0287%" height="15" fill="rgb(237,180,29)" fg:x="15508" fg:w="5"/><text x="89.4123%" y="303.50"></text></g><g><title>(anonymous namespace)::interpolationLinear&lt;unsigned char&gt;::getCoeffs(int, int*, (anonymous namespace)::ufixedpoint16*) (14 samples, 0.08%)</title><rect x="89.1451%" y="309" width="0.0805%" height="15" fill="rgb(230,197,35)" fg:x="15505" fg:w="14"/><text x="89.3951%" y="319.50"></text></g><g><title>cvRound(cv::softdouble const&amp;) (3 samples, 0.02%)</title><rect x="89.2083%" y="293" width="0.0172%" height="15" fill="rgb(246,193,31)" fg:x="15516" fg:w="3"/><text x="89.4583%" y="303.50"></text></g><g><title>cv::softfloat_roundToI32(bool, unsigned long long, unsigned char, bool) (3 samples, 0.02%)</title><rect x="89.2083%" y="277" width="0.0172%" height="15" fill="rgb(241,36,4)" fg:x="15516" fg:w="3"/><text x="89.4583%" y="287.50"></text></g><g><title>(anonymous namespace)::resize_bitExactInvoker&lt;unsigned char, (anonymous namespace)::ufixedpoint16, 2&gt;::operator()(cv::Range const&amp;) const (36 samples, 0.21%)</title><rect x="89.2256%" y="293" width="0.2070%" height="15" fill="rgb(241,130,17)" fg:x="15519" fg:w="36"/><text x="89.4756%" y="303.50"></text></g><g><title>void (anonymous namespace)::hlineResizeCn&lt;unsigned char, (anonymous namespace)::ufixedpoint16, 2, true, 1&gt;(unsigned char*, int, int*, (anonymous namespace)::ufixedpoint16*, (anonymous namespace)::ufixedpoint16*, int, int, int) (25 samples, 0.14%)</title><rect x="89.2888%" y="277" width="0.1437%" height="15" fill="rgb(206,137,32)" fg:x="15530" fg:w="25"/><text x="89.5388%" y="287.50"></text></g><g><title>cv::parallel_for_(cv::Range const&amp;, cv::ParallelLoopBody const&amp;, double) (41 samples, 0.24%)</title><rect x="89.2256%" y="309" width="0.2357%" height="15" fill="rgb(237,228,51)" fg:x="15519" fg:w="41"/><text x="89.4756%" y="319.50"></text></g><g><title>void (anonymous namespace)::hlineResizeCn&lt;unsigned char, (anonymous namespace)::ufixedpoint16, 2, true, 1&gt;(unsigned char*, int, int*, (anonymous namespace)::ufixedpoint16*, (anonymous namespace)::ufixedpoint16*, int, int, int) (5 samples, 0.03%)</title><rect x="89.4325%" y="293" width="0.0287%" height="15" fill="rgb(243,6,42)" fg:x="15555" fg:w="5"/><text x="89.6825%" y="303.50"></text></g><g><title>cv::softfloat_normRoundPackToF64(bool, short, unsigned long long) (2 samples, 0.01%)</title><rect x="89.4613%" y="309" width="0.0115%" height="15" fill="rgb(251,74,28)" fg:x="15560" fg:w="2"/><text x="89.7113%" y="319.50"></text></g><g><title>cv::softfloat_subMagsF64(unsigned long long, unsigned long long, bool) (2 samples, 0.01%)</title><rect x="89.4728%" y="309" width="0.0115%" height="15" fill="rgb(218,20,49)" fg:x="15562" fg:w="2"/><text x="89.7228%" y="319.50"></text></g><g><title>cv::resize(cv::_InputArray const&amp;, cv::_OutputArray const&amp;, cv::Size_&lt;int&gt;, double, double, int) (60 samples, 0.34%)</title><rect x="89.1451%" y="357" width="0.3450%" height="15" fill="rgb(238,28,14)" fg:x="15505" fg:w="60"/><text x="89.3951%" y="367.50"></text></g><g><title>cv::hal::resize(int, unsigned char const*, unsigned long, int, int, unsigned char*, unsigned long, int, int, double, double, int) (60 samples, 0.34%)</title><rect x="89.1451%" y="341" width="0.3450%" height="15" fill="rgb(229,40,46)" fg:x="15505" fg:w="60"/><text x="89.3951%" y="351.50"></text></g><g><title>void (anonymous namespace)::resize_bitExact&lt;unsigned char, (anonymous namespace)::interpolationLinear&lt;unsigned char&gt;&gt;(unsigned char const*, unsigned long, int, int, unsigned char*, unsigned long, int, int, int, double, double) (60 samples, 0.34%)</title><rect x="89.1451%" y="325" width="0.3450%" height="15" fill="rgb(244,195,20)" fg:x="15505" fg:w="60"/><text x="89.3951%" y="335.50"></text></g><g><title>cv::FeatureEvaluator::setImage(cv::_InputArray const&amp;, std::__1::vector&lt;float, std::__1::allocator&lt;float&gt;&gt; const&amp;) (108 samples, 0.62%)</title><rect x="88.8806%" y="373" width="0.6209%" height="15" fill="rgb(253,56,35)" fg:x="15459" fg:w="108"/><text x="89.1306%" y="383.50"></text></g><g><title>void cv::copyVectorToUMat&lt;cv::FeatureEvaluator::ScaleData&gt;(std::__1::vector&lt;cv::FeatureEvaluator::ScaleData, std::__1::allocator&lt;cv::FeatureEvaluator::ScaleData&gt;&gt; const&amp;, cv::UMat&amp;) (2 samples, 0.01%)</title><rect x="89.4900%" y="357" width="0.0115%" height="15" fill="rgb(210,149,44)" fg:x="15565" fg:w="2"/><text x="89.7400%" y="367.50"></text></g><g><title>cv::Mat::copyTo(cv::_OutputArray const&amp;) const (2 samples, 0.01%)</title><rect x="89.4900%" y="341" width="0.0115%" height="15" fill="rgb(240,135,12)" fg:x="15565" fg:w="2"/><text x="89.7400%" y="351.50"></text></g><g><title>cv::ocl::OpenCLAllocator::upload(cv::UMatData*, void const*, int, unsigned long const*, unsigned long const*, unsigned long const*, unsigned long const*) const (2 samples, 0.01%)</title><rect x="89.4900%" y="325" width="0.0115%" height="15" fill="rgb(251,24,50)" fg:x="15565" fg:w="2"/><text x="89.7400%" y="335.50"></text></g><g><title>cv::cvtColor(cv::_InputArray const&amp;, cv::_OutputArray const&amp;, int, int, cv::AlgorithmHint) (3 samples, 0.02%)</title><rect x="89.5015%" y="373" width="0.0172%" height="15" fill="rgb(243,200,47)" fg:x="15567" fg:w="3"/><text x="89.7515%" y="383.50"></text></g><g><title>cv::cvtColorBGR2Gray(cv::_InputArray const&amp;, cv::_OutputArray const&amp;, bool) (3 samples, 0.02%)</title><rect x="89.5015%" y="357" width="0.0172%" height="15" fill="rgb(224,166,26)" fg:x="15567" fg:w="3"/><text x="89.7515%" y="367.50"></text></g><g><title>cv::hal::cvtBGRtoGray(unsigned char const*, unsigned long, unsigned char*, unsigned long, int, int, int, int, bool) (3 samples, 0.02%)</title><rect x="89.5015%" y="341" width="0.0172%" height="15" fill="rgb(233,0,47)" fg:x="15567" fg:w="3"/><text x="89.7515%" y="351.50"></text></g><g><title>cv::parallel_for_(cv::Range const&amp;, cv::ParallelLoopBody const&amp;, double) (3 samples, 0.02%)</title><rect x="89.5015%" y="325" width="0.0172%" height="15" fill="rgb(253,80,5)" fg:x="15567" fg:w="3"/><text x="89.7515%" y="335.50"></text></g><g><title>TegraCvtColor_bgr2gray_Invoker::operator()(cv::Range const&amp;) const (3 samples, 0.02%)</title><rect x="89.5015%" y="309" width="0.0172%" height="15" fill="rgb(214,133,25)" fg:x="15567" fg:w="3"/><text x="89.7515%" y="319.50"></text></g><g><title>carotene_o4t::bgr2gray(carotene_o4t::Size2D const&amp;, carotene_o4t::COLOR_SPACE, unsigned char const*, long, unsigned char*, long) (3 samples, 0.02%)</title><rect x="89.5015%" y="293" width="0.0172%" height="15" fill="rgb(209,27,14)" fg:x="15567" fg:w="3"/><text x="89.7515%" y="303.50"></text></g><g><title>cv::CascadeClassifierImpl::runAt(cv::Ptr&lt;cv::FeatureEvaluator&gt;&amp;, cv::Point_&lt;int&gt;, int, double&amp;) (2 samples, 0.01%)</title><rect x="89.5188%" y="357" width="0.0115%" height="15" fill="rgb(219,102,51)" fg:x="15570" fg:w="2"/><text x="89.7688%" y="367.50"></text></g><g><title>DYLD-STUB$$cv::utils::trace::details::Region::Region(cv::utils::trace::details::Region::LocationStaticStorage const&amp;) (3 samples, 0.02%)</title><rect x="89.6683%" y="325" width="0.0172%" height="15" fill="rgb(237,18,16)" fg:x="15596" fg:w="3"/><text x="89.9183%" y="335.50"></text></g><g><title>cv::FeatureEvaluator::getScaleData(int) const (3 samples, 0.02%)</title><rect x="89.6855%" y="325" width="0.0172%" height="15" fill="rgb(241,85,17)" fg:x="15599" fg:w="3"/><text x="89.9355%" y="335.50"></text></g><g><title>cv::HaarEvaluator::operator()(int) const (260 samples, 1.49%)</title><rect x="89.7028%" y="325" width="1.4949%" height="15" fill="rgb(236,90,42)" fg:x="15602" fg:w="260"/><text x="89.9528%" y="335.50"></text></g><g><title>cv::HaarEvaluator::setWindow(cv::Point_&lt;int&gt;, int) (75 samples, 0.43%)</title><rect x="91.1976%" y="325" width="0.4312%" height="15" fill="rgb(249,57,21)" fg:x="15862" fg:w="75"/><text x="91.4476%" y="335.50"></text></g><g><title>cv::FeatureEvaluator::getScaleData(int) const (11 samples, 0.06%)</title><rect x="91.5656%" y="309" width="0.0632%" height="15" fill="rgb(243,12,36)" fg:x="15926" fg:w="11"/><text x="91.8156%" y="319.50"></text></g><g><title>cv::utils::trace::details::Region::Region(cv::utils::trace::details::Region::LocationStaticStorage const&amp;) (9 samples, 0.05%)</title><rect x="91.6288%" y="325" width="0.0517%" height="15" fill="rgb(253,128,47)" fg:x="15937" fg:w="9"/><text x="91.8788%" y="335.50"></text></g><g><title>DYLD-STUB$$cv::utils::trace::details::Region::Region(cv::utils::trace::details::Region::LocationStaticStorage const&amp;) (2 samples, 0.01%)</title><rect x="93.3249%" y="309" width="0.0115%" height="15" fill="rgb(207,33,20)" fg:x="16232" fg:w="2"/><text x="93.5749%" y="319.50"></text></g><g><title>cv::HaarEvaluator::operator()(int) const (1,029 samples, 5.92%)</title><rect x="93.3364%" y="309" width="5.9162%" height="15" fill="rgb(233,215,35)" fg:x="16234" fg:w="1029"/><text x="93.5864%" y="319.50">cv::Haar..</text></g><g><title>cv::CascadeClassifierImpl::runAt(cv::Ptr&lt;cv::FeatureEvaluator&gt;&amp;, cv::Point_&lt;int&gt;, int, double&amp;) (1,702 samples, 9.79%)</title><rect x="89.5360%" y="341" width="9.7855%" height="15" fill="rgb(249,188,52)" fg:x="15573" fg:w="1702"/><text x="89.7860%" y="351.50">cv::CascadeCla..</text></g><g><title>int cv::predictOrderedStump&lt;cv::HaarEvaluator&gt;(cv::CascadeClassifierImpl&amp;, cv::Ptr&lt;cv::FeatureEvaluator&gt;&amp;, double&amp;) (1,329 samples, 7.64%)</title><rect x="91.6806%" y="325" width="7.6410%" height="15" fill="rgb(225,12,32)" fg:x="15946" fg:w="1329"/><text x="91.9306%" y="335.50">int cv::pr..</text></g><g><title>cv::utils::trace::details::Region::Region(cv::utils::trace::details::Region::LocationStaticStorage const&amp;) (12 samples, 0.07%)</title><rect x="99.2526%" y="309" width="0.0690%" height="15" fill="rgb(247,98,14)" fg:x="17263" fg:w="12"/><text x="99.5026%" y="319.50"></text></g><g><title>cv::CascadeClassifierInvoker::operator()(cv::Range const&amp;) const (2 samples, 0.01%)</title><rect x="99.3216%" y="341" width="0.0115%" height="15" fill="rgb(247,219,48)" fg:x="17275" fg:w="2"/><text x="99.5716%" y="351.50"></text></g><g><title>cv::HaarEvaluator::setWindow(cv::Point_&lt;int&gt;, int) (5 samples, 0.03%)</title><rect x="99.3331%" y="341" width="0.0287%" height="15" fill="rgb(253,60,48)" fg:x="17277" fg:w="5"/><text x="99.5831%" y="351.50"></text></g><g><title>cv::utils::trace::details::Region::Region(cv::utils::trace::details::Region::LocationStaticStorage const&amp;) (2 samples, 0.01%)</title><rect x="99.3618%" y="341" width="0.0115%" height="15" fill="rgb(245,15,52)" fg:x="17282" fg:w="2"/><text x="99.6118%" y="351.50"></text></g><g><title>cv::CascadeClassifierImpl::detectMultiScaleNoGrouping(cv::_InputArray const&amp;, std::__1::vector&lt;cv::Rect_&lt;int&gt;, std::__1::allocator&lt;cv::Rect_&lt;int&gt;&gt;&gt;&amp;, std::__1::vector&lt;int, std::__1::allocator&lt;int&gt;&gt;&amp;, std::__1::vector&lt;double, std::__1::allocator&lt;double&gt;&gt;&amp;, double, cv::Size_&lt;int&gt;, cv::Size_&lt;int&gt;, bool) (1,829 samples, 10.52%)</title><rect x="88.8806%" y="389" width="10.5157%" height="15" fill="rgb(220,133,28)" fg:x="15459" fg:w="1829"/><text x="89.1306%" y="399.50">cv::CascadeClas..</text></g><g><title>cv::parallel_for_(cv::Range const&amp;, cv::ParallelLoopBody const&amp;, double) (1,718 samples, 9.88%)</title><rect x="89.5188%" y="373" width="9.8775%" height="15" fill="rgb(217,180,4)" fg:x="15570" fg:w="1718"/><text x="89.7688%" y="383.50">cv::parallel_f..</text></g><g><title>cv::CascadeClassifierInvoker::operator()(cv::Range const&amp;) const (1,716 samples, 9.87%)</title><rect x="89.5303%" y="357" width="9.8660%" height="15" fill="rgb(251,24,1)" fg:x="15572" fg:w="1716"/><text x="89.7803%" y="367.50">cv::CascadeCla..</text></g><g><title>int cv::predictOrderedStump&lt;cv::HaarEvaluator&gt;(cv::CascadeClassifierImpl&amp;, cv::Ptr&lt;cv::FeatureEvaluator&gt;&amp;, double&amp;) (4 samples, 0.02%)</title><rect x="99.3733%" y="341" width="0.0230%" height="15" fill="rgb(212,185,49)" fg:x="17284" fg:w="4"/><text x="99.6233%" y="351.50"></text></g><g><title>face_cropper::face_detect::FaceDetector::detect_and_crop_face (1,830 samples, 10.52%)</title><rect x="88.8806%" y="469" width="10.5215%" height="15" fill="rgb(215,175,22)" fg:x="15459" fg:w="1830"/><text x="89.1306%" y="479.50">face_cropper::f..</text></g><g><title>cv_CascadeClassifier_detectMultiScale_const__InputArrayR_vectorLRectGR (1,830 samples, 10.52%)</title><rect x="88.8806%" y="453" width="10.5215%" height="15" fill="rgb(250,205,14)" fg:x="15459" fg:w="1830"/><text x="89.1306%" y="463.50">cv_CascadeClass..</text></g><g><title>cv::CascadeClassifier::detectMultiScale(cv::_InputArray const&amp;, std::__1::vector&lt;cv::Rect_&lt;int&gt;, std::__1::allocator&lt;cv::Rect_&lt;int&gt;&gt;&gt;&amp;, double, int, int, cv::Size_&lt;int&gt;, cv::Size_&lt;int&gt;) (1,830 samples, 10.52%)</title><rect x="88.8806%" y="437" width="10.5215%" height="15" fill="rgb(225,211,22)" fg:x="15459" fg:w="1830"/><text x="89.1306%" y="447.50">cv::CascadeClas..</text></g><g><title>cv::CascadeClassifierImpl::detectMultiScale(cv::_InputArray const&amp;, std::__1::vector&lt;cv::Rect_&lt;int&gt;, std::__1::allocator&lt;cv::Rect_&lt;int&gt;&gt;&gt;&amp;, double, int, int, cv::Size_&lt;int&gt;, cv::Size_&lt;int&gt;) (1,830 samples, 10.52%)</title><rect x="88.8806%" y="421" width="10.5215%" height="15" fill="rgb(251,179,42)" fg:x="15459" fg:w="1830"/><text x="89.1306%" y="431.50">cv::CascadeClas..</text></g><g><title>cv::CascadeClassifierImpl::detectMultiScale(cv::_InputArray const&amp;, std::__1::vector&lt;cv::Rect_&lt;int&gt;, std::__1::allocator&lt;cv::Rect_&lt;int&gt;&gt;&gt;&amp;, std::__1::vector&lt;int, std::__1::allocator&lt;int&gt;&gt;&amp;, std::__1::vector&lt;double, std::__1::allocator&lt;double&gt;&gt;&amp;, double, int, int, cv::Size_&lt;int&gt;, cv::Size_&lt;int&gt;, bool) (1,830 samples, 10.52%)</title><rect x="88.8806%" y="405" width="10.5215%" height="15" fill="rgb(208,216,51)" fg:x="15459" fg:w="1830"/><text x="89.1306%" y="415.50">cv::CascadeClas..</text></g><g><title>fclose (2 samples, 0.01%)</title><rect x="99.4021%" y="405" width="0.0115%" height="15" fill="rgb(235,36,11)" fg:x="17289" fg:w="2"/><text x="99.6521%" y="415.50"></text></g><g><title>__close_nocancel (2 samples, 0.01%)</title><rect x="99.4021%" y="389" width="0.0115%" height="15" fill="rgb(213,189,28)" fg:x="17289" fg:w="2"/><text x="99.6521%" y="399.50"></text></g><g><title>__open_nocancel (2 samples, 0.01%)</title><rect x="99.4136%" y="389" width="0.0115%" height="15" fill="rgb(227,203,42)" fg:x="17291" fg:w="2"/><text x="99.6636%" y="399.50"></text></g><g><title>fopen (3 samples, 0.02%)</title><rect x="99.4136%" y="405" width="0.0172%" height="15" fill="rgb(244,72,36)" fg:x="17291" fg:w="3"/><text x="99.6636%" y="415.50"></text></g><g><title>png_do_bgr (2 samples, 0.01%)</title><rect x="99.4308%" y="373" width="0.0115%" height="15" fill="rgb(213,53,17)" fg:x="17294" fg:w="2"/><text x="99.6808%" y="383.50"></text></g><g><title>0x1a092f954 (2 samples, 0.01%)</title><rect x="99.5113%" y="293" width="0.0115%" height="15" fill="rgb(207,167,3)" fg:x="17308" fg:w="2"/><text x="99.7613%" y="303.50"></text></g><g><title>0x1a092f400 (6 samples, 0.03%)</title><rect x="99.5113%" y="309" width="0.0345%" height="15" fill="rgb(216,98,30)" fg:x="17308" fg:w="6"/><text x="99.7613%" y="319.50"></text></g><g><title>0x1a092fde8 (4 samples, 0.02%)</title><rect x="99.5228%" y="293" width="0.0230%" height="15" fill="rgb(236,123,15)" fg:x="17310" fg:w="4"/><text x="99.7728%" y="303.50"></text></g><g><title>deflate (20 samples, 0.11%)</title><rect x="99.4423%" y="341" width="0.1150%" height="15" fill="rgb(248,81,50)" fg:x="17296" fg:w="20"/><text x="99.6923%" y="351.50"></text></g><g><title>0x1a092be94 (20 samples, 0.11%)</title><rect x="99.4423%" y="325" width="0.1150%" height="15" fill="rgb(214,120,4)" fg:x="17296" fg:w="20"/><text x="99.6923%" y="335.50"></text></g><g><title>0x1a092fde8 (2 samples, 0.01%)</title><rect x="99.5458%" y="309" width="0.0115%" height="15" fill="rgb(208,179,34)" fg:x="17314" fg:w="2"/><text x="99.7958%" y="319.50"></text></g><g><title>face_cropper::face_detect::FaceDetector::save_cropped (31 samples, 0.18%)</title><rect x="99.4021%" y="469" width="0.1782%" height="15" fill="rgb(227,140,7)" fg:x="17289" fg:w="31"/><text x="99.6521%" y="479.50"></text></g><g><title>cv_imwrite_const_StringR_const__InputArrayR (31 samples, 0.18%)</title><rect x="99.4021%" y="453" width="0.1782%" height="15" fill="rgb(214,22,6)" fg:x="17289" fg:w="31"/><text x="99.6521%" y="463.50"></text></g><g><title>cv::imwrite(std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt; const&amp;, cv::_InputArray const&amp;, std::__1::vector&lt;int, std::__1::allocator&lt;int&gt;&gt; const&amp;) (31 samples, 0.18%)</title><rect x="99.4021%" y="437" width="0.1782%" height="15" fill="rgb(207,137,27)" fg:x="17289" fg:w="31"/><text x="99.6521%" y="447.50"></text></g><g><title>cv::PngEncoder::write(cv::Mat const&amp;, std::__1::vector&lt;int, std::__1::allocator&lt;int&gt;&gt; const&amp;) (31 samples, 0.18%)</title><rect x="99.4021%" y="421" width="0.1782%" height="15" fill="rgb(210,8,46)" fg:x="17289" fg:w="31"/><text x="99.6521%" y="431.50"></text></g><g><title>png_write_image (26 samples, 0.15%)</title><rect x="99.4308%" y="405" width="0.1495%" height="15" fill="rgb(240,16,54)" fg:x="17294" fg:w="26"/><text x="99.6808%" y="415.50"></text></g><g><title>png_write_row (26 samples, 0.15%)</title><rect x="99.4308%" y="389" width="0.1495%" height="15" fill="rgb(211,209,29)" fg:x="17294" fg:w="26"/><text x="99.6808%" y="399.50"></text></g><g><title>png_write_find_filter (24 samples, 0.14%)</title><rect x="99.4423%" y="373" width="0.1380%" height="15" fill="rgb(226,228,24)" fg:x="17296" fg:w="24"/><text x="99.6923%" y="383.50"></text></g><g><title>png_compress_IDAT (24 samples, 0.14%)</title><rect x="99.4423%" y="357" width="0.1380%" height="15" fill="rgb(222,84,9)" fg:x="17296" fg:w="24"/><text x="99.6923%" y="367.50"></text></g><g><title>png_write_complete_chunk (4 samples, 0.02%)</title><rect x="99.5573%" y="341" width="0.0230%" height="15" fill="rgb(234,203,30)" fg:x="17316" fg:w="4"/><text x="99.8073%" y="351.50"></text></g><g><title>png_write_chunk_data (4 samples, 0.02%)</title><rect x="99.5573%" y="325" width="0.0230%" height="15" fill="rgb(238,109,14)" fg:x="17316" fg:w="4"/><text x="99.8073%" y="335.50"></text></g><g><title>png_default_write_data (4 samples, 0.02%)</title><rect x="99.5573%" y="309" width="0.0230%" height="15" fill="rgb(233,206,34)" fg:x="17316" fg:w="4"/><text x="99.8073%" y="319.50"></text></g><g><title>fwrite (4 samples, 0.02%)</title><rect x="99.5573%" y="293" width="0.0230%" height="15" fill="rgb(220,167,47)" fg:x="17316" fg:w="4"/><text x="99.8073%" y="303.50"></text></g><g><title>__sfvwrite (4 samples, 0.02%)</title><rect x="99.5573%" y="277" width="0.0230%" height="15" fill="rgb(238,105,10)" fg:x="17316" fg:w="4"/><text x="99.8073%" y="287.50"></text></g><g><title>_swrite (3 samples, 0.02%)</title><rect x="99.5630%" y="261" width="0.0172%" height="15" fill="rgb(213,227,17)" fg:x="17317" fg:w="3"/><text x="99.8130%" y="271.50"></text></g><g><title>__swrite (3 samples, 0.02%)</title><rect x="99.5630%" y="245" width="0.0172%" height="15" fill="rgb(217,132,38)" fg:x="17317" fg:w="3"/><text x="99.8130%" y="255.50"></text></g><g><title>__write_nocancel (3 samples, 0.02%)</title><rect x="99.5630%" y="229" width="0.0172%" height="15" fill="rgb(242,146,4)" fg:x="17317" fg:w="3"/><text x="99.8130%" y="239.50"></text></g><g><title>png_read_filter_row_avg3_neon (6 samples, 0.03%)</title><rect x="99.5803%" y="373" width="0.0345%" height="15" fill="rgb(212,61,9)" fg:x="17320" fg:w="6"/><text x="99.8303%" y="383.50"></text></g><g><title>png_read_filter_row_paeth3_neon (9 samples, 0.05%)</title><rect x="99.6148%" y="373" width="0.0517%" height="15" fill="rgb(247,126,22)" fg:x="17326" fg:w="9"/><text x="99.8648%" y="383.50"></text></g><g><title>png_do_bgr (2 samples, 0.01%)</title><rect x="99.6665%" y="357" width="0.0115%" height="15" fill="rgb(220,196,2)" fg:x="17335" fg:w="2"/><text x="99.9165%" y="367.50"></text></g><g><title>0x1a0932a3c (27 samples, 0.16%)</title><rect x="99.6780%" y="341" width="0.1552%" height="15" fill="rgb(208,46,4)" fg:x="17337" fg:w="27"/><text x="99.9280%" y="351.50"></text></g><g><title>inflate (23 samples, 0.13%)</title><rect x="99.8333%" y="341" width="0.1322%" height="15" fill="rgb(252,104,46)" fg:x="17364" fg:w="23"/><text x="100.0833%" y="351.50"></text></g><g><title>cv::PngDecoder::readData(cv::Mat&amp;) (70 samples, 0.40%)</title><rect x="99.5803%" y="405" width="0.4025%" height="15" fill="rgb(237,152,48)" fg:x="17320" fg:w="70"/><text x="99.8303%" y="415.50"></text></g><g><title>png_read_image (70 samples, 0.40%)</title><rect x="99.5803%" y="389" width="0.4025%" height="15" fill="rgb(221,59,37)" fg:x="17320" fg:w="70"/><text x="99.8303%" y="399.50"></text></g><g><title>png_read_row (55 samples, 0.32%)</title><rect x="99.6665%" y="373" width="0.3162%" height="15" fill="rgb(209,202,51)" fg:x="17335" fg:w="55"/><text x="99.9165%" y="383.50"></text></g><g><title>png_read_IDAT_data (53 samples, 0.30%)</title><rect x="99.6780%" y="357" width="0.3047%" height="15" fill="rgb(228,81,30)" fg:x="17337" fg:w="53"/><text x="99.9280%" y="367.50"></text></g><g><title>png_crc_read (2 samples, 0.01%)</title><rect x="99.9713%" y="341" width="0.0115%" height="15" fill="rgb(227,42,39)" fg:x="17388" fg:w="2"/><text x="100.2213%" y="351.50"></text></g><g><title>png_default_read_data (2 samples, 0.01%)</title><rect x="99.9713%" y="325" width="0.0115%" height="15" fill="rgb(221,26,2)" fg:x="17388" fg:w="2"/><text x="100.2213%" y="335.50"></text></g><g><title>fread (2 samples, 0.01%)</title><rect x="99.9713%" y="309" width="0.0115%" height="15" fill="rgb(254,61,31)" fg:x="17388" fg:w="2"/><text x="100.2213%" y="319.50"></text></g><g><title>__fread (2 samples, 0.01%)</title><rect x="99.9713%" y="293" width="0.0115%" height="15" fill="rgb(222,173,38)" fg:x="17388" fg:w="2"/><text x="100.2213%" y="303.50"></text></g><g><title>__srefill1 (2 samples, 0.01%)</title><rect x="99.9713%" y="277" width="0.0115%" height="15" fill="rgb(218,50,12)" fg:x="17388" fg:w="2"/><text x="100.2213%" y="287.50"></text></g><g><title>_sread (2 samples, 0.01%)</title><rect x="99.9713%" y="261" width="0.0115%" height="15" fill="rgb(223,88,40)" fg:x="17388" fg:w="2"/><text x="100.2213%" y="271.50"></text></g><g><title>__sread (2 samples, 0.01%)</title><rect x="99.9713%" y="245" width="0.0115%" height="15" fill="rgb(237,54,19)" fg:x="17388" fg:w="2"/><text x="100.2213%" y="255.50"></text></g><g><title>__read_nocancel (2 samples, 0.01%)</title><rect x="99.9713%" y="229" width="0.0115%" height="15" fill="rgb(251,129,25)" fg:x="17388" fg:w="2"/><text x="100.2213%" y="239.50"></text></g><g><title>all (17,393 samples, 100%)</title><rect x="0.0000%" y="933" width="100.0000%" height="15" fill="rgb(238,97,19)" fg:x="0" fg:w="17393"/><text x="0.2500%" y="943.50"></text></g><g><title>thread_start (16,966 samples, 97.54%)</title><rect x="2.4550%" y="917" width="97.5450%" height="15" fill="rgb(240,169,18)" fg:x="427" fg:w="16966"/><text x="2.7050%" y="927.50">thread_start</text></g><g><title>_pthread_start (16,966 samples, 97.54%)</title><rect x="2.4550%" y="901" width="97.5450%" height="15" fill="rgb(230,187,49)" fg:x="427" fg:w="16966"/><text x="2.7050%" y="911.50">_pthread_start</text></g><g><title>std::sys::pal::unix::thread::Thread::new::thread_start (16,966 samples, 97.54%)</title><rect x="2.4550%" y="885" width="97.5450%" height="15" fill="rgb(209,44,26)" fg:x="427" fg:w="16966"/><text x="2.7050%" y="895.50">std::sys::pal::unix::thread::Thread::new::thread_start</text></g><g><title>core::ops::function::FnOnce::call_once{{vtable.shim}} (16,966 samples, 97.54%)</title><rect x="2.4550%" y="869" width="97.5450%" height="15" fill="rgb(244,0,6)" fg:x="427" fg:w="16966"/><text x="2.7050%" y="879.50">core::ops::function::FnOnce::call_once{{vtable.shim}}</text></g><g><title>std::sys::backtrace::__rust_begin_short_backtrace (16,966 samples, 97.54%)</title><rect x="2.4550%" y="853" width="97.5450%" height="15" fill="rgb(248,18,21)" fg:x="427" fg:w="16966"/><text x="2.7050%" y="863.50">std::sys::backtrace::__rust_begin_short_backtrace</text></g><g><title>rayon_core::registry::ThreadBuilder::run (16,966 samples, 97.54%)</title><rect x="2.4550%" y="837" width="97.5450%" height="15" fill="rgb(245,180,19)" fg:x="427" fg:w="16966"/><text x="2.7050%" y="847.50">rayon_core::registry::ThreadBuilder::run</text></g><g><title>rayon_core::registry::WorkerThread::wait_until_cold (16,966 samples, 97.54%)</title><rect x="2.4550%" y="821" width="97.5450%" height="15" fill="rgb(252,118,36)" fg:x="427" fg:w="16966"/><text x="2.7050%" y="831.50">rayon_core::registry::WorkerThread::wait_until_cold</text></g><g><title>_$LT$rayon_core..job..StackJob$LT$L$C$F$C$R$GT$$u20$as$u20$rayon_core..job..Job$GT$::execute::h1e06f831a7632c80 (.llvm.9053148768203175168) (2,238 samples, 12.87%)</title><rect x="87.1328%" y="805" width="12.8672%" height="15" fill="rgb(210,224,19)" fg:x="15155" fg:w="2238"/><text x="87.3828%" y="815.50">_$LT$rayon_core..jo..</text></g><g><title>rayon_core::join::join_context::_{{closure}} (2,238 samples, 12.87%)</title><rect x="87.1328%" y="789" width="12.8672%" height="15" fill="rgb(218,30,24)" fg:x="15155" fg:w="2238"/><text x="87.3828%" y="799.50">rayon_core::join::j..</text></g><g><title>rayon::iter::plumbing::bridge_unindexed_producer_consumer (2,238 samples, 12.87%)</title><rect x="87.1328%" y="773" width="12.8672%" height="15" fill="rgb(219,75,50)" fg:x="15155" fg:w="2238"/><text x="87.3828%" y="783.50">rayon::iter::plumbi..</text></g><g><title>rayon_core::registry::in_worker (2,238 samples, 12.87%)</title><rect x="87.1328%" y="757" width="12.8672%" height="15" fill="rgb(234,72,50)" fg:x="15155" fg:w="2238"/><text x="87.3828%" y="767.50">rayon_core::registr..</text></g><g><title>rayon_core::join::join_context::_$u7b$$u7b$closure$u7d$$u7d$::h70fe2b414aee72d8 (.llvm.14482711468325970259) (2,238 samples, 12.87%)</title><rect x="87.1328%" y="741" width="12.8672%" height="15" fill="rgb(219,100,48)" fg:x="15155" fg:w="2238"/><text x="87.3828%" y="751.50">rayon_core::join::j..</text></g><g><title>rayon::iter::plumbing::bridge_unindexed_producer_consumer (2,238 samples, 12.87%)</title><rect x="87.1328%" y="725" width="12.8672%" height="15" fill="rgb(253,5,41)" fg:x="15155" fg:w="2238"/><text x="87.3828%" y="735.50">rayon::iter::plumbi..</text></g><g><title>rayon_core::registry::in_worker (2,238 samples, 12.87%)</title><rect x="87.1328%" y="709" width="12.8672%" height="15" fill="rgb(247,181,11)" fg:x="15155" fg:w="2238"/><text x="87.3828%" y="719.50">rayon_core::registr..</text></g><g><title>rayon_core::join::join_context::_$u7b$$u7b$closure$u7d$$u7d$::h70fe2b414aee72d8 (.llvm.14482711468325970259) (2,238 samples, 12.87%)</title><rect x="87.1328%" y="693" width="12.8672%" height="15" fill="rgb(222,223,25)" fg:x="15155" fg:w="2238"/><text x="87.3828%" y="703.50">rayon_core::join::j..</text></g><g><title>rayon::iter::plumbing::bridge_unindexed_producer_consumer (2,238 samples, 12.87%)</title><rect x="87.1328%" y="677" width="12.8672%" height="15" fill="rgb(214,198,28)" fg:x="15155" fg:w="2238"/><text x="87.3828%" y="687.50">rayon::iter::plumbi..</text></g><g><title>rayon_core::registry::in_worker (2,238 samples, 12.87%)</title><rect x="87.1328%" y="661" width="12.8672%" height="15" fill="rgb(230,46,43)" fg:x="15155" fg:w="2238"/><text x="87.3828%" y="671.50">rayon_core::registr..</text></g><g><title>rayon_core::join::join_context::_$u7b$$u7b$closure$u7d$$u7d$::h70fe2b414aee72d8 (.llvm.14482711468325970259) (2,238 samples, 12.87%)</title><rect x="87.1328%" y="645" width="12.8672%" height="15" fill="rgb(233,65,53)" fg:x="15155" fg:w="2238"/><text x="87.3828%" y="655.50">rayon_core::join::j..</text></g><g><title>rayon::iter::plumbing::bridge_unindexed_producer_consumer (2,238 samples, 12.87%)</title><rect x="87.1328%" y="629" width="12.8672%" height="15" fill="rgb(221,121,27)" fg:x="15155" fg:w="2238"/><text x="87.3828%" y="639.50">rayon::iter::plumbi..</text></g><g><title>rayon_core::registry::in_worker (2,238 samples, 12.87%)</title><rect x="87.1328%" y="613" width="12.8672%" height="15" fill="rgb(247,70,47)" fg:x="15155" fg:w="2238"/><text x="87.3828%" y="623.50">rayon_core::registr..</text></g><g><title>rayon_core::join::join_context::_$u7b$$u7b$closure$u7d$$u7d$::h70fe2b414aee72d8 (.llvm.14482711468325970259) (2,238 samples, 12.87%)</title><rect x="87.1328%" y="597" width="12.8672%" height="15" fill="rgb(228,85,35)" fg:x="15155" fg:w="2238"/><text x="87.3828%" y="607.50">rayon_core::join::j..</text></g><g><title>rayon::iter::plumbing::bridge_unindexed_producer_consumer (2,238 samples, 12.87%)</title><rect x="87.1328%" y="581" width="12.8672%" height="15" fill="rgb(209,50,18)" fg:x="15155" fg:w="2238"/><text x="87.3828%" y="591.50">rayon::iter::plumbi..</text></g><g><title>rayon_core::registry::in_worker (2,238 samples, 12.87%)</title><rect x="87.1328%" y="565" width="12.8672%" height="15" fill="rgb(250,19,35)" fg:x="15155" fg:w="2238"/><text x="87.3828%" y="575.50">rayon_core::registr..</text></g><g><title>rayon_core::join::join_context::_$u7b$$u7b$closure$u7d$$u7d$::h70fe2b414aee72d8 (.llvm.14482711468325970259) (2,238 samples, 12.87%)</title><rect x="87.1328%" y="549" width="12.8672%" height="15" fill="rgb(253,107,29)" fg:x="15155" fg:w="2238"/><text x="87.3828%" y="559.50">rayon_core::join::j..</text></g><g><title>rayon::iter::plumbing::bridge_unindexed_producer_consumer (2,238 samples, 12.87%)</title><rect x="87.1328%" y="533" width="12.8672%" height="15" fill="rgb(252,179,29)" fg:x="15155" fg:w="2238"/><text x="87.3828%" y="543.50">rayon::iter::plumbi..</text></g><g><title>&lt;&amp;rayon::iter::par_bridge::IterParallelProducer&lt;Iter&gt; as rayon::iter::plumbing::UnindexedProducer&gt;::fold_with (2,238 samples, 12.87%)</title><rect x="87.1328%" y="517" width="12.8672%" height="15" fill="rgb(238,194,6)" fg:x="15155" fg:w="2238"/><text x="87.3828%" y="527.50">&lt;&amp;rayon::iter::par_..</text></g><g><title>&lt;indicatif::rayon::ProgressFolder&lt;C&gt; as rayon::iter::plumbing::Folder&lt;T&gt;&gt;::consume (2,238 samples, 12.87%)</title><rect x="87.1328%" y="501" width="12.8672%" height="15" fill="rgb(238,164,29)" fg:x="15155" fg:w="2238"/><text x="87.3828%" y="511.50">&lt;indicatif::rayon::..</text></g><g><title>face_cropper::pipeline::detect_and_save (1,934 samples, 11.12%)</title><rect x="88.8806%" y="485" width="11.1194%" height="15" fill="rgb(224,25,9)" fg:x="15459" fg:w="1934"/><text x="89.1306%" y="495.50">face_cropper::pi..</text></g><g><title>face_cropper::face_detect::load_image (73 samples, 0.42%)</title><rect x="99.5803%" y="469" width="0.4197%" height="15" fill="rgb(244,153,23)" fg:x="17320" fg:w="73"/><text x="99.8303%" y="479.50"></text></g><g><title>cv_imread_const_StringR_int (73 samples, 0.42%)</title><rect x="99.5803%" y="453" width="0.4197%" height="15" fill="rgb(212,203,14)" fg:x="17320" fg:w="73"/><text x="99.8303%" y="463.50"></text></g><g><title>cv::imread(std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt; const&amp;, int) (73 samples, 0.42%)</title><rect x="99.5803%" y="437" width="0.4197%" height="15" fill="rgb(220,164,20)" fg:x="17320" fg:w="73"/><text x="99.8303%" y="447.50"></text></g><g><title>cv::imread_(std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt; const&amp;, int, cv::_OutputArray const&amp;) (73 samples, 0.42%)</title><rect x="99.5803%" y="421" width="0.4197%" height="15" fill="rgb(222,203,48)" fg:x="17320" fg:w="73"/><text x="99.8303%" y="431.50"></text></g><g><title>cv::findDecoder(std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt; const&amp;) (2 samples, 0.01%)</title><rect x="99.9885%" y="405" width="0.0115%" height="15" fill="rgb(215,159,22)" fg:x="17391" fg:w="2"/><text x="100.2385%" y="415.50"></text></g></svg></svg>